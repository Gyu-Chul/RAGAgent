[
  {
    "type": "script",
    "name": "",
    "start_line": 2,
    "end_line": 2,
    "code": "const connection = require('../DatabaseLoad');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 3,
    "end_line": 3,
    "code": "const { CreateAttendanceList } = require('./CreateAttendanceList.js');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 4,
    "end_line": 4,
    "code": "const { DeleteContent } = require('./DeleteContent.js');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 7,
    "end_line": 75,
    "code": "module.exports = {\r\n    EditGroupSchedules : async(data) => {\r\n        const functionType = data[\"functionType\"];\r\n        const scheduleToken = data[\"scheduleToken\"];\r\n\r\n        if (functionType == 1){//일정 불러오기\r\n            const result = await LoadSchedule(scheduleToken);\r\n            return result;\r\n\r\n        }else if (functionType == 2){// 일정 삭제\r\n\r\n            const userPermission = data[\"userPermission\"];\r\n            if (userPermission == 1 || userPermission == 2){\r\n\r\n                if (data[\"scheduleAttendance\"] == true){ // 출석 기능이 포함된 일정이라면,\r\n                    var result1 = await DeleteContent(scheduleToken,1);\r\n                \r\n                }else{\r\n                    var result1 = 1;\r\n                }\r\n                console.log(data[\"scheduleAttendance\"]);\r\n                if (result1 == 1){ //출석 데이터가 정상적으로 삭제됨. or 원래 없었음.\r\n                    const result2 = await DeleteSchedule(scheduleToken);\r\n                    return {result : result2 , resources : null};\r\n                }\r\n                \r\n            }\r\n\r\n        }else if (functionType == 3){//일정 수정, 일정 저장\r\n            const userPermission = data[\"userPermission\"];\r\n            const scheduleAttendance = data[\"scheduleAttendance\"];\r\n            if (userPermission == 1 || userPermission == 2){\r\n                \r\n                if (scheduleToken == null){ // scheduleToken 이 존재하지 않다면, 일정을 새로 생성하는 동작임.\r\n\r\n                    if (scheduleAttendance == true){ //출석기능을 사용하는 일정\r\n                        \r\n                        const result1 = await CreateSchedule(data); //생성된 scheduleToken 출력됨\r\n                        const result2 = await CreateAttendanceList(result1,data[\"groupToken\"]);\r\n\r\n                        if (result2.result == 0){ //출석 데이터를 생성하지 못했다면,\r\n                            const result = await DeleteSchedule(result1);\r\n                            return {result : 0 , resources : null};\r\n                        }else{\r\n                            return result2;\r\n                        }\r\n\r\n\r\n                    } else {// 출석기능을 사용하지 않는 일정\r\n\r\n                        const result = await CreateSchedule(data);\r\n\r\n                        if (result != 0){\r\n                            return {result : 1 , resources : null};\r\n                        }else{\r\n                            return {result : 0 , resources : null};\r\n                        }\r\n                        \r\n                    }\r\n\r\n                }else{\r\n                    const result = await EditSchedule(data);\r\n                    console.log(result)\r\n                    return {result : result , resources : null};\r\n                }\r\n            }\r\n        }\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "function",
    "name": "LoadSchedule",
    "start_line": 77,
    "end_line": 98,
    "code": "async function LoadSchedule(scheduleToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 일정 데이터 전부 불러오기\r\n        connection.query(`SELECT scheduleStartDate,scheduleAlert,\r\n                          scheduleContent,scheduleEndDate,scheduleLocation,scheduleAttendance FROM Schedules \r\n                          WHERE scheduleToken = ?`, [scheduleToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 출력된 행의 수 확인\r\n                if (results.length > 0) {\r\n                    resolve({result : 1, resources: results});  // 데이터가 정상적으로 출력됨.\r\n                } else {\r\n                    resolve({result : 0 ,resources : null});  //출력된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "function",
    "name": "DeleteSchedule",
    "start_line": 101,
    "end_line": 121,
    "code": "async function DeleteSchedule(scheduleToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 일정 삭제하기\r\n        connection.query(`DELETE FROM Schedules \r\n                          WHERE scheduleToken = ?`, [scheduleToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 삭제된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 삭제됨\r\n                } else {\r\n                    resolve(0);  //삭제된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "function",
    "name": "CreateSchedule",
    "start_line": 123,
    "end_line": 151,
    "code": "async function CreateSchedule(data) {\r\n    return new Promise((resolve, reject) => {\r\n        // 일정 추가하기\r\n        connection.query(`INSERT INTO Schedules \r\n                          (groupToken,scheduleTitle,scheduleContent,scheduleStartDate,scheduleEndDate,\r\n                          scheduleLocation,scheduleImportance,scheduleAlert,scheduleAttendance,scheduleAttendanceCode)\r\n                          VALUES(?,?,?,?,?,?,?,?,?,?) `, \r\n                          [data[\"groupToken\"],data[\"scheduleTitle\"],\r\n                           data[\"scheduleContent\"],data[\"scheduleStartDate\"],\r\n                           data[\"scheduleEndDate\"],data[\"scheduleLocation\"],\r\n                           data[\"scheduleImportance\"],\r\n                           data[\"scheduleAlert\"],data[\"scheduleAttendance\"],\r\n                           data[\"scheduleAttendanceCode\"]], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 추가된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(results.insertId);  // 데이터가 정상적으로 추가됨\r\n                } else {\r\n                    resolve(0);  //추가된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  },
  {
    "type": "function",
    "name": "EditSchedule",
    "start_line": 153,
    "end_line": 180,
    "code": "async function EditSchedule(data) {\r\n    return new Promise((resolve, reject) => {\r\n        // 일정 수정하기\r\n        connection.query(`UPDATE Schedules \r\n                          SET scheduleTitle = ?,scheduleContent = ? ,scheduleStartDate = ? ,scheduleEndDate = ?,\r\n                          scheduleLocation = ? ,scheduleImportance = ? ,scheduleAlert = ?\r\n                          WHERE scheduleToken = ? `, \r\n                          [data[\"scheduleTitle\"],\r\n                           data[\"scheduleContent\"],data[\"scheduleStartDate\"],\r\n                           data[\"scheduleEndDate\"],data[\"scheduleLocation\"],\r\n                           data[\"scheduleImportance\"],\r\n                           data[\"scheduleAlert\"],data[\"scheduleToken\"]], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 수정된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 수정됨\r\n                } else {\r\n                    resolve(0);  //수정된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupSchedules.js"
  }
]