[
  {
    "type": "script",
    "name": "",
    "start_line": 2,
    "end_line": 2,
    "code": "const connection = require('../DatabaseLoad');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 5,
    "end_line": 111,
    "code": "module.exports = {\r\n    EditGroupMembers : async(userToken,groupToken,userPermission,data) => {\r\n        const functionType = data[\"functionType\"];\r\n\r\n        if (functionType == 1){// 멤버 강퇴\r\n            const userID = data[\"userID\"]; //강퇴할 유저 ID\r\n            console.log(\"작동됨\");\r\n            console.log(userID,groupToken);\r\n            if (userPermission == 1 || userPermission == 2){\r\n                const kickUserPermission = await GetPermission(userID,groupToken);\r\n                console.log(kickUserPermission);\r\n                if (kickUserPermission == 0){ // 강퇴 가능함.\r\n                    \r\n                    const result = await KickUser(userID,groupToken);\r\n                    return {result : result , resources : null}\r\n                }else{ // 강퇴 불가능\r\n                    return {result : 0 , resources : null};\r\n                }\r\n                    \r\n            }\r\n        \r\n        }else if (functionType == 2){// 멤버 입장 수락\r\n            const userID = data[\"userID\"]; //입장 수락할 유저 ID\r\n\r\n            if (userPermission == 1 || userPermission == 2){\r\n                const acceptUserPermission = await GetPermission(userID,groupToken);\r\n\r\n                if (acceptUserPermission == 4){// 수락 가능함.\r\n                    \r\n                    const result = await AcceptUser(userID,groupToken);\r\n                    return {result : result , resources : null};\r\n                }else{\r\n                    return {result : 0, resources : null};\r\n                }\r\n            }\r\n\r\n        }else if (functionType == 3){// 멤버 초대 (소프트웨어 유저 초대)\r\n            const userID = data[\"userID\"];\r\n\r\n            if (userPermission == 1 || userPermission == 2){\r\n                \r\n                const result = await InviteUser(userID,groupToken);\r\n                return {result : result , resources : null};\r\n\r\n            }else{\r\n                return {result : 0 , resources : null};\r\n            }\r\n\r\n        }else if (functionType == 4){// 멤버 (소프트웨어 비유저 등록)\r\n        \r\n            const userName = data[\"userName\"];\r\n            const userPhone = data[\"userPhone\"];\r\n\r\n            if (userPermission == 1 || userPermission == 2){\r\n                \r\n                const result = await SetNotUser(userName,userPhone,groupToken);\r\n\r\n                return {result : result , resources : null};\r\n                \r\n            }else{\r\n\r\n                return {result : 0 , resources : null};\r\n            }\r\n            \r\n        }else if (functionType == 5){// 멤버 권한 조정 (일반 유저)\r\n\r\n            const userID = data[\"userID\"];\r\n            if (userPermission == 2){\r\n                \r\n                const result = await ModifyPermission(userID,groupToken,0);\r\n\r\n                return {result : result , resources : null};\r\n            }else{\r\n                return {result : 0 , resources : null};\r\n            }\r\n            \r\n            \r\n        }else if (functionType == 6){// 멤버 권한 조정 ( 관리자 )\r\n\r\n            const userID = data[\"userID\"];\r\n            if (userPermission == 2){\r\n                \r\n                const result = await ModifyPermission(userID,groupToken,1);\r\n\r\n                return {result : result , resources : null};\r\n            }else{\r\n                return {result : 0 , resources : null};\r\n            }\r\n\r\n        }else if (functionType == 7){// 멤버 권한 조정 ( 창시자 , 자기 자신은 관리자로 강등 )\r\n            \r\n            const userID = data[\"userID\"];\r\n\r\n            if (userPermission == 2){\r\n\r\n                const result = await ChangeGroupPublisher(userToken,userID,groupToken);\r\n\r\n                return {result : result , resources : null};\r\n\r\n            }else{\r\n                return {result : 0, resources : null};\r\n            }\r\n        }else{ //functionType 이 잘못 됨 \r\n            return {result : 99 , resources : null};\r\n        } \r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "KickUser",
    "start_line": 115,
    "end_line": 137,
    "code": "async function KickUser(userID,groupToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 유저 데이터 삭제\r\n        connection.query(`DELETE FROM UsersOrganizations \r\n                          WHERE userToken = (SELECT userToken FROM Users WHERE userID = ?)\r\n                          and groupToken = ?`, [userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 수정된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    \r\n                    resolve(1);  // 데이터가 정상적으로 삭제됨.\r\n                } else {\r\n                    resolve(99);  //삭제할 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "AcceptUser",
    "start_line": 138,
    "end_line": 160,
    "code": "async function AcceptUser(userID,groupToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 유저 조직 참가 수락\r\n        connection.query(`UPDATE UsersOrganizations \r\n                          SET userPermission = 0\r\n                          WHERE userToken = (SELECT userToken FROM Users WHERE userID = ?)\r\n                          and groupToken = ?`, [userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 변경된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 변경됨.\r\n                } else {\r\n                    resolve(99);  //변경된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "InviteUser",
    "start_line": 162,
    "end_line": 183,
    "code": "async function InviteUser(userID,groupToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 유저 ID 기반으로 초대 발송\r\n        connection.query(`INSERT INTO UsersOrganizations \r\n                          (userToken,groupToken,userPermission)\r\n                          VALUES ((SELECT userToken FROM Users WHERE userID = ?),?,3)`, [userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 추가된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 추가됨.\r\n                } else {\r\n                    resolve(99);  //추가된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "SetNotUser",
    "start_line": 185,
    "end_line": 206,
    "code": "async function SetNotUser(userName,userPhone,groupToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 소프트웨어 비유저 조직에 등록\r\n        connection.query(`INSERT INTO NotUsersOrganizations \r\n                          (userName,userPhone,groupToken)\r\n                          VALUES (?,?,?)`, [userName,userPhone,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 추가된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 추가됨.\r\n                } else {\r\n                    resolve(99);  //추가된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "ModifyPermission",
    "start_line": 208,
    "end_line": 230,
    "code": "async function ModifyPermission(userID,groupToken,value) {\r\n    return new Promise((resolve, reject) => {\r\n        // 유저 권한 수정 \r\n        connection.query(`UPDATE UsersOrganizations \r\n                          SET userPermission = ?\r\n                          WHERE userToken = (SELECT userToken FROM Users WHERE userID = ?)\r\n                          and groupToken = ?`, [value,userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 수정된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);  // 데이터가 정상적으로 수정됨\r\n                } else {\r\n                    resolve(99);  //수정된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "ChangeGroupPublisher",
    "start_line": 232,
    "end_line": 273,
    "code": "async function ChangeGroupPublisher(userToken,userID,groupToken) {\r\n    const result = await ModifyPermission(userID,groupToken,2);\r\n    if ( result != 1 ){//입력받은 유저를 창시자로 변경이 정상적으로 이루어지지 않았다면\r\n        resolve(99); \r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        // 조직 창시자 변경\r\n        connection.query(`UPDATE Organizations \r\n                          SET userToken = (SELECT userToken FROM Users WHERE userID = ?)\r\n                          WHERE groupToken = ?`, [userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n                // 변경된 행의 수 확인\r\n                if (results.affectedRows > 0) {\r\n                    //원래 창시자였던 유저를 관리자로 변경\r\n                    connection.query(`UPDATE UsersOrganizations \r\n                        SET userPermission = 1\r\n                        WHERE userToken = ? and groupToken = ?`, [userToken,groupToken], \r\n                        (error, results, fields) => {\r\n                            if (error) {\r\n                                console.error('쿼리 실행 오류:', error);\r\n                                return reject(error);\r\n                            }\r\n\r\n                            // 변경된 행의 수 확인\r\n                            if (results.affectedRows > 0) {\r\n                                resolve(1);  // 데이터가 전부 정상적으로 변경됨.\r\n                            } else {\r\n                                resolve(99);  //변경된 데이터가 없음\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    resolve(99);  //변경된 데이터가 없음\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  },
  {
    "type": "function",
    "name": "GetPermission",
    "start_line": 275,
    "end_line": 297,
    "code": "async function GetPermission(userID,groupToken) {\r\n    return new Promise((resolve, reject) => {\r\n        // 유저 데이터 삭제\r\n        connection.query(`SELECT usrorg.userPermission FROM UsersOrganizations AS usrorg \r\n            JOIN Users AS usr ON usr.userToken = usrorg.userToken\r\n            WHERE usr.userID = ? and usrorg.groupToken = ?;`, [userID,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n\r\n                // 출력된 행의 수 확인\r\n                if (results.length > 0) {\r\n                    const userPermission = results[0].userPermission;\r\n                    resolve(userPermission);  // 데이터가 잘 출력됨 \r\n                } else {\r\n                    resolve(99);  // 데이터가 출력되지 않음 (해당 userID가 없음)\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\EditGroupMembers.js"
  }
]