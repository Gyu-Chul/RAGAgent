[
  {
    "type": "script",
    "name": "",
    "start_line": 3,
    "end_line": 3,
    "code": "const { CheckDuplicate } = require('./CheckDuplicate.js');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\ChangeNormalData.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 4,
    "end_line": 4,
    "code": "const connection = require('../DatabaseLoad');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\ChangeNormalData.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 7,
    "end_line": 67,
    "code": "module.exports = {\r\n    ChangeNormalData : async(userToken,data) => {\r\n        const functionType = data[\"functionType\"];\r\n        \r\n        const setKey = data[\"setKey\"];\r\n        const setValue = data[\"setValue\"];\r\n\r\n        if (functionType == 1){ //일반 유저 데이터 수정\r\n            const result = await editData(\"userToken\",userToken,\"Users\",setKey,setValue);\r\n            return {result : result};\r\n\r\n        } else if (functionType == 2){ //조직 데이터 수정\r\n            const userPermission = data[\"userPermission\"];\r\n            const groupToken = data[\"groupToken\"]\r\n\r\n            if (userPermission == 2){\r\n\r\n                const result = await editData(\"groupToken\",groupToken,\"Organizations\",setKey,setValue);\r\n                return {result : result , resources : null};\r\n\r\n            } else{ //조직 데이터 수정 권한 없음.\r\n                return {result : 0 , resources : null};\r\n            }\r\n            \r\n\r\n        } else if (functionType == 3){ //유저 ID 중복 요청\r\n          \r\n            const userID = data[\"userID\"];\r\n\r\n            table = \"Users\"\r\n            data = {userID : userID};\r\n            const result = await CheckDuplicate(table,data);\r\n            return {result : result , resources : null};\r\n\r\n        } else if (functionType == 4){ //조직 ID 중복 요청\r\n         \r\n            const groupID = data[\"groupID\"];\r\n\r\n            table = \"Organizations\"\r\n            data = {groupID : groupID};\r\n            const result = await CheckDuplicate(table,data);\r\n            return {result : result , resources : null};\r\n        } else if (functionType == 5){ //소프트웨어 비유저 데이터 수정\r\n\r\n            const userPermission = data[\"userPermission\"];\r\n            const notUserToken = data[\"notUserToken\"];\r\n\r\n            if (userPermission == 1 || userPermission == 2){\r\n                const result = await editData(\"notUserToken\",notUserToken,\"NotUsersOrganizations\",setKey,setValue);\r\n                return {result : result , resources : null};\r\n            }else{\r\n                return {result : 0 , resources : null};\r\n            }\r\n \r\n\r\n        }else{// functionType 잘못됨\r\n            return {result : 0 , resources : null}; \r\n        }\r\n\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\ChangeNormalData.js"
  },
  {
    "type": "function",
    "name": "editData",
    "start_line": 71,
    "end_line": 89,
    "code": "async function editData(token,userToken,table,key,value) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connection.query('UPDATE ?? SET ?? = ? WHERE ?? = ?', [table,key,value,token,userToken],\r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n\r\n                } //쿼리 결과가 없다면 ID가 존재하지 않다는 뜻\r\n                if (results.affectedRows > 0) {\r\n                    resolve(1);\r\n                } else {\r\n                    resolve(0);\r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\ChangeNormalData.js"
  }
]