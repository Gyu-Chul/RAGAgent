[
  {
    "type": "script",
    "name": "",
    "start_line": 2,
    "end_line": 2,
    "code": "const connection = require('../DatabaseLoad');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 3,
    "end_line": 3,
    "code": "const moment = require('moment-timezone');",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 6,
    "end_line": 26,
    "code": "module.exports = {\r\n    CheckGroupStatus : async(userToken,data) => {\r\n        try {\r\n            const todayDate = data[\"todayDate\"];\r\n            const groupToken = data[\"groupToken\"];\r\n            \r\n            const scheduleResources1 = await GetFutureSchedules(userToken,groupToken,todayDate);\r\n            const scheduleResources2 = await GetFutureSchedules2(groupToken,todayDate);\r\n            const noticeResources = await GetNotices(userToken,groupToken,todayDate);\r\n\r\n            const resources = [noticeResources,scheduleResources1,scheduleResources2];\r\n\r\n            return {result : 1, resources : resources};\r\n        }catch(error){\r\n            return {result : 0, resources : null};\r\n        }\r\n        \r\n        //복사 붙여넣기 용 \r\n        \r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  },
  {
    "type": "function",
    "name": "GetFutureSchedules",
    "start_line": 29,
    "end_line": 56,
    "code": "async function GetFutureSchedules(userToken,groupToken,todayDate) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(`SELECT sc.scheduleToken, sc.scheduleTitle, ac.attendanceStatus ,sc.scheduleStartDate ,sc.scheduleEndDate , ac.absentReason\r\n            FROM Schedules AS sc \r\n            JOIN AttendanceUsers AS ac ON sc.scheduleToken = ac.scheduleToken\r\n            WHERE (? BETWEEN scheduleStartDate AND scheduleEndDate \r\n            or scheduleStartDate BETWEEN ? AND DATE_ADD(?, INTERVAL 2 WEEK))\r\n            AND sc.groupToken = ?\r\n            AND ac.userToken = ?\r\n            AND sc.scheduleAttendance = true`, [todayDate,todayDate,todayDate,groupToken,userToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n                if (results.length > 0) {\r\n                    results.forEach(schedule => {\r\n                        schedule.scheduleStartDate = moment(schedule.scheduleStartDate).tz('Asia/Seoul').format('YYYY-MM-DD');\r\n                        schedule.scheduleEndDate = moment(schedule.scheduleEndDate).tz('Asia/Seoul').format('YYYY-MM-DD');\r\n                    });\r\n                    resolve(results);  \r\n                } else {\r\n                    resolve([]);  \r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  },
  {
    "type": "function",
    "name": "GetFutureSchedules2",
    "start_line": 59,
    "end_line": 84,
    "code": "async function GetFutureSchedules2(groupToken,todayDate) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(`SELECT sc.scheduleToken, sc.scheduleTitle ,sc.scheduleStartDate ,sc.scheduleEndDate\r\n            FROM Schedules AS sc \r\n            WHERE (? BETWEEN scheduleStartDate AND scheduleEndDate \r\n            or scheduleStartDate BETWEEN ? AND DATE_ADD(?, INTERVAL 2 WEEK))\r\n            AND sc.groupToken = ?\r\n            AND sc.scheduleAttendance = false`, [todayDate,todayDate,todayDate,groupToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n                if (results.length > 0) {\r\n                    results.forEach(schedule => {\r\n                        schedule.scheduleStartDate = moment(schedule.scheduleStartDate).tz('Asia/Seoul').format('YYYY-MM-DD');\r\n                        schedule.scheduleEndDate = moment(schedule.scheduleEndDate).tz('Asia/Seoul').format('YYYY-MM-DD');\r\n                    });\r\n                    resolve(results);  \r\n                } else {\r\n                    resolve([]);  \r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  },
  {
    "type": "function",
    "name": "GetNotices",
    "start_line": 86,
    "end_line": 111,
    "code": "async function GetNotices(userToken,groupToken,todayDate) {\r\n    return new Promise((resolve, reject) => {\r\n        connection.query(`SELECT nc.noticeToken, nc.noticeTitle, du.duesStatus , nc.noticeDues\r\n            FROM Notices AS nc \r\n            JOIN DuesUsers AS du ON nc.noticeToken = du.noticeToken\r\n            WHERE ? BETWEEN nc.noticeCreatedDate AND COALESCE(nc.noticeEndDate, '2099-12-31')\r\n            AND nc.groupToken = ?\r\n            AND du.userToken = ?\r\n            AND nc.noticeType  = 2\r\n            AND du.duesStatus = 0`, [todayDate,groupToken,userToken], \r\n            (error, results, fields) => {\r\n                if (error) {\r\n                    console.error('쿼리 실행 오류:', error);\r\n                    return reject(error);\r\n                }\r\n    \r\n                \r\n                if (results.length > 0) {\r\n                    resolve(results);  \r\n                } else {\r\n                    resolve([]);  \r\n                }\r\n            }\r\n        );\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\free\\JEYSports\\Modules\\CheckGroupStatus.js"
  }
]