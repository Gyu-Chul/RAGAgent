# Microservices Docker Compose - 각 서비스별 독립 컨테이너

networks:
  ragit-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  etcd_data:
  minio_data:
  milvus_data:

services:
  # Database
  postgres:
    image: postgres:15
    container_name: ragit-postgres
    environment:
      POSTGRES_DB: ragit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ragit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: ragit-redis
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - ragit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: ragit-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - ragit-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MinIO for Milvus
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: ragit-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - ragit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Milvus Vector Database
  milvus:
    image: milvusdb/milvus:v2.4.15
    container_name: ragit-milvus
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - ragit-network
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    command: ["milvus", "run", "standalone"]

  # Backend Service
  backend:
    image: minchulshin/ragit-backend:latest
    container_name: ragit-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ragit
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440
    ports:
      - "8001:8001"
    networks:
      - ragit-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Gateway Service
  gateway:
    image: minchulshin/ragit-gateway:latest
    container_name: ragit-gateway
    environment:
      BACKEND_URL: http://backend:8001
      CORS_ORIGINS: '["http://localhost:8000", "http://localhost:3000"]'
    ports:
      - "8080:8080"
    networks:
      - ragit-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    image: minchulshin/ragit-frontend:latest
    container_name: ragit-frontend
    environment:
      GATEWAY_URL: http://gateway:8080
      BACKEND_URL: http://backend:8001
    ports:
      - "8000:8000"
    networks:
      - ragit-network
    depends_on:
      gateway:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RAG Worker Service
  rag-worker:
    image: minchulshin/ragit-rag-worker:latest
    container_name: ragit-rag-worker
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ragit
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    networks:
      - ragit-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./repository:/app/repository
      - ./parsed_repository:/app/parsed_repository