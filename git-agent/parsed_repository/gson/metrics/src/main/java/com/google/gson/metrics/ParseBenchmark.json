[
  {
    "type": "package",
    "name": "com.google.gson.metrics",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.metrics;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.annotation.JsonProperty",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.fasterxml.jackson.annotation.JsonProperty;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.core.JsonFactory",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.fasterxml.jackson.core.JsonFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.core.JsonFactoryBuilder",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.fasterxml.jackson.core.JsonFactoryBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.core.JsonToken",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.fasterxml.jackson.core.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.core.type.TypeReference",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.fasterxml.jackson.core.type.TypeReference;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.fasterxml.jackson.databind.DeserializationFeature;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.databind.MapperFeature",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.fasterxml.jackson.databind.MapperFeature;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.databind.ObjectMapper",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.fasterxml.jackson.databind.ObjectMapper;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.fasterxml.jackson.databind.json.JsonMapper",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.fasterxml.jackson.databind.json.JsonMapper;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.caliper.BeforeExperiment",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.caliper.BeforeExperiment;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.caliper.Param",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.caliper.Param;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParser",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.JsonParser;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.SerializedName",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.annotations.SerializedName;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 35,
    "end_line": 35,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 36,
    "end_line": 36,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.CharArrayReader",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.io.CharArrayReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.File",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.io.File;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.InputStreamReader",
    "start_line": 40,
    "end_line": 40,
    "code": "import java.io.InputStreamReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 41,
    "end_line": 41,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.StringWriter",
    "start_line": 42,
    "end_line": 42,
    "code": "import java.io.StringWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.net.URL",
    "start_line": 43,
    "end_line": 43,
    "code": "import java.net.URL;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.nio.charset.StandardCharsets",
    "start_line": 44,
    "end_line": 44,
    "code": "import java.nio.charset.StandardCharsets;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.text.SimpleDateFormat",
    "start_line": 45,
    "end_line": 45,
    "code": "import java.text.SimpleDateFormat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.Date",
    "start_line": 46,
    "end_line": 46,
    "code": "import java.util.Date;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 47,
    "end_line": 47,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 48,
    "end_line": 48,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.zip.ZipEntry",
    "start_line": 49,
    "end_line": 49,
    "code": "import java.util.zip.ZipEntry;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.zip.ZipFile",
    "start_line": 50,
    "end_line": 50,
    "code": "import java.util.zip.ZipFile;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "class",
    "name": "ParseBenchmark",
    "start_line": 58,
    "end_line": 467,
    "code": "/**\r\n * Measure Gson and Jackson parsing and binding performance.\r\n *\r\n * <p>This benchmark requires that ParseBenchmarkData.zip is on the classpath. That file contains\r\n * Twitter feed data, which is representative of what applications will be parsing.\r\n */\r\npublic final class ParseBenchmark {\r\n\r\n    @Param\r\n    Document document;\r\n\r\n    @Param\r\n    Api api;\r\n\r\n    private enum Document {\r\n\r\n        TWEETS(new TypeToken<List<Tweet>>() {\r\n        }, new TypeReference<List<Tweet>>() {\r\n        }), READER_SHORT(new TypeToken<Feed>() {\r\n        }, new TypeReference<Feed>() {\r\n        }), READER_LONG(new TypeToken<Feed>() {\r\n        }, new TypeReference<Feed>() {\r\n        });\r\n\r\n        @SuppressWarnings(\"ImmutableEnumChecker\")\r\n        private final TypeToken<?> gsonType;\r\n\r\n        @SuppressWarnings(\"ImmutableEnumChecker\")\r\n        private final TypeReference<?> jacksonType;\r\n\r\n        private Document(TypeToken<?> typeToken, TypeReference<?> typeReference) {\r\n            this.gsonType = typeToken;\r\n            this.jacksonType = typeReference;\r\n        }\r\n    }\r\n\r\n    private enum Api {\r\n\r\n        JACKSON_STREAM {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new JacksonStreamParser();\r\n            }\r\n        }\r\n        ,\r\n        JACKSON_BIND {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new JacksonBindParser();\r\n            }\r\n        }\r\n        ,\r\n        GSON_STREAM {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new GsonStreamParser();\r\n            }\r\n        }\r\n        ,\r\n        GSON_SKIP {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new GsonSkipParser();\r\n            }\r\n        }\r\n        ,\r\n        GSON_DOM {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new GsonDomParser();\r\n            }\r\n        }\r\n        ,\r\n        GSON_BIND {\r\n\r\n            @Override\r\n            Parser newParser() {\r\n                return new GsonBindParser();\r\n            }\r\n        }\r\n        ;\r\n\r\n        abstract Parser newParser();\r\n    }\r\n\r\n    private char[] text;\r\n\r\n    private Parser parser;\r\n\r\n    @BeforeExperiment\r\n    void setUp() throws Exception {\r\n        text = resourceToString(document.name() + \".json\").toCharArray();\r\n        parser = api.newParser();\r\n    }\r\n\r\n    public void timeParse(int reps) throws Exception {\r\n        for (int i = 0; i < reps; i++) {\r\n            parser.parse(text, document);\r\n        }\r\n    }\r\n\r\n    private static File getResourceFile(String path) throws Exception {\r\n        URL url = ParseBenchmark.class.getResource(path);\r\n        if (url == null) {\r\n            throw new IllegalArgumentException(\"Resource \" + path + \" does not exist\");\r\n        }\r\n        File file = new File(url.toURI());\r\n        if (!file.isFile()) {\r\n            throw new IllegalArgumentException(\"Resource \" + path + \" is not a file\");\r\n        }\r\n        return file;\r\n    }\r\n\r\n    private static String resourceToString(String fileName) throws Exception {\r\n        try (ZipFile zipFile = new ZipFile(getResourceFile(\"/ParseBenchmarkData.zip\"))) {\r\n            ZipEntry zipEntry = zipFile.getEntry(fileName);\r\n            Reader reader = new InputStreamReader(zipFile.getInputStream(zipEntry), StandardCharsets.UTF_8);\r\n            char[] buffer = new char[8192];\r\n            StringWriter writer = new StringWriter();\r\n            int count;\r\n            while ((count = reader.read(buffer)) != -1) {\r\n                writer.write(buffer, 0, count);\r\n            }\r\n            reader.close();\r\n            return writer.toString();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        NonUploadingCaliperRunner.run(ParseBenchmark.class, args);\r\n    }\r\n\r\n    interface Parser {\r\n\r\n        void parse(char[] data, Document document) throws Exception;\r\n    }\r\n\r\n    private static class GsonStreamParser implements Parser {\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            JsonReader jsonReader = new JsonReader(new CharArrayReader(data));\r\n            readToken(jsonReader);\r\n            jsonReader.close();\r\n        }\r\n\r\n        private static void readToken(JsonReader reader) throws IOException {\r\n            while (true) {\r\n                switch(reader.peek()) {\r\n                    case BEGIN_ARRAY:\r\n                        reader.beginArray();\r\n                        break;\r\n                    case END_ARRAY:\r\n                        reader.endArray();\r\n                        break;\r\n                    case BEGIN_OBJECT:\r\n                        reader.beginObject();\r\n                        break;\r\n                    case END_OBJECT:\r\n                        reader.endObject();\r\n                        break;\r\n                    case NAME:\r\n                        String unusedName = reader.nextName();\r\n                        break;\r\n                    case BOOLEAN:\r\n                        boolean unusedBoolean = reader.nextBoolean();\r\n                        break;\r\n                    case NULL:\r\n                        reader.nextNull();\r\n                        break;\r\n                    case NUMBER:\r\n                        long unusedLong = reader.nextLong();\r\n                        break;\r\n                    case STRING:\r\n                        String unusedString = reader.nextString();\r\n                        break;\r\n                    case END_DOCUMENT:\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static class GsonSkipParser implements Parser {\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            JsonReader jsonReader = new JsonReader(new CharArrayReader(data));\r\n            jsonReader.skipValue();\r\n            jsonReader.close();\r\n        }\r\n    }\r\n\r\n    private static class JacksonStreamParser implements Parser {\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            JsonFactory jsonFactory = new JsonFactoryBuilder().configure(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, false).build();\r\n            com.fasterxml.jackson.core.JsonParser jp = jsonFactory.createParser(new CharArrayReader(data));\r\n            int depth = 0;\r\n            do {\r\n                JsonToken token = jp.nextToken();\r\n                switch(token) {\r\n                    case START_OBJECT:\r\n                    case START_ARRAY:\r\n                        depth++;\r\n                        break;\r\n                    case END_OBJECT:\r\n                    case END_ARRAY:\r\n                        depth--;\r\n                        break;\r\n                    case FIELD_NAME:\r\n                        jp.currentName();\r\n                        break;\r\n                    case VALUE_STRING:\r\n                        jp.getText();\r\n                        break;\r\n                    case VALUE_NUMBER_INT:\r\n                    case VALUE_NUMBER_FLOAT:\r\n                        jp.getLongValue();\r\n                        break;\r\n                    case VALUE_TRUE:\r\n                    case VALUE_FALSE:\r\n                        jp.getBooleanValue();\r\n                        break;\r\n                    case VALUE_NULL:\r\n                        // Do nothing; nextToken() will advance in stream\r\n                        break;\r\n                    default:\r\n                        throw new IllegalArgumentException(\"Unexpected token \" + token);\r\n                }\r\n            } while (depth > 0);\r\n            jp.close();\r\n        }\r\n    }\r\n\r\n    private static class GsonDomParser implements Parser {\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            JsonElement unused = JsonParser.parseReader(new CharArrayReader(data));\r\n        }\r\n    }\r\n\r\n    private static class GsonBindParser implements Parser {\r\n\r\n        private static final Gson gson = new GsonBuilder().setDateFormat(\"EEE MMM dd HH:mm:ss Z yyyy\").create();\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            Object unused = gson.fromJson(new CharArrayReader(data), document.gsonType);\r\n        }\r\n    }\r\n\r\n    private static class JacksonBindParser implements Parser {\r\n\r\n        private static final ObjectMapper mapper;\r\n\r\n        static {\r\n            mapper = JsonMapper.builder().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false).configure(MapperFeature.AUTO_DETECT_FIELDS, true).build();\r\n            mapper.setDateFormat(new SimpleDateFormat(\"EEE MMM dd HH:mm:ss Z yyyy\", Locale.ENGLISH));\r\n        }\r\n\r\n        @Override\r\n        public void parse(char[] data, Document document) throws Exception {\r\n            mapper.readValue(new CharArrayReader(data), document.jacksonType);\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"MemberName\")\r\n    static class Tweet {\r\n\r\n        @JsonProperty\r\n        String coordinates;\r\n\r\n        @JsonProperty\r\n        boolean favorited;\r\n\r\n        @JsonProperty\r\n        Date created_at;\r\n\r\n        @JsonProperty\r\n        boolean truncated;\r\n\r\n        @JsonProperty\r\n        Tweet retweeted_status;\r\n\r\n        @JsonProperty\r\n        String id_str;\r\n\r\n        @JsonProperty\r\n        String in_reply_to_id_str;\r\n\r\n        @JsonProperty\r\n        String contributors;\r\n\r\n        @JsonProperty\r\n        String text;\r\n\r\n        @JsonProperty\r\n        long id;\r\n\r\n        @JsonProperty\r\n        String retweet_count;\r\n\r\n        @JsonProperty\r\n        String in_reply_to_status_id_str;\r\n\r\n        @JsonProperty\r\n        Object geo;\r\n\r\n        @JsonProperty\r\n        boolean retweeted;\r\n\r\n        @JsonProperty\r\n        String in_reply_to_user_id;\r\n\r\n        @JsonProperty\r\n        String in_reply_to_screen_name;\r\n\r\n        @JsonProperty\r\n        Object place;\r\n\r\n        @JsonProperty\r\n        User user;\r\n\r\n        @JsonProperty\r\n        String source;\r\n\r\n        @JsonProperty\r\n        String in_reply_to_user_id_str;\r\n    }\r\n\r\n    @SuppressWarnings(\"MemberName\")\r\n    static class User {\r\n\r\n        @JsonProperty\r\n        String name;\r\n\r\n        @JsonProperty\r\n        String profile_sidebar_border_color;\r\n\r\n        @JsonProperty\r\n        boolean profile_background_tile;\r\n\r\n        @JsonProperty\r\n        String profile_sidebar_fill_color;\r\n\r\n        @JsonProperty\r\n        Date created_at;\r\n\r\n        @JsonProperty\r\n        String location;\r\n\r\n        @JsonProperty\r\n        String profile_image_url;\r\n\r\n        @JsonProperty\r\n        boolean follow_request_sent;\r\n\r\n        @JsonProperty\r\n        String profile_link_color;\r\n\r\n        @JsonProperty\r\n        boolean is_translator;\r\n\r\n        @JsonProperty\r\n        String id_str;\r\n\r\n        @JsonProperty\r\n        int favourites_count;\r\n\r\n        @JsonProperty\r\n        boolean contributors_enabled;\r\n\r\n        @JsonProperty\r\n        String url;\r\n\r\n        @JsonProperty\r\n        boolean default_profile;\r\n\r\n        @JsonProperty\r\n        long utc_offset;\r\n\r\n        @JsonProperty\r\n        long id;\r\n\r\n        @JsonProperty\r\n        boolean profile_use_background_image;\r\n\r\n        @JsonProperty\r\n        int listed_count;\r\n\r\n        @JsonProperty\r\n        String lang;\r\n\r\n        @JsonProperty(\"protected\")\r\n        @SerializedName(\"protected\")\r\n        boolean isProtected;\r\n\r\n        @JsonProperty\r\n        int followers_count;\r\n\r\n        @JsonProperty\r\n        String profile_text_color;\r\n\r\n        @JsonProperty\r\n        String profile_background_color;\r\n\r\n        @JsonProperty\r\n        String time_zone;\r\n\r\n        @JsonProperty\r\n        String description;\r\n\r\n        @JsonProperty\r\n        boolean notifications;\r\n\r\n        @JsonProperty\r\n        boolean geo_enabled;\r\n\r\n        @JsonProperty\r\n        boolean verified;\r\n\r\n        @JsonProperty\r\n        String profile_background_image_url;\r\n\r\n        @JsonProperty\r\n        boolean default_profile_image;\r\n\r\n        @JsonProperty\r\n        int friends_count;\r\n\r\n        @JsonProperty\r\n        int statuses_count;\r\n\r\n        @JsonProperty\r\n        String screen_name;\r\n\r\n        @JsonProperty\r\n        boolean following;\r\n\r\n        @JsonProperty\r\n        boolean show_all_inline_media;\r\n    }\r\n\r\n    static class Feed {\r\n\r\n        @JsonProperty\r\n        String id;\r\n\r\n        @JsonProperty\r\n        String title;\r\n\r\n        @JsonProperty\r\n        String description;\r\n\r\n        @JsonProperty(\"alternate\")\r\n        @SerializedName(\"alternate\")\r\n        List<Link> alternates;\r\n\r\n        @JsonProperty\r\n        long updated;\r\n\r\n        @JsonProperty\r\n        List<Item> items;\r\n\r\n        @Override\r\n        public String toString() {\r\n            StringBuilder result = new StringBuilder().append(id).append('\\n').append(title).append('\\n').append(description).append('\\n').append(alternates).append('\\n').append(updated);\r\n            int i = 1;\r\n            for (Item item : items) {\r\n                result.append(i++).append(\": \").append(item).append(\"\\n\\n\");\r\n            }\r\n            return result.toString();\r\n        }\r\n    }\r\n\r\n    static class Link {\r\n\r\n        @JsonProperty\r\n        String href;\r\n\r\n        @Override\r\n        public String toString() {\r\n            return href;\r\n        }\r\n    }\r\n\r\n    static class Item {\r\n\r\n        @JsonProperty\r\n        List<String> categories;\r\n\r\n        @JsonProperty\r\n        String title;\r\n\r\n        @JsonProperty\r\n        long published;\r\n\r\n        @JsonProperty\r\n        long updated;\r\n\r\n        @JsonProperty(\"alternate\")\r\n        @SerializedName(\"alternate\")\r\n        List<Link> alternates;\r\n\r\n        @JsonProperty\r\n        Content content;\r\n\r\n        @JsonProperty\r\n        String author;\r\n\r\n        @JsonProperty\r\n        List<ReaderUser> likingUsers;\r\n\r\n        @Override\r\n        public String toString() {\r\n            return title + \"\\nauthor: \" + author + \"\\npublished: \" + published + \"\\nupdated: \" + updated + \"\\n\" + content + \"\\nliking users: \" + likingUsers + \"\\nalternates: \" + alternates + \"\\ncategories: \" + categories;\r\n        }\r\n    }\r\n\r\n    static class Content {\r\n\r\n        @JsonProperty\r\n        String content;\r\n\r\n        @Override\r\n        public String toString() {\r\n            return content;\r\n        }\r\n    }\r\n\r\n    static class ReaderUser {\r\n\r\n        @JsonProperty\r\n        String userId;\r\n\r\n        @Override\r\n        public String toString() {\r\n            return userId;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "field",
    "name": "document",
    "start_line": 59,
    "end_line": 59,
    "code": "@Param\r\nDocument document;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "field",
    "name": "api",
    "start_line": 60,
    "end_line": 60,
    "code": "@Param\r\nApi api;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "field",
    "name": "text",
    "start_line": 120,
    "end_line": 120,
    "code": "private char[] text;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "field",
    "name": "parser",
    "start_line": 121,
    "end_line": 121,
    "code": "private Parser parser;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 123,
    "end_line": 127,
    "code": "@BeforeExperiment\r\nvoid setUp() throws Exception {\r\n    text = resourceToString(document.name() + \".json\").toCharArray();\r\n    parser = api.newParser();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeParse",
    "start_line": 129,
    "end_line": 133,
    "code": "public void timeParse(int reps) throws Exception {\r\n    for (int i = 0; i < reps; i++) {\r\n        parser.parse(text, document);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "method",
    "name": "getResourceFile",
    "start_line": 135,
    "end_line": 145,
    "code": "private static File getResourceFile(String path) throws Exception {\r\n    URL url = ParseBenchmark.class.getResource(path);\r\n    if (url == null) {\r\n        throw new IllegalArgumentException(\"Resource \" + path + \" does not exist\");\r\n    }\r\n    File file = new File(url.toURI());\r\n    if (!file.isFile()) {\r\n        throw new IllegalArgumentException(\"Resource \" + path + \" is not a file\");\r\n    }\r\n    return file;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "method",
    "name": "resourceToString",
    "start_line": 147,
    "end_line": 161,
    "code": "private static String resourceToString(String fileName) throws Exception {\r\n    try (ZipFile zipFile = new ZipFile(getResourceFile(\"/ParseBenchmarkData.zip\"))) {\r\n        ZipEntry zipEntry = zipFile.getEntry(fileName);\r\n        Reader reader = new InputStreamReader(zipFile.getInputStream(zipEntry), StandardCharsets.UTF_8);\r\n        char[] buffer = new char[8192];\r\n        StringWriter writer = new StringWriter();\r\n        int count;\r\n        while ((count = reader.read(buffer)) != -1) {\r\n            writer.write(buffer, 0, count);\r\n        }\r\n        reader.close();\r\n        return writer.toString();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  },
  {
    "type": "method",
    "name": "main",
    "start_line": 163,
    "end_line": 165,
    "code": "public static void main(String[] args) throws Exception {\r\n    NonUploadingCaliperRunner.run(ParseBenchmark.class, args);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\ParseBenchmark.java"
  }
]