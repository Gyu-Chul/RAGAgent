[
  {
    "type": "package",
    "name": "com.google.gson.metrics",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.metrics;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.caliper.BeforeExperiment",
    "start_line": 18,
    "end_line": 18,
    "code": "import com.google.caliper.BeforeExperiment;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "class",
    "name": "BagOfPrimitivesDeserializationBenchmark",
    "start_line": 32,
    "end_line": 122,
    "code": "/**\r\n * Caliper based micro benchmarks for Gson\r\n *\r\n * @author Inderjeet Singh\r\n * @author Jesse Wilson\r\n * @author Joel Leitch\r\n */\r\npublic class BagOfPrimitivesDeserializationBenchmark {\r\n\r\n    private Gson gson;\r\n\r\n    private String json;\r\n\r\n    public static void main(String[] args) {\r\n        NonUploadingCaliperRunner.run(BagOfPrimitivesDeserializationBenchmark.class, args);\r\n    }\r\n\r\n    @BeforeExperiment\r\n    void setUp() throws Exception {\r\n        this.gson = new Gson();\r\n        BagOfPrimitives bag = new BagOfPrimitives(10L, 1, false, \"foo\");\r\n        this.json = gson.toJson(bag);\r\n    }\r\n\r\n    /**\r\n     * Benchmark to measure Gson performance for deserializing an object\r\n     */\r\n    public void timeBagOfPrimitivesDefault(int reps) {\r\n        for (int i = 0; i < reps; ++i) {\r\n            BagOfPrimitives unused = gson.fromJson(json, BagOfPrimitives.class);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Benchmark to measure deserializing objects by hand\r\n     */\r\n    public void timeBagOfPrimitivesStreaming(int reps) throws IOException {\r\n        for (int i = 0; i < reps; ++i) {\r\n            StringReader reader = new StringReader(json);\r\n            JsonReader jr = new JsonReader(reader);\r\n            jr.beginObject();\r\n            long longValue = 0;\r\n            int intValue = 0;\r\n            boolean booleanValue = false;\r\n            String stringValue = null;\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                switch(name) {\r\n                    case \"longValue\":\r\n                        longValue = jr.nextLong();\r\n                        break;\r\n                    case \"intValue\":\r\n                        intValue = jr.nextInt();\r\n                        break;\r\n                    case \"booleanValue\":\r\n                        booleanValue = jr.nextBoolean();\r\n                        break;\r\n                    case \"stringValue\":\r\n                        stringValue = jr.nextString();\r\n                        break;\r\n                    default:\r\n                        throw new IOException(\"Unexpected name: \" + name);\r\n                }\r\n            }\r\n            jr.endObject();\r\n            new BagOfPrimitives(longValue, intValue, booleanValue, stringValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\n     * setting object values by reflection. We should strive to reduce the discrepancy between this\r\n     * and {@link #timeBagOfPrimitivesDefault(int)} .\r\n     */\r\n    public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n        for (int i = 0; i < reps; ++i) {\r\n            StringReader reader = new StringReader(json);\r\n            JsonReader jr = new JsonReader(reader);\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 34,
    "end_line": 34,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "json",
    "start_line": 35,
    "end_line": 35,
    "code": "private String json;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "main",
    "start_line": 37,
    "end_line": 39,
    "code": "public static void main(String[] args) {\r\n    NonUploadingCaliperRunner.run(BagOfPrimitivesDeserializationBenchmark.class, args);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 41,
    "end_line": 46,
    "code": "@BeforeExperiment\r\nvoid setUp() throws Exception {\r\n    this.gson = new Gson();\r\n    BagOfPrimitives bag = new BagOfPrimitives(10L, 1, false, \"foo\");\r\n    this.json = gson.toJson(bag);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeBagOfPrimitivesDefault",
    "start_line": 49,
    "end_line": 53,
    "code": "/**\r\n * Benchmark to measure Gson performance for deserializing an object\r\n */\r\npublic void timeBagOfPrimitivesDefault(int reps) {\r\n    for (int i = 0; i < reps; ++i) {\r\n        BagOfPrimitives unused = gson.fromJson(json, BagOfPrimitives.class);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeBagOfPrimitivesStreaming",
    "start_line": 56,
    "end_line": 87,
    "code": "/**\r\n * Benchmark to measure deserializing objects by hand\r\n */\r\npublic void timeBagOfPrimitivesStreaming(int reps) throws IOException {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        long longValue = 0;\r\n        int intValue = 0;\r\n        boolean booleanValue = false;\r\n        String stringValue = null;\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            switch(name) {\r\n                case \"longValue\":\r\n                    longValue = jr.nextLong();\r\n                    break;\r\n                case \"intValue\":\r\n                    intValue = jr.nextInt();\r\n                    break;\r\n                case \"booleanValue\":\r\n                    booleanValue = jr.nextBoolean();\r\n                    break;\r\n                case \"stringValue\":\r\n                    stringValue = jr.nextString();\r\n                    break;\r\n                default:\r\n                    throw new IOException(\"Unexpected name: \" + name);\r\n            }\r\n        }\r\n        jr.endObject();\r\n        new BagOfPrimitives(longValue, intValue, booleanValue, stringValue);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeBagOfPrimitivesReflectionStreaming",
    "start_line": 94,
    "end_line": 121,
    "code": "/**\r\n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\n * setting object values by reflection. We should strive to reduce the discrepancy between this\r\n * and {@link #timeBagOfPrimitivesDefault(int)} .\r\n */\r\npublic void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\BagOfPrimitivesDeserializationBenchmark.java"
  }
]