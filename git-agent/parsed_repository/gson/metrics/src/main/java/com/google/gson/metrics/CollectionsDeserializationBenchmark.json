[
  {
    "type": "package",
    "name": "com.google.gson.metrics",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.metrics;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.caliper.BeforeExperiment",
    "start_line": 18,
    "end_line": 18,
    "code": "import com.google.caliper.BeforeExperiment;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "class",
    "name": "CollectionsDeserializationBenchmark",
    "start_line": 34,
    "end_line": 143,
    "code": "/**\r\n * Caliper based micro benchmarks for Gson\r\n *\r\n * @author Inderjeet Singh\r\n */\r\npublic class CollectionsDeserializationBenchmark {\r\n\r\n    private static final TypeToken<List<BagOfPrimitives>> LIST_TYPE_TOKEN = new TypeToken<List<BagOfPrimitives>>() {\r\n    };\r\n\r\n    private static final Type LIST_TYPE = LIST_TYPE_TOKEN.getType();\r\n\r\n    private Gson gson;\r\n\r\n    private String json;\r\n\r\n    public static void main(String[] args) {\r\n        NonUploadingCaliperRunner.run(CollectionsDeserializationBenchmark.class, args);\r\n    }\r\n\r\n    @BeforeExperiment\r\n    void setUp() throws Exception {\r\n        this.gson = new Gson();\r\n        List<BagOfPrimitives> bags = new ArrayList<>();\r\n        for (int i = 0; i < 100; ++i) {\r\n            bags.add(new BagOfPrimitives(10L, 1, false, \"foo\"));\r\n        }\r\n        this.json = gson.toJson(bags, LIST_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Benchmark to measure Gson performance for deserializing an object\r\n     */\r\n    public void timeCollectionsDefault(int reps) {\r\n        for (int i = 0; i < reps; ++i) {\r\n            List<BagOfPrimitives> unused = gson.fromJson(json, LIST_TYPE_TOKEN);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Benchmark to measure deserializing objects by hand\r\n     */\r\n    @SuppressWarnings(\"ModifiedButNotUsed\")\r\n    public void timeCollectionsStreaming(int reps) throws IOException {\r\n        for (int i = 0; i < reps; ++i) {\r\n            StringReader reader = new StringReader(json);\r\n            JsonReader jr = new JsonReader(reader);\r\n            jr.beginArray();\r\n            List<BagOfPrimitives> bags = new ArrayList<>();\r\n            while (jr.hasNext()) {\r\n                jr.beginObject();\r\n                long longValue = 0;\r\n                int intValue = 0;\r\n                boolean booleanValue = false;\r\n                String stringValue = null;\r\n                while (jr.hasNext()) {\r\n                    String name = jr.nextName();\r\n                    switch(name) {\r\n                        case \"longValue\":\r\n                            longValue = jr.nextLong();\r\n                            break;\r\n                        case \"intValue\":\r\n                            intValue = jr.nextInt();\r\n                            break;\r\n                        case \"booleanValue\":\r\n                            booleanValue = jr.nextBoolean();\r\n                            break;\r\n                        case \"stringValue\":\r\n                            stringValue = jr.nextString();\r\n                            break;\r\n                        default:\r\n                            throw new IOException(\"Unexpected name: \" + name);\r\n                    }\r\n                }\r\n                jr.endObject();\r\n                bags.add(new BagOfPrimitives(longValue, intValue, booleanValue, stringValue));\r\n            }\r\n            jr.endArray();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\n     * setting object values by reflection. We should strive to reduce the discrepancy between this\r\n     * and {@link #timeCollectionsDefault(int)} .\r\n     */\r\n    @SuppressWarnings(\"ModifiedButNotUsed\")\r\n    public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n        for (int i = 0; i < reps; ++i) {\r\n            StringReader reader = new StringReader(json);\r\n            JsonReader jr = new JsonReader(reader);\r\n            jr.beginArray();\r\n            List<BagOfPrimitives> bags = new ArrayList<>();\r\n            while (jr.hasNext()) {\r\n                jr.beginObject();\r\n                BagOfPrimitives bag = new BagOfPrimitives();\r\n                while (jr.hasNext()) {\r\n                    String name = jr.nextName();\r\n                    for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                        if (field.getName().equals(name)) {\r\n                            Class<?> fieldType = field.getType();\r\n                            if (fieldType.equals(long.class)) {\r\n                                field.setLong(bag, jr.nextLong());\r\n                            } else if (fieldType.equals(int.class)) {\r\n                                field.setInt(bag, jr.nextInt());\r\n                            } else if (fieldType.equals(boolean.class)) {\r\n                                field.setBoolean(bag, jr.nextBoolean());\r\n                            } else if (fieldType.equals(String.class)) {\r\n                                field.set(bag, jr.nextString());\r\n                            } else {\r\n                                throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                jr.endObject();\r\n                bags.add(bag);\r\n            }\r\n            jr.endArray();\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "LIST_TYPE_TOKEN",
    "start_line": 36,
    "end_line": 37,
    "code": "private static final TypeToken<List<BagOfPrimitives>> LIST_TYPE_TOKEN = new TypeToken<List<BagOfPrimitives>>() {\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "LIST_TYPE",
    "start_line": 38,
    "end_line": 38,
    "code": "private static final Type LIST_TYPE = LIST_TYPE_TOKEN.getType();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 39,
    "end_line": 39,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "field",
    "name": "json",
    "start_line": 40,
    "end_line": 40,
    "code": "private String json;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "main",
    "start_line": 42,
    "end_line": 44,
    "code": "public static void main(String[] args) {\r\n    NonUploadingCaliperRunner.run(CollectionsDeserializationBenchmark.class, args);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 46,
    "end_line": 54,
    "code": "@BeforeExperiment\r\nvoid setUp() throws Exception {\r\n    this.gson = new Gson();\r\n    List<BagOfPrimitives> bags = new ArrayList<>();\r\n    for (int i = 0; i < 100; ++i) {\r\n        bags.add(new BagOfPrimitives(10L, 1, false, \"foo\"));\r\n    }\r\n    this.json = gson.toJson(bags, LIST_TYPE);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeCollectionsDefault",
    "start_line": 57,
    "end_line": 61,
    "code": "/**\r\n * Benchmark to measure Gson performance for deserializing an object\r\n */\r\npublic void timeCollectionsDefault(int reps) {\r\n    for (int i = 0; i < reps; ++i) {\r\n        List<BagOfPrimitives> unused = gson.fromJson(json, LIST_TYPE_TOKEN);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeCollectionsStreaming",
    "start_line": 64,
    "end_line": 101,
    "code": "/**\r\n * Benchmark to measure deserializing objects by hand\r\n */\r\n@SuppressWarnings(\"ModifiedButNotUsed\")\r\npublic void timeCollectionsStreaming(int reps) throws IOException {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            long longValue = 0;\r\n            int intValue = 0;\r\n            boolean booleanValue = false;\r\n            String stringValue = null;\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                switch(name) {\r\n                    case \"longValue\":\r\n                        longValue = jr.nextLong();\r\n                        break;\r\n                    case \"intValue\":\r\n                        intValue = jr.nextInt();\r\n                        break;\r\n                    case \"booleanValue\":\r\n                        booleanValue = jr.nextBoolean();\r\n                        break;\r\n                    case \"stringValue\":\r\n                        stringValue = jr.nextString();\r\n                        break;\r\n                    default:\r\n                        throw new IOException(\"Unexpected name: \" + name);\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(new BagOfPrimitives(longValue, intValue, booleanValue, stringValue));\r\n        }\r\n        jr.endArray();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  },
  {
    "type": "method",
    "name": "timeCollectionsReflectionStreaming",
    "start_line": 108,
    "end_line": 142,
    "code": "/**\r\n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\n * setting object values by reflection. We should strive to reduce the discrepancy between this\r\n * and {@link #timeCollectionsDefault(int)} .\r\n */\r\n@SuppressWarnings(\"ModifiedButNotUsed\")\r\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\metrics\\src\\main\\java\\com\\google\\gson\\metrics\\CollectionsDeserializationBenchmark.java"
  }
]