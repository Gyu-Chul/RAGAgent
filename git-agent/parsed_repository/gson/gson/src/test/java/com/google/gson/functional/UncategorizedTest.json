[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 19,
    "end_line": 19,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassOverridingEquals",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.common.TestTypes.ClassOverridingEquals;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 32,
    "end_line": 32,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "class",
    "name": "UncategorizedTest",
    "start_line": 41,
    "end_line": 149,
    "code": "/**\r\n * Functional tests that do not fall neatly into any of the existing classification.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class UncategorizedTest {\r\n\r\n    private Gson gson = null;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testInvalidJsonDeserializationFails() throws Exception {\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(\"adfasdf1112,,,\\\":\", BagOfPrimitives.class));\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(\"{adfasdf1112,,,\\\":}\", BagOfPrimitives.class));\r\n    }\r\n\r\n    @Test\r\n    public void testObjectEqualButNotSameSerialization() {\r\n        ClassOverridingEquals objA = new ClassOverridingEquals();\r\n        ClassOverridingEquals objB = new ClassOverridingEquals();\r\n        objB.ref = objA;\r\n        String json = gson.toJson(objB);\r\n        assertThat(json).isEqualTo(objB.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testStaticFieldsAreNotSerialized() {\r\n        BagOfPrimitives target = new BagOfPrimitives();\r\n        assertThat(gson.toJson(target)).doesNotContain(\"DEFAULT_VALUE\");\r\n    }\r\n\r\n    @Test\r\n    public void testGsonInstanceReusableForSerializationAndDeserialization() {\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        String json = gson.toJson(bag);\r\n        BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);\r\n        assertThat(deserialized).isEqualTo(bag);\r\n    }\r\n\r\n    /**\r\n     * This test ensures that a custom deserializer is able to return a derived class instance for a\r\n     * base class object. For a motivation for this test, see Issue 37 and\r\n     * http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761\r\n     */\r\n    @Test\r\n    public void testReturningDerivedClassesDuringDeserialization() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseTypeAdapter()).create();\r\n        String json = \"{\\\"opType\\\":\\\"OP1\\\"}\";\r\n        Base base = gson.fromJson(json, Base.class);\r\n        assertThat(base).isInstanceOf(Derived1.class);\r\n        assertThat(base.opType).isEqualTo(OperationType.OP1);\r\n        json = \"{\\\"opType\\\":\\\"OP2\\\"}\";\r\n        base = gson.fromJson(json, Base.class);\r\n        assertThat(base).isInstanceOf(Derived2.class);\r\n        assertThat(base.opType).isEqualTo(OperationType.OP2);\r\n    }\r\n\r\n    /**\r\n     * Test that trailing whitespace is ignored.\r\n     * http://code.google.com/p/google-gson/issues/detail?id=302\r\n     */\r\n    @Test\r\n    public void testTrailingWhitespace() throws Exception {\r\n        List<Integer> integers = gson.fromJson(\"[1,2,3]  \\n\\n  \", new TypeToken<List<Integer>>() {\r\n        }.getType());\r\n        assertThat(integers).containsExactly(1, 2, 3).inOrder();\r\n    }\r\n\r\n    private enum OperationType {\r\n\r\n        OP1, OP2\r\n    }\r\n\r\n    private static class Base {\r\n\r\n        OperationType opType;\r\n    }\r\n\r\n    private static class Derived1 extends Base {\r\n\r\n        Derived1() {\r\n            opType = OperationType.OP1;\r\n        }\r\n    }\r\n\r\n    private static class Derived2 extends Base {\r\n\r\n        Derived2() {\r\n            opType = OperationType.OP2;\r\n        }\r\n    }\r\n\r\n    private static class BaseTypeAdapter implements JsonDeserializer<Base> {\r\n\r\n        @Override\r\n        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            String opTypeStr = json.getAsJsonObject().get(\"opType\").getAsString();\r\n            OperationType opType = OperationType.valueOf(opTypeStr);\r\n            switch(opType) {\r\n                case OP1:\r\n                    return new Derived1();\r\n                case OP2:\r\n                    return new Derived2();\r\n            }\r\n            throw new JsonParseException(\"unknown type: \" + json);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 43,
    "end_line": 43,
    "code": "private Gson gson = null;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 45,
    "end_line": 48,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testInvalidJsonDeserializationFails",
    "start_line": 50,
    "end_line": 58,
    "code": "@Test\r\npublic void testInvalidJsonDeserializationFails() throws Exception {\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(\"adfasdf1112,,,\\\":\", BagOfPrimitives.class));\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(\"{adfasdf1112,,,\\\":}\", BagOfPrimitives.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testObjectEqualButNotSameSerialization",
    "start_line": 60,
    "end_line": 67,
    "code": "@Test\r\npublic void testObjectEqualButNotSameSerialization() {\r\n    ClassOverridingEquals objA = new ClassOverridingEquals();\r\n    ClassOverridingEquals objB = new ClassOverridingEquals();\r\n    objB.ref = objA;\r\n    String json = gson.toJson(objB);\r\n    assertThat(json).isEqualTo(objB.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testStaticFieldsAreNotSerialized",
    "start_line": 69,
    "end_line": 73,
    "code": "@Test\r\npublic void testStaticFieldsAreNotSerialized() {\r\n    BagOfPrimitives target = new BagOfPrimitives();\r\n    assertThat(gson.toJson(target)).doesNotContain(\"DEFAULT_VALUE\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testGsonInstanceReusableForSerializationAndDeserialization",
    "start_line": 75,
    "end_line": 81,
    "code": "@Test\r\npublic void testGsonInstanceReusableForSerializationAndDeserialization() {\r\n    BagOfPrimitives bag = new BagOfPrimitives();\r\n    String json = gson.toJson(bag);\r\n    BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);\r\n    assertThat(deserialized).isEqualTo(bag);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testReturningDerivedClassesDuringDeserialization",
    "start_line": 88,
    "end_line": 100,
    "code": "/**\r\n * This test ensures that a custom deserializer is able to return a derived class instance for a\r\n * base class object. For a motivation for this test, see Issue 37 and\r\n * http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761\r\n */\r\n@Test\r\npublic void testReturningDerivedClassesDuringDeserialization() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseTypeAdapter()).create();\r\n    String json = \"{\\\"opType\\\":\\\"OP1\\\"}\";\r\n    Base base = gson.fromJson(json, Base.class);\r\n    assertThat(base).isInstanceOf(Derived1.class);\r\n    assertThat(base.opType).isEqualTo(OperationType.OP1);\r\n    json = \"{\\\"opType\\\":\\\"OP2\\\"}\";\r\n    base = gson.fromJson(json, Base.class);\r\n    assertThat(base).isInstanceOf(Derived2.class);\r\n    assertThat(base.opType).isEqualTo(OperationType.OP2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  },
  {
    "type": "method",
    "name": "testTrailingWhitespace",
    "start_line": 106,
    "end_line": 111,
    "code": "/**\r\n * Test that trailing whitespace is ignored.\r\n * http://code.google.com/p/google-gson/issues/detail?id=302\r\n */\r\n@Test\r\npublic void testTrailingWhitespace() throws Exception {\r\n    List<Integer> integers = gson.fromJson(\"[1,2,3]  \\n\\n  \", new TypeToken<List<Integer>>() {\r\n    }.getType());\r\n    assertThat(integers).containsExactly(1, 2, 3).inOrder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\UncategorizedTest.java"
  }
]