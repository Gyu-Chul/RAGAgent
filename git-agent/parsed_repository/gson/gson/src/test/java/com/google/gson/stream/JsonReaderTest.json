[
  {
    "type": "package",
    "name": "com.google.gson.stream",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.stream;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.BEGIN_ARRAY",
    "start_line": 20,
    "end_line": 20,
    "code": "import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.BEGIN_OBJECT",
    "start_line": 21,
    "end_line": 21,
    "code": "import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.BOOLEAN",
    "start_line": 22,
    "end_line": 22,
    "code": "import static com.google.gson.stream.JsonToken.BOOLEAN;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.END_ARRAY",
    "start_line": 23,
    "end_line": 23,
    "code": "import static com.google.gson.stream.JsonToken.END_ARRAY;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.END_OBJECT",
    "start_line": 24,
    "end_line": 24,
    "code": "import static com.google.gson.stream.JsonToken.END_OBJECT;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.NAME",
    "start_line": 25,
    "end_line": 25,
    "code": "import static com.google.gson.stream.JsonToken.NAME;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.NULL",
    "start_line": 26,
    "end_line": 26,
    "code": "import static com.google.gson.stream.JsonToken.NULL;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.NUMBER",
    "start_line": 27,
    "end_line": 27,
    "code": "import static com.google.gson.stream.JsonToken.NUMBER;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken.STRING",
    "start_line": 28,
    "end_line": 28,
    "code": "import static com.google.gson.stream.JsonToken.STRING;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 29,
    "end_line": 29,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Strictness",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.Strictness;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "java.io.EOFException",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.io.EOFException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Ignore",
    "start_line": 37,
    "end_line": 37,
    "code": "import org.junit.Ignore;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 38,
    "end_line": 38,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "class",
    "name": "JsonReaderTest",
    "start_line": 40,
    "end_line": 2191,
    "code": "@SuppressWarnings(\"resource\")\r\npublic final class JsonReaderTest {\r\n\r\n    @Test\r\n    public void testDefaultStrictness() {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        assertThat(reader.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n    }\r\n\r\n    // for JsonReader.setLenient\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testSetLenientTrue() {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.setLenient(true);\r\n        assertThat(reader.getStrictness()).isEqualTo(Strictness.LENIENT);\r\n    }\r\n\r\n    // for JsonReader.setLenient\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testSetLenientFalse() {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.setLenient(false);\r\n        assertThat(reader.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n    }\r\n\r\n    @Test\r\n    public void testSetStrictness() {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        assertThat(reader.getStrictness()).isEqualTo(Strictness.STRICT);\r\n    }\r\n\r\n    @Test\r\n    public void testSetStrictnessNull() {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        assertThrows(NullPointerException.class, () -> reader.setStrictness(null));\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedNewlineNotAllowedInStrictMode() {\r\n        String json = \"\\\"\\\\\\n\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextString);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Cannot escape a newline character in strict mode\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedNewlineAllowedInDefaultMode() throws IOException {\r\n        String json = \"\\\"\\\\\\n\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        assertThat(reader.nextString()).isEqualTo(\"\\n\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictModeFailsToParseUnescapedControlCharacter() {\r\n        String json = \"\\\"\\0\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextString);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n        json = \"\\\"\\t\\\"\";\r\n        reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        expected = assertThrows(IOException.class, reader::nextString);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n        json = \"\\\"\\u001F\\\"\";\r\n        reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        expected = assertThrows(IOException.class, reader::nextString);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictModeAllowsOtherControlCharacters() throws IOException {\r\n        // JSON specification only forbids control characters U+0000 - U+001F, other control characters\r\n        // should be allowed\r\n        String json = \"\\\"\\u007F\\u009F\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        assertThat(reader.nextString()).isEqualTo(\"\\u007F\\u009F\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonStrictModeParsesUnescapedControlCharacter() throws IOException {\r\n        String json = \"\\\"\\t\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        assertThat(reader.nextString()).isEqualTo(\"\\t\");\r\n    }\r\n\r\n    @Test\r\n    public void testCapitalizedTrueFailWhenStrict() {\r\n        JsonReader reader = new JsonReader(reader(\"TRUE\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextBoolean);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n        reader = new JsonReader(reader(\"True\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        expected = assertThrows(IOException.class, reader::nextBoolean);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    }\r\n\r\n    @Test\r\n    public void testCapitalizedFalseFailWhenStrict() {\r\n        JsonReader reader = new JsonReader(reader(\"FALSE\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextBoolean);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n        reader = new JsonReader(reader(\"FaLse\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        expected = assertThrows(IOException.class, reader::nextBoolean);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    }\r\n\r\n    @Test\r\n    public void testCapitalizedNullFailWhenStrict() {\r\n        JsonReader reader = new JsonReader(reader(\"NULL\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextNull);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n        reader = new JsonReader(reader(\"nulL\"));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        expected = assertThrows(IOException.class, reader::nextNull);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    }\r\n\r\n    @Test\r\n    public void testReadArray() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true, true]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testReadEmptyArray() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.hasNext()).isFalse();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testReadObject() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": \\\"android\\\", \\\"b\\\": \\\"banana\\\"}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"android\");\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        assertThat(reader.nextString()).isEqualTo(\"banana\");\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testReadEmptyObject() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.hasNext()).isFalse();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testHasNextEndOfDocument() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.beginObject();\r\n        reader.endObject();\r\n        assertThat(reader.hasNext()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testSkipArray() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        assertThat(reader.nextInt()).isEqualTo(123);\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipArrayAfterPeek() throws Exception {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.peek()).isEqualTo(BEGIN_ARRAY);\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        assertThat(reader.nextInt()).isEqualTo(123);\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipTopLevelObject() throws Exception {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipObject() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": { \\\"c\\\": [], \\\"d\\\": [true, true, {}] }, \\\"b\\\": \\\"banana\\\"}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        reader.skipValue();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipObjectAfterPeek() throws Exception {\r\n        String json = \"{\" + \"  \\\"one\\\": { \\\"num\\\": 1 }\" + \", \\\"two\\\": { \\\"num\\\": 2 }\" + \", \\\"three\\\": { \\\"num\\\": 3 }\" + \"}\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"one\");\r\n        assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"two\");\r\n        assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"three\");\r\n        reader.skipValue();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipObjectName() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": 1}\"));\r\n        reader.beginObject();\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n        assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipObjectNameSingleQuoted() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{'a': 1}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n        assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipObjectNameUnquoted() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{a: 1}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n        assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipInteger() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":123456789,\\\"b\\\":-123456789}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        reader.skipValue();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipDouble() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":-123.456e-789,\\\"b\\\":123456789.0}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        reader.skipValue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n        reader.skipValue();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipValueAfterEndOfDocument() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.beginObject();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void testSkipValueAtArrayEnd() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[]\"));\r\n        reader.beginArray();\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void testSkipValueAtObjectEnd() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{}\"));\r\n        reader.beginObject();\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void testHelloWorld() throws IOException {\r\n        String json = //\r\n        \"{\\n\" + //\r\n        \"   \\\"hello\\\": true,\\n\" + //\r\n        \"   \\\"foo\\\": [\\\"world\\\"]\\n\" + \"}\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"hello\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextName()).isEqualTo(\"foo\");\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(\"world\");\r\n        reader.endArray();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testInvalidJsonInput() throws IOException {\r\n        String json = //\r\n        \"{\\n\" + //\r\n        \"   \\\"h\\\\ello\\\": true,\\n\" + //\r\n        \"   \\\"foo\\\": [\\\"world\\\"]\\n\" + \"}\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginObject();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Invalid escape sequence at line 2 column 8 path $.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    @Test\r\n    public void testNulls() {\r\n        assertThrows(NullPointerException.class, () -> new JsonReader(null));\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyString() {\r\n        assertThrows(EOFException.class, () -> new JsonReader(reader(\"\")).beginArray());\r\n        assertThrows(EOFException.class, () -> new JsonReader(reader(\"\")).beginObject());\r\n    }\r\n\r\n    @Test\r\n    public void testCharacterUnescaping() throws IOException {\r\n        String json = \"[\\\"a\\\",\" + \"\\\"a\\\\\\\"\\\",\" + \"\\\"\\\\\\\"\\\",\" + \"\\\":\\\",\" + \"\\\",\\\",\" + \"\\\"\\\\b\\\",\" + \"\\\"\\\\f\\\",\" + \"\\\"\\\\n\\\",\" + \"\\\"\\\\r\\\",\" + \"\\\"\\\\t\\\",\" + \"\\\" \\\",\" + \"\\\"\\\\\\\\\\\",\" + \"\\\"{\\\",\" + \"\\\"}\\\",\" + \"\\\"[\\\",\" + \"\\\"]\\\",\" + \"\\\"\\\\u0000\\\",\" + \"\\\"\\\\u0019\\\",\" + \"\\\"\\\\u20AC\\\"\" + \"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"a\\\"\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\\"\");\r\n        assertThat(reader.nextString()).isEqualTo(\":\");\r\n        assertThat(reader.nextString()).isEqualTo(\",\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\b\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\f\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\n\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\r\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\t\");\r\n        assertThat(reader.nextString()).isEqualTo(\" \");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\\\\");\r\n        assertThat(reader.nextString()).isEqualTo(\"{\");\r\n        assertThat(reader.nextString()).isEqualTo(\"}\");\r\n        assertThat(reader.nextString()).isEqualTo(\"[\");\r\n        assertThat(reader.nextString()).isEqualTo(\"]\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\0\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\u0019\");\r\n        assertThat(reader.nextString()).isEqualTo(\"\\u20AC\");\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testReaderDoesNotTreatU2028U2029AsNewline() throws IOException {\r\n        // This test shows that the JSON string [\\n\"whatever\"] is seen as valid\r\n        // And the JSON string [\\u2028\"whatever\"] is not.\r\n        String jsonInvalid2028 = \"[\\u2028\\\"whatever\\\"]\";\r\n        JsonReader readerInvalid2028 = new JsonReader(reader(jsonInvalid2028));\r\n        readerInvalid2028.beginArray();\r\n        assertThrows(IOException.class, readerInvalid2028::nextString);\r\n        String jsonInvalid2029 = \"[\\u2029\\\"whatever\\\"]\";\r\n        JsonReader readerInvalid2029 = new JsonReader(reader(jsonInvalid2029));\r\n        readerInvalid2029.beginArray();\r\n        assertThrows(IOException.class, readerInvalid2029::nextString);\r\n        String jsonValid = \"[\\n\\\"whatever\\\"]\";\r\n        JsonReader readerValid = new JsonReader(reader(jsonValid));\r\n        readerValid.beginArray();\r\n        assertThat(readerValid.nextString()).isEqualTo(\"whatever\");\r\n        // And even in STRICT mode U+2028 and U+2029 are not considered control characters\r\n        // and can appear unescaped in JSON string\r\n        String jsonValid2028And2029 = \"\\\"whatever\\u2028\\u2029\\\"\";\r\n        JsonReader readerValid2028And2029 = new JsonReader(reader(jsonValid2028And2029));\r\n        readerValid2028And2029.setStrictness(Strictness.STRICT);\r\n        assertThat(readerValid2028And2029.nextString()).isEqualTo(\"whatever\\u2028\\u2029\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapeCharacterQuoteInStrictMode() {\r\n        String json = \"\\\"\\\\'\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.STRICT);\r\n        IOException expected = assertThrows(IOException.class, reader::nextString);\r\n        assertThat(expected).hasMessageThat().startsWith(\"Invalid escaped character \\\"'\\\" in strict mode\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapeCharacterQuoteWithoutStrictMode() throws IOException {\r\n        String json = \"\\\"\\\\'\\\"\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        assertThat(reader.nextString()).isEqualTo(\"'\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnescapingInvalidCharacters() throws IOException {\r\n        String json = \"[\\\"\\\\u000g\\\"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Malformed Unicode escape \\\\u000g at line 1 column 5 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnescapingTruncatedCharacters() throws IOException {\r\n        String json = \"[\\\"\\\\u000\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Unterminated escape sequence at line 1 column 5 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnescapingTruncatedSequence() throws IOException {\r\n        String json = \"[\\\"\\\\\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Unterminated escape sequence at line 1 column 4 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testIntegersWithFractionalPartSpecified() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[1.0,1.0,1.0]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n        assertThat(reader.nextLong()).isEqualTo(1L);\r\n    }\r\n\r\n    @Test\r\n    public void testDoubles() throws IOException {\r\n        String json = \"[-0.0,\" + \"1.0,\" + \"1.7976931348623157E308,\" + \"4.9E-324,\" + \"0.0,\" + \"0.00,\" + \"-0.5,\" + \"2.2250738585072014E-308,\" + \"3.141592653589793,\" + \"2.718281828459045,\" + \"0,\" + \"0.01,\" + \"0e0,\" + \"1e+0,\" + \"1e-0,\" + // leading 0 is allowed for exponent\r\n        \"1e0000,\" + \"1e00001,\" + \"1e+1]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        assertThat(reader.nextDouble()).isEqualTo(-0.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.7976931348623157E308);\r\n        assertThat(reader.nextDouble()).isEqualTo(4.9E-324);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(-0.5);\r\n        assertThat(reader.nextDouble()).isEqualTo(2.2250738585072014E-308);\r\n        assertThat(reader.nextDouble()).isEqualTo(3.141592653589793);\r\n        assertThat(reader.nextDouble()).isEqualTo(2.718281828459045);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.01);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(10.0);\r\n        assertThat(reader.nextDouble()).isEqualTo(10.0);\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNonFiniteDoubles() throws IOException {\r\n        String json = \"[NaN]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictQuotedNonFiniteDoubles() throws IOException {\r\n        String json = \"[\\\"NaN\\\"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: NaN at line 1 column 7 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientNonFiniteDoubles() throws IOException {\r\n        String json = \"[NaN, -Infinity, Infinity]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextDouble()).isNaN();\r\n        assertThat(reader.nextDouble()).isEqualTo(Double.NEGATIVE_INFINITY);\r\n        assertThat(reader.nextDouble()).isEqualTo(Double.POSITIVE_INFINITY);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testLenientQuotedNonFiniteDoubles() throws IOException {\r\n        String json = \"[\\\"NaN\\\", \\\"-Infinity\\\", \\\"Infinity\\\"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextDouble()).isNaN();\r\n        assertThat(reader.nextDouble()).isEqualTo(Double.NEGATIVE_INFINITY);\r\n        assertThat(reader.nextDouble()).isEqualTo(Double.POSITIVE_INFINITY);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {\r\n        String json = \"[NaN]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLongs() throws IOException {\r\n        String json = \"[0,0,0,\" + \"1,1,1,\" + \"-1,-1,-1,\" + \"-9223372036854775808,\" + \"9223372036854775807]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        assertThat(reader.nextLong()).isEqualTo(0L);\r\n        assertThat(reader.nextInt()).isEqualTo(0);\r\n        assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n        assertThat(reader.nextLong()).isEqualTo(1L);\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n        assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n        assertThat(reader.nextLong()).isEqualTo(-1L);\r\n        assertThat(reader.nextInt()).isEqualTo(-1);\r\n        assertThat(reader.nextDouble()).isEqualTo(-1.0);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n        assertThat(reader.nextLong()).isEqualTo(Long.MIN_VALUE);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n        assertThat(reader.nextLong()).isEqualTo(Long.MAX_VALUE);\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testNumberWithOctalPrefix() throws IOException {\r\n        String number = \"01\";\r\n        String expectedLocation = \"line 1 column 1 path $\";\r\n        var e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).peek());\r\n        assertStrictError(e, expectedLocation);\r\n        e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextInt());\r\n        assertStrictError(e, expectedLocation);\r\n        e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextLong());\r\n        assertStrictError(e, expectedLocation);\r\n        e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextDouble());\r\n        assertStrictError(e, expectedLocation);\r\n        e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextString());\r\n        assertStrictError(e, expectedLocation);\r\n    }\r\n\r\n    @Test\r\n    public void testBooleans() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true,false]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextBoolean()).isFalse();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[truey]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n        var e = assertThrows(IllegalStateException.class, () -> reader.nextBoolean());\r\n        assertUnexpectedStructureError(e, \"a boolean\", \"STRING\", \"line 1 column 2 path $[0]\");\r\n        assertThat(reader.nextString()).isEqualTo(\"truey\");\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testMalformedNumbers() throws IOException {\r\n        assertNotANumber(\"-\");\r\n        assertNotANumber(\".\");\r\n        // plus sign is not allowed for integer part\r\n        assertNotANumber(\"+1\");\r\n        // leading 0 is not allowed for integer part\r\n        assertNotANumber(\"00\");\r\n        assertNotANumber(\"01\");\r\n        // exponent lacks digit\r\n        assertNotANumber(\"e\");\r\n        assertNotANumber(\"0e\");\r\n        assertNotANumber(\".e\");\r\n        assertNotANumber(\"0.e\");\r\n        assertNotANumber(\"-.0e\");\r\n        // no integer\r\n        assertNotANumber(\"e1\");\r\n        assertNotANumber(\".e1\");\r\n        assertNotANumber(\"-e1\");\r\n        // trailing characters\r\n        assertNotANumber(\"1x\");\r\n        assertNotANumber(\"1.1x\");\r\n        assertNotANumber(\"1e1x\");\r\n        assertNotANumber(\"1ex\");\r\n        assertNotANumber(\"1.1ex\");\r\n        assertNotANumber(\"1.1e1x\");\r\n        // fraction has no digit\r\n        assertNotANumber(\"0.\");\r\n        assertNotANumber(\"-0.\");\r\n        assertNotANumber(\"0.e1\");\r\n        assertNotANumber(\"-0.e1\");\r\n        // no leading digit\r\n        assertNotANumber(\".0\");\r\n        assertNotANumber(\"-.0\");\r\n        assertNotANumber(\".0e1\");\r\n        assertNotANumber(\"-.0e1\");\r\n    }\r\n\r\n    private static void assertNotANumber(String s) throws IOException {\r\n        JsonReader reader = new JsonReader(reader(s));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n        assertThat(reader.nextString()).isEqualTo(s);\r\n        JsonReader strictReader = new JsonReader(reader(s));\r\n        var e = assertThrows(\"Should have failed reading \" + s + \" as double\", MalformedJsonException.class, () -> strictReader.nextDouble());\r\n        assertThat(e).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\");\r\n    }\r\n\r\n    @Test\r\n    public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n        assertThat(reader.nextString()).isEqualTo(\"12.34e5x\");\r\n    }\r\n\r\n    @Test\r\n    public void testPeekLongMinValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[-9223372036854775808]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThat(reader.nextLong()).isEqualTo(-9223372036854775808L);\r\n    }\r\n\r\n    @Test\r\n    public void testPeekLongMaxValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[9223372036854775807]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThat(reader.nextLong()).isEqualTo(9223372036854775807L);\r\n    }\r\n\r\n    @Test\r\n    public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[22233720368547758070]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n    }\r\n\r\n    @Test\r\n    public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[-22233720368547758070]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n    }\r\n\r\n    /**\r\n     * Issue 1053, negative zero.\r\n     */\r\n    @Test\r\n    public void testNegativeZero() throws Exception {\r\n        JsonReader reader = new JsonReader(reader(\"[-0]\"));\r\n        reader.setStrictness(Strictness.LEGACY_STRICT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThat(reader.nextString()).isEqualTo(\"-0\");\r\n    }\r\n\r\n    /**\r\n     * This test fails because there's no double for 9223372036854775808, and our long parsing uses\r\n     * Double.parseDouble() for fractional values.\r\n     */\r\n    @Test\r\n    @Ignore\r\n    public void testPeekLargerThanLongMaxValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[9223372036854775808]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n    }\r\n\r\n    /**\r\n     * This test fails because there's no double for -9223372036854775809, and our long parsing uses\r\n     * Double.parseDouble() for fractional values.\r\n     */\r\n    @Test\r\n    @Ignore\r\n    public void testPeekLargerThanLongMinValue() throws IOException {\r\n        @SuppressWarnings(\"FloatingPointLiteralPrecision\")\r\n        double d = -9223372036854775809d;\r\n        JsonReader reader = new JsonReader(reader(\"[-9223372036854775809]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n        assertThat(reader.nextDouble()).isEqualTo(d);\r\n    }\r\n\r\n    /**\r\n     * This test fails because there's no double for 9223372036854775806, and our long parsing uses\r\n     * Double.parseDouble() for fractional values.\r\n     */\r\n    @Test\r\n    @Ignore\r\n    public void testHighPrecisionLong() throws IOException {\r\n        String json = \"[9223372036854775806.000]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        assertThat(reader.nextLong()).isEqualTo(9223372036854775806L);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testPeekMuchLargerThanLongMinValue() throws IOException {\r\n        @SuppressWarnings(\"FloatingPointLiteralPrecision\")\r\n        double d = -92233720368547758080d;\r\n        JsonReader reader = new JsonReader(reader(\"[-92233720368547758080]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(NUMBER);\r\n        assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n        assertThat(reader.nextDouble()).isEqualTo(d);\r\n    }\r\n\r\n    @Test\r\n    public void testQuotedNumberWithEscape() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\\\"12\\\\u00334\\\"]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n        assertThat(reader.nextInt()).isEqualTo(1234);\r\n    }\r\n\r\n    @Test\r\n    public void testMixedCaseLiterals() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[True,TruE,False,FALSE,NULL,nulL]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextBoolean()).isFalse();\r\n        assertThat(reader.nextBoolean()).isFalse();\r\n        reader.nextNull();\r\n        reader.nextNull();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testMissingValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 6 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrematureEndOfInput() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true,\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThrows(EOFException.class, () -> reader.nextName());\r\n    }\r\n\r\n    @Test\r\n    public void testPrematurelyClosed() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\r\n        reader.beginObject();\r\n        reader.close();\r\n        var e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n        JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\r\n        reader2.close();\r\n        e = assertThrows(IllegalStateException.class, () -> reader2.beginObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n        JsonReader reader3 = new JsonReader(reader(\"{\\\"a\\\":true}\"));\r\n        reader3.beginObject();\r\n        String unused1 = reader3.nextName();\r\n        JsonToken unused2 = reader3.peek();\r\n        reader3.close();\r\n        e = assertThrows(IllegalStateException.class, () -> reader3.nextBoolean());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n    }\r\n\r\n    @Test\r\n    public void testNextFailuresDoNotAdvance() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\r\n        reader.beginObject();\r\n        var e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n        assertUnexpectedStructureError(e, \"a string\", \"NAME\", \"line 1 column 3 path $.\");\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n        assertUnexpectedStructureError(e, \"a name\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.beginArray());\r\n        assertUnexpectedStructureError(e, \"BEGIN_ARRAY\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.endArray());\r\n        assertUnexpectedStructureError(e, \"END_ARRAY\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.beginObject());\r\n        assertUnexpectedStructureError(e, \"BEGIN_OBJECT\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.endObject());\r\n        assertUnexpectedStructureError(e, \"END_OBJECT\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n        assertUnexpectedStructureError(e, \"a string\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n        assertUnexpectedStructureError(e, \"a name\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.beginArray());\r\n        assertUnexpectedStructureError(e, \"BEGIN_ARRAY\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n        e = assertThrows(IllegalStateException.class, () -> reader.endArray());\r\n        assertUnexpectedStructureError(e, \"END_ARRAY\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        reader.close();\r\n    }\r\n\r\n    @Test\r\n    public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[1.5]\"));\r\n        reader.beginArray();\r\n        assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n        assertThat(reader.nextDouble()).isEqualTo(1.5d);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testStringNullIsNotNull() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\\\"null\\\"]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(IllegalStateException.class, () -> reader.nextNull());\r\n        assertUnexpectedStructureError(e, \"null\", \"STRING\", \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullLiteralIsNotAString() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[null]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n        assertUnexpectedStructureError(e, \"a string\", \"NULL\", \"line 1 column 6 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNameValueSeparator() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n        JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n        reader2.beginObject();\r\n        assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientNameValueSeparator() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNameValueSeparatorWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n        JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n        reader2.beginObject();\r\n        assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    }\r\n\r\n    @Test\r\n    public void testCommentsInStringValue() throws Exception {\r\n        JsonReader reader = new JsonReader(reader(\"[\\\"// comment\\\"]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(\"// comment\");\r\n        reader.endArray();\r\n        reader = new JsonReader(reader(\"{\\\"a\\\":\\\"#someComment\\\"}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"#someComment\");\r\n        reader.endObject();\r\n        reader = new JsonReader(reader(\"{\\\"#//a\\\":\\\"#some //Comment\\\"}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"#//a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"#some //Comment\");\r\n        reader.endObject();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictComments() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader2 = new JsonReader(reader(\"[# comment \\n true]\"));\r\n        reader2.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader3 = new JsonReader(reader(\"[/* comment */ true]\"));\r\n        reader3.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader3.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientComments() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader = new JsonReader(reader(\"[# comment \\n true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader = new JsonReader(reader(\"[/* comment */ true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictCommentsWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader2 = new JsonReader(reader(\"[# comment \\n true]\"));\r\n        reader2.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader3 = new JsonReader(reader(\"[/* comment */ true]\"));\r\n        reader3.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnquotedNames() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n        reader.beginObject();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n        assertStrictError(e, \"line 1 column 3 path $.\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientUnquotedNames() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnquotedNamesWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n        reader.beginObject();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $.\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSingleQuotedNames() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n        reader.beginObject();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n        assertStrictError(e, \"line 1 column 3 path $.\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientSingleQuotedNames() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n        reader.beginObject();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $.\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnquotedStrings() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnquotedStringsWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientUnquotedStrings() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(\"a\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSingleQuotedStrings() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientSingleQuotedStrings() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(\"a\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSemicolonDelimitedArray() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientSemicolonDelimitedArray() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSemicolonDelimitedNameValuePair() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientSemicolonDelimitedNameValuePair() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnnecessaryArraySeparators() throws IOException {\r\n        // The following calls `nextNull()` because a lenient JsonReader would treat redundant array\r\n        // separators as implicit JSON null\r\n        JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextNull());\r\n        assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n        JsonReader reader2 = new JsonReader(reader(\"[,true]\"));\r\n        reader2.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.nextNull());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader3 = new JsonReader(reader(\"[true,]\"));\r\n        reader3.beginArray();\r\n        assertThat(reader3.nextBoolean()).isTrue();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader3.nextNull());\r\n        assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n        JsonReader reader4 = new JsonReader(reader(\"[,]\"));\r\n        reader4.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader4.nextNull());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientUnnecessaryArraySeparators() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        // Redundant array separators are treated as implicit JSON null\r\n        reader.nextNull();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader.endArray();\r\n        reader = new JsonReader(reader(\"[,true]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.nextNull();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader.endArray();\r\n        reader = new JsonReader(reader(\"[true,]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader.nextNull();\r\n        reader.endArray();\r\n        reader = new JsonReader(reader(\"[,]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.nextNull();\r\n        reader.nextNull();\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n        reader.beginArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n        JsonReader reader2 = new JsonReader(reader(\"[,true]\"));\r\n        reader2.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n        JsonReader reader3 = new JsonReader(reader(\"[true,]\"));\r\n        reader3.beginArray();\r\n        assertThat(reader3.nextBoolean()).isTrue();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());\r\n        assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n        JsonReader reader4 = new JsonReader(reader(\"[,]\"));\r\n        reader4.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader4.skipValue());\r\n        assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictMultipleTopLevelValues() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[] []\"));\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertStrictError(e, \"line 1 column 5 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientMultipleTopLevelValues() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[] true {}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        reader.beginObject();\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[] []\"));\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 5 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelValueTypes() throws IOException {\r\n        JsonReader reader1 = new JsonReader(reader(\"true\"));\r\n        assertThat(reader1.nextBoolean()).isTrue();\r\n        assertThat(reader1.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        JsonReader reader2 = new JsonReader(reader(\"false\"));\r\n        assertThat(reader2.nextBoolean()).isFalse();\r\n        assertThat(reader2.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        JsonReader reader3 = new JsonReader(reader(\"null\"));\r\n        assertThat(reader3.peek()).isEqualTo(JsonToken.NULL);\r\n        reader3.nextNull();\r\n        assertThat(reader3.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        JsonReader reader4 = new JsonReader(reader(\"123\"));\r\n        assertThat(reader4.nextInt()).isEqualTo(123);\r\n        assertThat(reader4.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        JsonReader reader5 = new JsonReader(reader(\"123.4\"));\r\n        assertThat(reader5.nextDouble()).isEqualTo(123.4);\r\n        assertThat(reader5.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n        JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\r\n        assertThat(reader6.nextString()).isEqualTo(\"a\");\r\n        assertThat(reader6.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelValueTypeWithSkipValue() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"true\"));\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNonExecutePrefix() {\r\n        JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.beginArray());\r\n        assertStrictError(e, \"line 1 column 1 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictNonExecutePrefixWithSkipValue() {\r\n        JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n        assertStrictError(e, \"line 1 column 1 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientNonExecutePrefix() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"\\r\\n \\t)]}'\\n []\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testLenientPartialNonExecutePrefix() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\")]}' []\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        assertThat(reader.nextString()).isEqualTo(\")\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Unexpected value at line 1 column 3 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"\\ufeff[]\"));\r\n        reader.beginArray();\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\\ufeff]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.endArray());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @SuppressWarnings(\"UngroupedOverloads\")\r\n    @Test\r\n    public void testFailWithPosition() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\", \"[\\n\\n\\n\\n\\n\\\"a\\\",}]\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionGreaterThanBufferSize() throws IOException {\r\n        String spaces = repeat(' ', 8192);\r\n        testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\", \"[\\n\\n\" + spaces + \"\\n\\n\\n\\\"a\\\",}]\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\", \"\\n// foo\\n\\n//bar\\r\\n[\\\"a\\\",}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionOverHashEndOfLineComment() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\", \"\\n# foo\\n\\n#bar\\r\\n[\\\"a\\\",}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionOverCStyleComment() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 6 column 12 path $[1]\", \"\\n\\n/* foo\\n*\\n*\\r\\nbar */[\\\"a\\\",}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionOverQuotedString() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\", \"[\\\"foo\\nbar\\r\\nbaz\\n\\\",\\n  }\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionOverUnquotedString() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 5 column 2 path $[1]\", \"[\\n\\nabcd\\n\\n,}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithEscapedNewlineCharacter() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\", \"[\\n\\n\\\"\\\\\\n\\n\\\",}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionIsOffsetByBom() throws IOException {\r\n        testFailWithPosition(\"Expected value at line 1 column 6 path $[1]\", \"\\ufeff[\\\"a\\\",}]\");\r\n    }\r\n\r\n    private static void testFailWithPosition(String message, String json) throws IOException {\r\n        // Validate that it works reading the string normally.\r\n        JsonReader reader1 = new JsonReader(reader(json));\r\n        reader1.setStrictness(Strictness.LENIENT);\r\n        reader1.beginArray();\r\n        String unused1 = reader1.nextString();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader1.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(message + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n        // Also validate that it works when skipping.\r\n        JsonReader reader2 = new JsonReader(reader(json));\r\n        reader2.setStrictness(Strictness.LENIENT);\r\n        reader2.beginArray();\r\n        reader2.skipValue();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader2.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(message + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testFailWithPositionDeepPath() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[1,{\\\"a\\\":[2,3,}\"));\r\n        reader.beginArray();\r\n        int unused1 = reader.nextInt();\r\n        reader.beginObject();\r\n        String unused2 = reader.nextName();\r\n        reader.beginArray();\r\n        int unused3 = reader.nextInt();\r\n        int unused4 = reader.nextInt();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 14 path $[1].a[2]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrictVeryLongNumber() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\r\n        reader.beginArray();\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n        assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientVeryLongNumber() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n        assertThat(reader.nextDouble()).isEqualTo(1d);\r\n        reader.endArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testVeryLongUnquotedLiteral() throws IOException {\r\n        String literal = \"a\" + repeat('b', 8192) + \"c\";\r\n        JsonReader reader = new JsonReader(reader(\"[\" + literal + \"]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(literal);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testDeeplyNestedArrays() throws IOException {\r\n        // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer\r\n        JsonReader reader = new JsonReader(reader(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\"));\r\n        for (int i = 0; i < 40; i++) {\r\n            reader.beginArray();\r\n        }\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\" + \"[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\");\r\n        for (int i = 0; i < 40; i++) {\r\n            reader.endArray();\r\n        }\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testDeeplyNestedObjects() throws IOException {\r\n        // Build a JSON document structured like {\"a\":{\"a\":{\"a\":{\"a\":true}}}}, but 40 levels deep\r\n        String json = \"true\";\r\n        for (int i = 0; i < 40; i++) {\r\n            json = String.format(\"{\\\"a\\\":%s}\", json);\r\n        }\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        for (int i = 0; i < 40; i++) {\r\n            reader.beginObject();\r\n            assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        }\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\" + \".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\");\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        for (int i = 0; i < 40; i++) {\r\n            reader.endObject();\r\n        }\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testNestingLimitDefault() throws IOException {\r\n        int defaultLimit = JsonReader.DEFAULT_NESTING_LIMIT;\r\n        String json = repeat('[', defaultLimit + 1);\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        assertThat(reader.getNestingLimit()).isEqualTo(defaultLimit);\r\n        for (int i = 0; i < defaultLimit; i++) {\r\n            reader.beginArray();\r\n        }\r\n        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.beginArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit \" + defaultLimit + \" reached at line 1 column \" + (defaultLimit + 2) + \" path $\" + \"[0]\".repeat(defaultLimit));\r\n    }\r\n\r\n    // Note: The column number reported in the expected exception messages is slightly off and points\r\n    // behind instead of directly at the '[' or '{'\r\n    @Test\r\n    public void testNestingLimit() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[{\\\"a\\\":1}]\"));\r\n        reader.setNestingLimit(2);\r\n        assertThat(reader.getNestingLimit()).isEqualTo(2);\r\n        reader.beginArray();\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextInt()).isEqualTo(1);\r\n        reader.endObject();\r\n        reader.endArray();\r\n        JsonReader reader2 = new JsonReader(reader(\"[{\\\"a\\\":[]}]\"));\r\n        reader2.setNestingLimit(2);\r\n        reader2.beginArray();\r\n        reader2.beginObject();\r\n        assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader2.beginArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 2 reached at line 1 column 8 path $[0].a\");\r\n        JsonReader reader3 = new JsonReader(reader(\"[]\"));\r\n        reader3.setNestingLimit(0);\r\n        e = assertThrows(MalformedJsonException.class, () -> reader3.beginArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 0 reached at line 1 column 2 path $\");\r\n        JsonReader reader4 = new JsonReader(reader(\"[]\"));\r\n        reader4.setNestingLimit(0);\r\n        // Currently also checked when skipping values\r\n        e = assertThrows(MalformedJsonException.class, () -> reader4.skipValue());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 0 reached at line 1 column 2 path $\");\r\n        JsonReader reader5 = new JsonReader(reader(\"1\"));\r\n        reader5.setNestingLimit(0);\r\n        // Reading value other than array or object should be allowed\r\n        assertThat(reader5.nextInt()).isEqualTo(1);\r\n        // Test multiple top-level arrays\r\n        JsonReader reader6 = new JsonReader(reader(\"[] [[]]\"));\r\n        reader6.setStrictness(Strictness.LENIENT);\r\n        reader6.setNestingLimit(1);\r\n        reader6.beginArray();\r\n        reader6.endArray();\r\n        reader6.beginArray();\r\n        e = assertThrows(MalformedJsonException.class, () -> reader6.beginArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 1 reached at line 1 column 6 path $[0]\");\r\n        JsonReader reader7 = new JsonReader(reader(\"[]\"));\r\n        IllegalArgumentException argException = assertThrows(IllegalArgumentException.class, () -> reader7.setNestingLimit(-1));\r\n        assertThat(argException).hasMessageThat().isEqualTo(\"Invalid nesting limit: -1\");\r\n    }\r\n\r\n    // http://code.google.com/p/google-gson/issues/detail?id=409\r\n    @Test\r\n    public void testStringEndingInSlash() {\r\n        JsonReader reader = new JsonReader(reader(\"/\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testDocumentWithCommentEndingInSlash() {\r\n        JsonReader reader = new JsonReader(reader(\"/* foo *//\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 10 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringWithLeadingSlash() {\r\n        JsonReader reader = new JsonReader(reader(\"/x\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnterminatedObject() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"android\\\"x\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"android\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Unterminated object at line 1 column 16 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testVeryLongQuotedString() throws IOException {\r\n        char[] stringChars = new char[1024 * 16];\r\n        Arrays.fill(stringChars, 'x');\r\n        String string = new String(stringChars);\r\n        String json = \"[\\\"\" + string + \"\\\"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(string);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testVeryLongUnquotedString() throws IOException {\r\n        char[] stringChars = new char[1024 * 16];\r\n        Arrays.fill(stringChars, 'x');\r\n        String string = new String(stringChars);\r\n        String json = \"[\" + string + \"]\";\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(string);\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testVeryLongUnterminatedString() throws IOException {\r\n        char[] stringChars = new char[1024 * 16];\r\n        Arrays.fill(stringChars, 'x');\r\n        String string = new String(stringChars);\r\n        String json = \"[\" + string;\r\n        JsonReader reader = new JsonReader(reader(json));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.nextString()).isEqualTo(string);\r\n        assertThrows(EOFException.class, () -> reader.peek());\r\n    }\r\n\r\n    @Test\r\n    public void testSkipVeryLongUnquotedString() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\" + repeat('x', 8192) + \"]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.skipValue();\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testSkipTopLevelUnquotedString() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testSkipVeryLongQuotedString() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\\\"\" + repeat('x', 8192) + \"\\\"]\"));\r\n        reader.beginArray();\r\n        reader.skipValue();\r\n        reader.endArray();\r\n    }\r\n\r\n    @Test\r\n    public void testSkipTopLevelQuotedString() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"\\\"\" + repeat('x', 8192) + \"\\\"\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.skipValue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testStringAsNumberWithTruncatedExponent() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[123e]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n    }\r\n\r\n    @Test\r\n    public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[123e4b]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n    }\r\n\r\n    @Test\r\n    public void testStringAsNumberWithNonDigitExponent() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[123eb]\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(STRING);\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyStringName() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"\\\":true}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n        reader.beginObject();\r\n        assertThat(reader.peek()).isEqualTo(NAME);\r\n        assertThat(reader.nextName()).isEqualTo(\"\");\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.BOOLEAN);\r\n        assertThat(reader.nextBoolean()).isTrue();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_OBJECT);\r\n        reader.endObject();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    }\r\n\r\n    @Test\r\n    public void testStrictExtraCommasInMaps() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"b\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected name at line 1 column 11 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testLenientExtraCommasInMaps() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n        assertThat(reader.nextString()).isEqualTo(\"b\");\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected name at line 1 column 11 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    private static String repeat(char c, int count) {\r\n        char[] array = new char[count];\r\n        Arrays.fill(array, c);\r\n        return new String(array);\r\n    }\r\n\r\n    @Test\r\n    public void testMalformedDocuments() throws IOException {\r\n        assertDocument(\"{]\", BEGIN_OBJECT, MalformedJsonException.class);\r\n        assertDocument(\"{,\", BEGIN_OBJECT, MalformedJsonException.class);\r\n        assertDocument(\"{{\", BEGIN_OBJECT, MalformedJsonException.class);\r\n        assertDocument(\"{[\", BEGIN_OBJECT, MalformedJsonException.class);\r\n        assertDocument(\"{:\", BEGIN_OBJECT, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\":}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"::\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\":,\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=>}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=>\\\"string\\\":\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=>\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n        assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\\\"name\\\"\", BEGIN_OBJECT, NAME, STRING, NAME);\r\n        assertDocument(\"[}\", BEGIN_ARRAY, MalformedJsonException.class);\r\n        assertDocument(\"[,]\", BEGIN_ARRAY, NULL, NULL, END_ARRAY);\r\n        assertDocument(\"{\", BEGIN_OBJECT, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\"\", BEGIN_OBJECT, NAME, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{'name'\", BEGIN_OBJECT, NAME, EOFException.class);\r\n        assertDocument(\"{'name',\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n        assertDocument(\"{name\", BEGIN_OBJECT, NAME, EOFException.class);\r\n        assertDocument(\"[\", BEGIN_ARRAY, EOFException.class);\r\n        assertDocument(\"[string\", BEGIN_ARRAY, STRING, EOFException.class);\r\n        assertDocument(\"[\\\"string\\\"\", BEGIN_ARRAY, STRING, EOFException.class);\r\n        assertDocument(\"['string'\", BEGIN_ARRAY, STRING, EOFException.class);\r\n        assertDocument(\"[123\", BEGIN_ARRAY, NUMBER, EOFException.class);\r\n        assertDocument(\"[123,\", BEGIN_ARRAY, NUMBER, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":123\", BEGIN_OBJECT, NAME, NUMBER, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":123,\", BEGIN_OBJECT, NAME, NUMBER, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":\\\"string\\\"\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":'string'\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":'string',\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":false\", BEGIN_OBJECT, NAME, BOOLEAN, EOFException.class);\r\n        assertDocument(\"{\\\"name\\\":false,,\", BEGIN_OBJECT, NAME, BOOLEAN, MalformedJsonException.class);\r\n    }\r\n\r\n    /**\r\n     * This test behaves slightly differently in Gson 2.2 and earlier. It fails during peek rather\r\n     * than during nextString().\r\n     */\r\n    @Test\r\n    public void testUnterminatedStringFailure() throws IOException {\r\n        JsonReader reader = new JsonReader(reader(\"[\\\"string\"));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n        var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Unterminated string at line 1 column 9 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    /**\r\n     * Regression test for an issue with buffer filling and consumeNonExecutePrefix.\r\n     */\r\n    @Test\r\n    public void testReadAcrossBuffers() throws IOException {\r\n        StringBuilder sb = new StringBuilder(\"#\");\r\n        for (int i = 0; i < JsonReader.BUFFER_SIZE - 3; i++) {\r\n            sb.append(' ');\r\n        }\r\n        sb.append(\"\\n)]}'\\n3\");\r\n        JsonReader reader = new JsonReader(reader(sb.toString()));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        JsonToken token = reader.peek();\r\n        assertThat(token).isEqualTo(JsonToken.NUMBER);\r\n    }\r\n\r\n    private static void assertStrictError(MalformedJsonException exception, String expectedLocation) {\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at \" + expectedLocation + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    private static void assertUnexpectedStructureError(IllegalStateException exception, String expectedToken, String actualToken, String expectedLocation) {\r\n        String troubleshootingId = actualToken.equals(\"NULL\") ? \"adapter-not-null-safe\" : \"unexpected-json-structure\";\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Expected \" + expectedToken + \" but was \" + actualToken + \" at \" + expectedLocation + \"\\nSee https://github.com/google/gson/blob/main/Troubleshooting.md#\" + troubleshootingId);\r\n    }\r\n\r\n    private static void assertDocument(String document, Object... expectations) throws IOException {\r\n        JsonReader reader = new JsonReader(reader(document));\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        for (Object expectation : expectations) {\r\n            if (expectation == BEGIN_OBJECT) {\r\n                reader.beginObject();\r\n            } else if (expectation == BEGIN_ARRAY) {\r\n                reader.beginArray();\r\n            } else if (expectation == END_OBJECT) {\r\n                reader.endObject();\r\n            } else if (expectation == END_ARRAY) {\r\n                reader.endArray();\r\n            } else if (expectation == NAME) {\r\n                assertThat(reader.nextName()).isEqualTo(\"name\");\r\n            } else if (expectation == BOOLEAN) {\r\n                assertThat(reader.nextBoolean()).isFalse();\r\n            } else if (expectation == STRING) {\r\n                assertThat(reader.nextString()).isEqualTo(\"string\");\r\n            } else if (expectation == NUMBER) {\r\n                assertThat(reader.nextInt()).isEqualTo(123);\r\n            } else if (expectation == NULL) {\r\n                reader.nextNull();\r\n            } else if (expectation instanceof Class && Exception.class.isAssignableFrom((Class<?>) expectation)) {\r\n                var expected = assertThrows(Exception.class, () -> reader.peek());\r\n                assertThat(expected.getClass()).isEqualTo((Class<?>) expectation);\r\n            } else {\r\n                throw new AssertionError(\"Unsupported expectation value: \" + expectation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a reader that returns one character at a time.\r\n     */\r\n    private static Reader reader(String s) {\r\n        /* if (true) */\r\n        return new StringReader(s);\r\n        /* return new Reader() {\r\n      int position = 0;\r\n      @Override public int read(char[] buffer, int offset, int count) throws IOException {\r\n        if (position == s.length()) {\r\n          return -1;\r\n        } else if (count > 0) {\r\n          buffer[offset] = s.charAt(position++);\r\n          return 1;\r\n        } else {\r\n          throw new IllegalArgumentException();\r\n        }\r\n      }\r\n      @Override public void close() throws IOException {\r\n      }\r\n    }; */\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultStrictness",
    "start_line": 43,
    "end_line": 47,
    "code": "@Test\r\npublic void testDefaultStrictness() {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    assertThat(reader.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSetLenientTrue",
    "start_line": 49,
    "end_line": 55,
    "code": "// for JsonReader.setLenient\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testSetLenientTrue() {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.setLenient(true);\r\n    assertThat(reader.getStrictness()).isEqualTo(Strictness.LENIENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSetLenientFalse",
    "start_line": 57,
    "end_line": 63,
    "code": "// for JsonReader.setLenient\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testSetLenientFalse() {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.setLenient(false);\r\n    assertThat(reader.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSetStrictness",
    "start_line": 65,
    "end_line": 70,
    "code": "@Test\r\npublic void testSetStrictness() {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    assertThat(reader.getStrictness()).isEqualTo(Strictness.STRICT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSetStrictnessNull",
    "start_line": 72,
    "end_line": 76,
    "code": "@Test\r\npublic void testSetStrictnessNull() {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    assertThrows(NullPointerException.class, () -> reader.setStrictness(null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedNewlineNotAllowedInStrictMode",
    "start_line": 78,
    "end_line": 88,
    "code": "@Test\r\npublic void testEscapedNewlineNotAllowedInStrictMode() {\r\n    String json = \"\\\"\\\\\\n\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextString);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Cannot escape a newline character in strict mode\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedNewlineAllowedInDefaultMode",
    "start_line": 90,
    "end_line": 95,
    "code": "@Test\r\npublic void testEscapedNewlineAllowedInDefaultMode() throws IOException {\r\n    String json = \"\\\"\\\\\\n\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    assertThat(reader.nextString()).isEqualTo(\"\\n\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictModeFailsToParseUnescapedControlCharacter",
    "start_line": 97,
    "end_line": 128,
    "code": "@Test\r\npublic void testStrictModeFailsToParseUnescapedControlCharacter() {\r\n    String json = \"\\\"\\0\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextString);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n    json = \"\\\"\\t\\\"\";\r\n    reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    expected = assertThrows(IOException.class, reader::nextString);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n    json = \"\\\"\\u001F\\\"\";\r\n    reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    expected = assertThrows(IOException.class, reader::nextString);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Unescaped control characters (\\\\u0000-\\\\u001F) are not allowed in strict mode\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictModeAllowsOtherControlCharacters",
    "start_line": 130,
    "end_line": 138,
    "code": "@Test\r\npublic void testStrictModeAllowsOtherControlCharacters() throws IOException {\r\n    // JSON specification only forbids control characters U+0000 - U+001F, other control characters\r\n    // should be allowed\r\n    String json = \"\\\"\\u007F\\u009F\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    assertThat(reader.nextString()).isEqualTo(\"\\u007F\\u009F\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNonStrictModeParsesUnescapedControlCharacter",
    "start_line": 140,
    "end_line": 145,
    "code": "@Test\r\npublic void testNonStrictModeParsesUnescapedControlCharacter() throws IOException {\r\n    String json = \"\\\"\\t\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    assertThat(reader.nextString()).isEqualTo(\"\\t\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testCapitalizedTrueFailWhenStrict",
    "start_line": 147,
    "end_line": 168,
    "code": "@Test\r\npublic void testCapitalizedTrueFailWhenStrict() {\r\n    JsonReader reader = new JsonReader(reader(\"TRUE\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextBoolean);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    reader = new JsonReader(reader(\"True\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    expected = assertThrows(IOException.class, reader::nextBoolean);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testCapitalizedFalseFailWhenStrict",
    "start_line": 170,
    "end_line": 191,
    "code": "@Test\r\npublic void testCapitalizedFalseFailWhenStrict() {\r\n    JsonReader reader = new JsonReader(reader(\"FALSE\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextBoolean);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    reader = new JsonReader(reader(\"FaLse\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    expected = assertThrows(IOException.class, reader::nextBoolean);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testCapitalizedNullFailWhenStrict",
    "start_line": 193,
    "end_line": 214,
    "code": "@Test\r\npublic void testCapitalizedNullFailWhenStrict() {\r\n    JsonReader reader = new JsonReader(reader(\"NULL\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextNull);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n    reader = new JsonReader(reader(\"nulL\"));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    expected = assertThrows(IOException.class, reader::nextNull);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\" + \" at line 1 column 1 path $\\n\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReadArray",
    "start_line": 216,
    "end_line": 224,
    "code": "@Test\r\npublic void testReadArray() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true, true]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReadEmptyArray",
    "start_line": 226,
    "end_line": 233,
    "code": "@Test\r\npublic void testReadEmptyArray() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.hasNext()).isFalse();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReadObject",
    "start_line": 235,
    "end_line": 245,
    "code": "@Test\r\npublic void testReadObject() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": \\\"android\\\", \\\"b\\\": \\\"banana\\\"}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"android\");\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    assertThat(reader.nextString()).isEqualTo(\"banana\");\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReadEmptyObject",
    "start_line": 247,
    "end_line": 254,
    "code": "@Test\r\npublic void testReadEmptyObject() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.hasNext()).isFalse();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testHasNextEndOfDocument",
    "start_line": 256,
    "end_line": 262,
    "code": "@Test\r\npublic void testHasNextEndOfDocument() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.beginObject();\r\n    reader.endObject();\r\n    assertThat(reader.hasNext()).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipArray",
    "start_line": 264,
    "end_line": 275,
    "code": "@Test\r\npublic void testSkipArray() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    assertThat(reader.nextInt()).isEqualTo(123);\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipArrayAfterPeek",
    "start_line": 277,
    "end_line": 289,
    "code": "@Test\r\npublic void testSkipArrayAfterPeek() throws Exception {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.peek()).isEqualTo(BEGIN_ARRAY);\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    assertThat(reader.nextInt()).isEqualTo(123);\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipTopLevelObject",
    "start_line": 291,
    "end_line": 297,
    "code": "@Test\r\npublic void testSkipTopLevelObject() throws Exception {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipObject",
    "start_line": 299,
    "end_line": 311,
    "code": "@Test\r\npublic void testSkipObject() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": { \\\"c\\\": [], \\\"d\\\": [true, true, {}] }, \\\"b\\\": \\\"banana\\\"}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    reader.skipValue();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipObjectAfterPeek",
    "start_line": 313,
    "end_line": 333,
    "code": "@Test\r\npublic void testSkipObjectAfterPeek() throws Exception {\r\n    String json = \"{\" + \"  \\\"one\\\": { \\\"num\\\": 1 }\" + \", \\\"two\\\": { \\\"num\\\": 2 }\" + \", \\\"three\\\": { \\\"num\\\": 3 }\" + \"}\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"one\");\r\n    assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"two\");\r\n    assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"three\");\r\n    reader.skipValue();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipObjectName",
    "start_line": 335,
    "end_line": 343,
    "code": "@Test\r\npublic void testSkipObjectName() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\": 1}\"));\r\n    reader.beginObject();\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n    assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipObjectNameSingleQuoted",
    "start_line": 345,
    "end_line": 354,
    "code": "@Test\r\npublic void testSkipObjectNameSingleQuoted() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{'a': 1}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n    assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipObjectNameUnquoted",
    "start_line": 356,
    "end_line": 365,
    "code": "@Test\r\npublic void testSkipObjectNameUnquoted() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{a: 1}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);\r\n    assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipInteger",
    "start_line": 367,
    "end_line": 377,
    "code": "@Test\r\npublic void testSkipInteger() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":123456789,\\\"b\\\":-123456789}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    reader.skipValue();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipDouble",
    "start_line": 379,
    "end_line": 389,
    "code": "@Test\r\npublic void testSkipDouble() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":-123.456e-789,\\\"b\\\":123456789.0}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    reader.skipValue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n    reader.skipValue();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipValueAfterEndOfDocument",
    "start_line": 391,
    "end_line": 402,
    "code": "@Test\r\npublic void testSkipValueAfterEndOfDocument() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.beginObject();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipValueAtArrayEnd",
    "start_line": 404,
    "end_line": 411,
    "code": "@Test\r\npublic void testSkipValueAtArrayEnd() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[]\"));\r\n    reader.beginArray();\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipValueAtObjectEnd",
    "start_line": 413,
    "end_line": 420,
    "code": "@Test\r\npublic void testSkipValueAtObjectEnd() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{}\"));\r\n    reader.beginObject();\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testHelloWorld",
    "start_line": 422,
    "end_line": 439,
    "code": "@Test\r\npublic void testHelloWorld() throws IOException {\r\n    String json = //\r\n    \"{\\n\" + //\r\n    \"   \\\"hello\\\": true,\\n\" + //\r\n    \"   \\\"foo\\\": [\\\"world\\\"]\\n\" + \"}\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"hello\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextName()).isEqualTo(\"foo\");\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(\"world\");\r\n    reader.endArray();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testInvalidJsonInput",
    "start_line": 441,
    "end_line": 457,
    "code": "@Test\r\npublic void testInvalidJsonInput() throws IOException {\r\n    String json = //\r\n    \"{\\n\" + //\r\n    \"   \\\"h\\\\ello\\\": true,\\n\" + //\r\n    \"   \\\"foo\\\": [\\\"world\\\"]\\n\" + \"}\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginObject();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Invalid escape sequence at line 2 column 8 path $.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNulls",
    "start_line": 459,
    "end_line": 463,
    "code": "@SuppressWarnings(\"unused\")\r\n@Test\r\npublic void testNulls() {\r\n    assertThrows(NullPointerException.class, () -> new JsonReader(null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyString",
    "start_line": 465,
    "end_line": 469,
    "code": "@Test\r\npublic void testEmptyString() {\r\n    assertThrows(EOFException.class, () -> new JsonReader(reader(\"\")).beginArray());\r\n    assertThrows(EOFException.class, () -> new JsonReader(reader(\"\")).beginObject());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testCharacterUnescaping",
    "start_line": 471,
    "end_line": 517,
    "code": "@Test\r\npublic void testCharacterUnescaping() throws IOException {\r\n    String json = \"[\\\"a\\\",\" + \"\\\"a\\\\\\\"\\\",\" + \"\\\"\\\\\\\"\\\",\" + \"\\\":\\\",\" + \"\\\",\\\",\" + \"\\\"\\\\b\\\",\" + \"\\\"\\\\f\\\",\" + \"\\\"\\\\n\\\",\" + \"\\\"\\\\r\\\",\" + \"\\\"\\\\t\\\",\" + \"\\\" \\\",\" + \"\\\"\\\\\\\\\\\",\" + \"\\\"{\\\",\" + \"\\\"}\\\",\" + \"\\\"[\\\",\" + \"\\\"]\\\",\" + \"\\\"\\\\u0000\\\",\" + \"\\\"\\\\u0019\\\",\" + \"\\\"\\\\u20AC\\\"\" + \"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"a\\\"\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\\"\");\r\n    assertThat(reader.nextString()).isEqualTo(\":\");\r\n    assertThat(reader.nextString()).isEqualTo(\",\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\b\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\f\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\n\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\r\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\t\");\r\n    assertThat(reader.nextString()).isEqualTo(\" \");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\\\\");\r\n    assertThat(reader.nextString()).isEqualTo(\"{\");\r\n    assertThat(reader.nextString()).isEqualTo(\"}\");\r\n    assertThat(reader.nextString()).isEqualTo(\"[\");\r\n    assertThat(reader.nextString()).isEqualTo(\"]\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\0\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\u0019\");\r\n    assertThat(reader.nextString()).isEqualTo(\"\\u20AC\");\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReaderDoesNotTreatU2028U2029AsNewline",
    "start_line": 519,
    "end_line": 544,
    "code": "@Test\r\npublic void testReaderDoesNotTreatU2028U2029AsNewline() throws IOException {\r\n    // This test shows that the JSON string [\\n\"whatever\"] is seen as valid\r\n    // And the JSON string [\\u2028\"whatever\"] is not.\r\n    String jsonInvalid2028 = \"[\\u2028\\\"whatever\\\"]\";\r\n    JsonReader readerInvalid2028 = new JsonReader(reader(jsonInvalid2028));\r\n    readerInvalid2028.beginArray();\r\n    assertThrows(IOException.class, readerInvalid2028::nextString);\r\n    String jsonInvalid2029 = \"[\\u2029\\\"whatever\\\"]\";\r\n    JsonReader readerInvalid2029 = new JsonReader(reader(jsonInvalid2029));\r\n    readerInvalid2029.beginArray();\r\n    assertThrows(IOException.class, readerInvalid2029::nextString);\r\n    String jsonValid = \"[\\n\\\"whatever\\\"]\";\r\n    JsonReader readerValid = new JsonReader(reader(jsonValid));\r\n    readerValid.beginArray();\r\n    assertThat(readerValid.nextString()).isEqualTo(\"whatever\");\r\n    // And even in STRICT mode U+2028 and U+2029 are not considered control characters\r\n    // and can appear unescaped in JSON string\r\n    String jsonValid2028And2029 = \"\\\"whatever\\u2028\\u2029\\\"\";\r\n    JsonReader readerValid2028And2029 = new JsonReader(reader(jsonValid2028And2029));\r\n    readerValid2028And2029.setStrictness(Strictness.STRICT);\r\n    assertThat(readerValid2028And2029.nextString()).isEqualTo(\"whatever\\u2028\\u2029\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEscapeCharacterQuoteInStrictMode",
    "start_line": 546,
    "end_line": 556,
    "code": "@Test\r\npublic void testEscapeCharacterQuoteInStrictMode() {\r\n    String json = \"\\\"\\\\'\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.STRICT);\r\n    IOException expected = assertThrows(IOException.class, reader::nextString);\r\n    assertThat(expected).hasMessageThat().startsWith(\"Invalid escaped character \\\"'\\\" in strict mode\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEscapeCharacterQuoteWithoutStrictMode",
    "start_line": 558,
    "end_line": 563,
    "code": "@Test\r\npublic void testEscapeCharacterQuoteWithoutStrictMode() throws IOException {\r\n    String json = \"\\\"\\\\'\\\"\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    assertThat(reader.nextString()).isEqualTo(\"'\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testUnescapingInvalidCharacters",
    "start_line": 565,
    "end_line": 576,
    "code": "@Test\r\npublic void testUnescapingInvalidCharacters() throws IOException {\r\n    String json = \"[\\\"\\\\u000g\\\"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Malformed Unicode escape \\\\u000g at line 1 column 5 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testUnescapingTruncatedCharacters",
    "start_line": 578,
    "end_line": 589,
    "code": "@Test\r\npublic void testUnescapingTruncatedCharacters() throws IOException {\r\n    String json = \"[\\\"\\\\u000\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Unterminated escape sequence at line 1 column 5 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testUnescapingTruncatedSequence",
    "start_line": 591,
    "end_line": 602,
    "code": "@Test\r\npublic void testUnescapingTruncatedSequence() throws IOException {\r\n    String json = \"[\\\"\\\\\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Unterminated escape sequence at line 1 column 4 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testIntegersWithFractionalPartSpecified",
    "start_line": 604,
    "end_line": 611,
    "code": "@Test\r\npublic void testIntegersWithFractionalPartSpecified() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[1.0,1.0,1.0]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n    assertThat(reader.nextLong()).isEqualTo(1L);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testDoubles",
    "start_line": 613,
    "end_line": 656,
    "code": "@Test\r\npublic void testDoubles() throws IOException {\r\n    String json = \"[-0.0,\" + \"1.0,\" + \"1.7976931348623157E308,\" + \"4.9E-324,\" + \"0.0,\" + \"0.00,\" + \"-0.5,\" + \"2.2250738585072014E-308,\" + \"3.141592653589793,\" + \"2.718281828459045,\" + \"0,\" + \"0.01,\" + \"0e0,\" + \"1e+0,\" + \"1e-0,\" + // leading 0 is allowed for exponent\r\n    \"1e0000,\" + \"1e00001,\" + \"1e+1]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    assertThat(reader.nextDouble()).isEqualTo(-0.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.7976931348623157E308);\r\n    assertThat(reader.nextDouble()).isEqualTo(4.9E-324);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(-0.5);\r\n    assertThat(reader.nextDouble()).isEqualTo(2.2250738585072014E-308);\r\n    assertThat(reader.nextDouble()).isEqualTo(3.141592653589793);\r\n    assertThat(reader.nextDouble()).isEqualTo(2.718281828459045);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.01);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(10.0);\r\n    assertThat(reader.nextDouble()).isEqualTo(10.0);\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNonFiniteDoubles",
    "start_line": 658,
    "end_line": 665,
    "code": "@Test\r\npublic void testStrictNonFiniteDoubles() throws IOException {\r\n    String json = \"[NaN]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictQuotedNonFiniteDoubles",
    "start_line": 667,
    "end_line": 678,
    "code": "@Test\r\npublic void testStrictQuotedNonFiniteDoubles() throws IOException {\r\n    String json = \"[\\\"NaN\\\"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: NaN at line 1 column 7 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientNonFiniteDoubles",
    "start_line": 680,
    "end_line": 690,
    "code": "@Test\r\npublic void testLenientNonFiniteDoubles() throws IOException {\r\n    String json = \"[NaN, -Infinity, Infinity]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextDouble()).isNaN();\r\n    assertThat(reader.nextDouble()).isEqualTo(Double.NEGATIVE_INFINITY);\r\n    assertThat(reader.nextDouble()).isEqualTo(Double.POSITIVE_INFINITY);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientQuotedNonFiniteDoubles",
    "start_line": 692,
    "end_line": 702,
    "code": "@Test\r\npublic void testLenientQuotedNonFiniteDoubles() throws IOException {\r\n    String json = \"[\\\"NaN\\\", \\\"-Infinity\\\", \\\"Infinity\\\"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextDouble()).isNaN();\r\n    assertThat(reader.nextDouble()).isEqualTo(Double.NEGATIVE_INFINITY);\r\n    assertThat(reader.nextDouble()).isEqualTo(Double.POSITIVE_INFINITY);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNonFiniteDoublesWithSkipValue",
    "start_line": 704,
    "end_line": 711,
    "code": "@Test\r\npublic void testStrictNonFiniteDoublesWithSkipValue() throws IOException {\r\n    String json = \"[NaN]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLongs",
    "start_line": 713,
    "end_line": 737,
    "code": "@Test\r\npublic void testLongs() throws IOException {\r\n    String json = \"[0,0,0,\" + \"1,1,1,\" + \"-1,-1,-1,\" + \"-9223372036854775808,\" + \"9223372036854775807]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    assertThat(reader.nextLong()).isEqualTo(0L);\r\n    assertThat(reader.nextInt()).isEqualTo(0);\r\n    assertThat(reader.nextDouble()).isEqualTo(0.0);\r\n    assertThat(reader.nextLong()).isEqualTo(1L);\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n    assertThat(reader.nextDouble()).isEqualTo(1.0);\r\n    assertThat(reader.nextLong()).isEqualTo(-1L);\r\n    assertThat(reader.nextInt()).isEqualTo(-1);\r\n    assertThat(reader.nextDouble()).isEqualTo(-1.0);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n    assertThat(reader.nextLong()).isEqualTo(Long.MIN_VALUE);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n    assertThat(reader.nextLong()).isEqualTo(Long.MAX_VALUE);\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNumberWithOctalPrefix",
    "start_line": 739,
    "end_line": 762,
    "code": "@Test\r\npublic void testNumberWithOctalPrefix() throws IOException {\r\n    String number = \"01\";\r\n    String expectedLocation = \"line 1 column 1 path $\";\r\n    var e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).peek());\r\n    assertStrictError(e, expectedLocation);\r\n    e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextInt());\r\n    assertStrictError(e, expectedLocation);\r\n    e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextLong());\r\n    assertStrictError(e, expectedLocation);\r\n    e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextDouble());\r\n    assertStrictError(e, expectedLocation);\r\n    e = assertThrows(MalformedJsonException.class, () -> new JsonReader(reader(number)).nextString());\r\n    assertStrictError(e, expectedLocation);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testBooleans",
    "start_line": 764,
    "end_line": 772,
    "code": "@Test\r\npublic void testBooleans() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true,false]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextBoolean()).isFalse();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekingUnquotedStringsPrefixedWithBooleans",
    "start_line": 774,
    "end_line": 786,
    "code": "@Test\r\npublic void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[truey]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n    var e = assertThrows(IllegalStateException.class, () -> reader.nextBoolean());\r\n    assertUnexpectedStructureError(e, \"a boolean\", \"STRING\", \"line 1 column 2 path $[0]\");\r\n    assertThat(reader.nextString()).isEqualTo(\"truey\");\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testMalformedNumbers",
    "start_line": 788,
    "end_line": 831,
    "code": "@Test\r\npublic void testMalformedNumbers() throws IOException {\r\n    assertNotANumber(\"-\");\r\n    assertNotANumber(\".\");\r\n    // plus sign is not allowed for integer part\r\n    assertNotANumber(\"+1\");\r\n    // leading 0 is not allowed for integer part\r\n    assertNotANumber(\"00\");\r\n    assertNotANumber(\"01\");\r\n    // exponent lacks digit\r\n    assertNotANumber(\"e\");\r\n    assertNotANumber(\"0e\");\r\n    assertNotANumber(\".e\");\r\n    assertNotANumber(\"0.e\");\r\n    assertNotANumber(\"-.0e\");\r\n    // no integer\r\n    assertNotANumber(\"e1\");\r\n    assertNotANumber(\".e1\");\r\n    assertNotANumber(\"-e1\");\r\n    // trailing characters\r\n    assertNotANumber(\"1x\");\r\n    assertNotANumber(\"1.1x\");\r\n    assertNotANumber(\"1e1x\");\r\n    assertNotANumber(\"1ex\");\r\n    assertNotANumber(\"1.1ex\");\r\n    assertNotANumber(\"1.1e1x\");\r\n    // fraction has no digit\r\n    assertNotANumber(\"0.\");\r\n    assertNotANumber(\"-0.\");\r\n    assertNotANumber(\"0.e1\");\r\n    assertNotANumber(\"-0.e1\");\r\n    // no leading digit\r\n    assertNotANumber(\".0\");\r\n    assertNotANumber(\"-.0\");\r\n    assertNotANumber(\".0e1\");\r\n    assertNotANumber(\"-.0e1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "assertNotANumber",
    "start_line": 833,
    "end_line": 848,
    "code": "private static void assertNotANumber(String s) throws IOException {\r\n    JsonReader reader = new JsonReader(reader(s));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n    assertThat(reader.nextString()).isEqualTo(s);\r\n    JsonReader strictReader = new JsonReader(reader(s));\r\n    var e = assertThrows(\"Should have failed reading \" + s + \" as double\", MalformedJsonException.class, () -> strictReader.nextDouble());\r\n    assertThat(e).hasMessageThat().startsWith(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekingUnquotedStringsPrefixedWithIntegers",
    "start_line": 850,
    "end_line": 859,
    "code": "@Test\r\npublic void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n    assertThat(reader.nextString()).isEqualTo(\"12.34e5x\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekLongMinValue",
    "start_line": 861,
    "end_line": 868,
    "code": "@Test\r\npublic void testPeekLongMinValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[-9223372036854775808]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThat(reader.nextLong()).isEqualTo(-9223372036854775808L);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekLongMaxValue",
    "start_line": 870,
    "end_line": 877,
    "code": "@Test\r\npublic void testPeekLongMaxValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[9223372036854775807]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThat(reader.nextLong()).isEqualTo(9223372036854775807L);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLongLargerThanMaxLongThatWrapsAround",
    "start_line": 879,
    "end_line": 886,
    "code": "@Test\r\npublic void testLongLargerThanMaxLongThatWrapsAround() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[22233720368547758070]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLongLargerThanMinLongThatWrapsAround",
    "start_line": 888,
    "end_line": 895,
    "code": "@Test\r\npublic void testLongLargerThanMinLongThatWrapsAround() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[-22233720368547758070]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeZero",
    "start_line": 898,
    "end_line": 905,
    "code": "/**\r\n * Issue 1053, negative zero.\r\n */\r\n@Test\r\npublic void testNegativeZero() throws Exception {\r\n    JsonReader reader = new JsonReader(reader(\"[-0]\"));\r\n    reader.setStrictness(Strictness.LEGACY_STRICT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThat(reader.nextString()).isEqualTo(\"-0\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekLargerThanLongMaxValue",
    "start_line": 911,
    "end_line": 919,
    "code": "/**\r\n * This test fails because there's no double for 9223372036854775808, and our long parsing uses\r\n * Double.parseDouble() for fractional values.\r\n */\r\n@Test\r\n@Ignore\r\npublic void testPeekLargerThanLongMaxValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[9223372036854775808]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekLargerThanLongMinValue",
    "start_line": 925,
    "end_line": 936,
    "code": "/**\r\n * This test fails because there's no double for -9223372036854775809, and our long parsing uses\r\n * Double.parseDouble() for fractional values.\r\n */\r\n@Test\r\n@Ignore\r\npublic void testPeekLargerThanLongMinValue() throws IOException {\r\n    @SuppressWarnings(\"FloatingPointLiteralPrecision\")\r\n    double d = -9223372036854775809d;\r\n    JsonReader reader = new JsonReader(reader(\"[-9223372036854775809]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n    assertThat(reader.nextDouble()).isEqualTo(d);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testHighPrecisionLong",
    "start_line": 942,
    "end_line": 950,
    "code": "/**\r\n * This test fails because there's no double for 9223372036854775806, and our long parsing uses\r\n * Double.parseDouble() for fractional values.\r\n */\r\n@Test\r\n@Ignore\r\npublic void testHighPrecisionLong() throws IOException {\r\n    String json = \"[9223372036854775806.000]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    assertThat(reader.nextLong()).isEqualTo(9223372036854775806L);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPeekMuchLargerThanLongMinValue",
    "start_line": 952,
    "end_line": 962,
    "code": "@Test\r\npublic void testPeekMuchLargerThanLongMinValue() throws IOException {\r\n    @SuppressWarnings(\"FloatingPointLiteralPrecision\")\r\n    double d = -92233720368547758080d;\r\n    JsonReader reader = new JsonReader(reader(\"[-92233720368547758080]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(NUMBER);\r\n    assertThrows(NumberFormatException.class, () -> reader.nextLong());\r\n    assertThat(reader.nextDouble()).isEqualTo(d);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testQuotedNumberWithEscape",
    "start_line": 964,
    "end_line": 971,
    "code": "@Test\r\npublic void testQuotedNumberWithEscape() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\\\"12\\\\u00334\\\"]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n    assertThat(reader.nextInt()).isEqualTo(1234);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testMixedCaseLiterals",
    "start_line": 973,
    "end_line": 985,
    "code": "@Test\r\npublic void testMixedCaseLiterals() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[True,TruE,False,FALSE,NULL,nulL]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextBoolean()).isFalse();\r\n    assertThat(reader.nextBoolean()).isFalse();\r\n    reader.nextNull();\r\n    reader.nextNull();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testMissingValue",
    "start_line": 987,
    "end_line": 998,
    "code": "@Test\r\npublic void testMissingValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 6 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPrematureEndOfInput",
    "start_line": 1000,
    "end_line": 1007,
    "code": "@Test\r\npublic void testPrematureEndOfInput() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true,\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThrows(EOFException.class, () -> reader.nextName());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testPrematurelyClosed",
    "start_line": 1009,
    "end_line": 1029,
    "code": "@Test\r\npublic void testPrematurelyClosed() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\r\n    reader.beginObject();\r\n    reader.close();\r\n    var e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n    JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\":[]}\"));\r\n    reader2.close();\r\n    e = assertThrows(IllegalStateException.class, () -> reader2.beginObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n    JsonReader reader3 = new JsonReader(reader(\"{\\\"a\\\":true}\"));\r\n    reader3.beginObject();\r\n    String unused1 = reader3.nextName();\r\n    JsonToken unused2 = reader3.peek();\r\n    reader3.close();\r\n    e = assertThrows(IllegalStateException.class, () -> reader3.nextBoolean());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonReader is closed\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNextFailuresDoNotAdvance",
    "start_line": 1031,
    "end_line": 1073,
    "code": "@Test\r\npublic void testNextFailuresDoNotAdvance() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true}\"));\r\n    reader.beginObject();\r\n    var e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n    assertUnexpectedStructureError(e, \"a string\", \"NAME\", \"line 1 column 3 path $.\");\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n    assertUnexpectedStructureError(e, \"a name\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.beginArray());\r\n    assertUnexpectedStructureError(e, \"BEGIN_ARRAY\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.endArray());\r\n    assertUnexpectedStructureError(e, \"END_ARRAY\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.beginObject());\r\n    assertUnexpectedStructureError(e, \"BEGIN_OBJECT\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.endObject());\r\n    assertUnexpectedStructureError(e, \"END_OBJECT\", \"BOOLEAN\", \"line 1 column 10 path $.a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n    assertUnexpectedStructureError(e, \"a string\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.nextName());\r\n    assertUnexpectedStructureError(e, \"a name\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.beginArray());\r\n    assertUnexpectedStructureError(e, \"BEGIN_ARRAY\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n    e = assertThrows(IllegalStateException.class, () -> reader.endArray());\r\n    assertUnexpectedStructureError(e, \"END_ARRAY\", \"END_OBJECT\", \"line 1 column 11 path $.a\");\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    reader.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testIntegerMismatchFailuresDoNotAdvance",
    "start_line": 1075,
    "end_line": 1082,
    "code": "@Test\r\npublic void testIntegerMismatchFailuresDoNotAdvance() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[1.5]\"));\r\n    reader.beginArray();\r\n    assertThrows(NumberFormatException.class, () -> reader.nextInt());\r\n    assertThat(reader.nextDouble()).isEqualTo(1.5d);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringNullIsNotNull",
    "start_line": 1084,
    "end_line": 1090,
    "code": "@Test\r\npublic void testStringNullIsNotNull() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\\\"null\\\"]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(IllegalStateException.class, () -> reader.nextNull());\r\n    assertUnexpectedStructureError(e, \"null\", \"STRING\", \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNullLiteralIsNotAString",
    "start_line": 1092,
    "end_line": 1098,
    "code": "@Test\r\npublic void testNullLiteralIsNotAString() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[null]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(IllegalStateException.class, () -> reader.nextString());\r\n    assertUnexpectedStructureError(e, \"a string\", \"NULL\", \"line 1 column 6 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNameValueSeparator",
    "start_line": 1100,
    "end_line": 1115,
    "code": "@Test\r\npublic void testStrictNameValueSeparator() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n    reader2.beginObject();\r\n    assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientNameValueSeparator",
    "start_line": 1117,
    "end_line": 1130,
    "code": "@Test\r\npublic void testLenientNameValueSeparator() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNameValueSeparatorWithSkipValue",
    "start_line": 1132,
    "end_line": 1146,
    "code": "@Test\r\npublic void testStrictNameValueSeparatorWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\"=true}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n    JsonReader reader2 = new JsonReader(reader(\"{\\\"a\\\"=>true}\"));\r\n    reader2.beginObject();\r\n    assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testCommentsInStringValue",
    "start_line": 1148,
    "end_line": 1166,
    "code": "@Test\r\npublic void testCommentsInStringValue() throws Exception {\r\n    JsonReader reader = new JsonReader(reader(\"[\\\"// comment\\\"]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(\"// comment\");\r\n    reader.endArray();\r\n    reader = new JsonReader(reader(\"{\\\"a\\\":\\\"#someComment\\\"}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"#someComment\");\r\n    reader.endObject();\r\n    reader = new JsonReader(reader(\"{\\\"#//a\\\":\\\"#some //Comment\\\"}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"#//a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"#some //Comment\");\r\n    reader.endObject();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictComments",
    "start_line": 1168,
    "end_line": 1184,
    "code": "@Test\r\npublic void testStrictComments() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader2 = new JsonReader(reader(\"[# comment \\n true]\"));\r\n    reader2.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader3 = new JsonReader(reader(\"[/* comment */ true]\"));\r\n    reader3.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader3.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientComments",
    "start_line": 1186,
    "end_line": 1202,
    "code": "@Test\r\npublic void testLenientComments() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader = new JsonReader(reader(\"[# comment \\n true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader = new JsonReader(reader(\"[/* comment */ true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictCommentsWithSkipValue",
    "start_line": 1204,
    "end_line": 1220,
    "code": "@Test\r\npublic void testStrictCommentsWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[// comment \\n true]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader2 = new JsonReader(reader(\"[# comment \\n true]\"));\r\n    reader2.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader3 = new JsonReader(reader(\"[/* comment */ true]\"));\r\n    reader3.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnquotedNames",
    "start_line": 1222,
    "end_line": 1228,
    "code": "@Test\r\npublic void testStrictUnquotedNames() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n    reader.beginObject();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n    assertStrictError(e, \"line 1 column 3 path $.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientUnquotedNames",
    "start_line": 1230,
    "end_line": 1236,
    "code": "@Test\r\npublic void testLenientUnquotedNames() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnquotedNamesWithSkipValue",
    "start_line": 1238,
    "end_line": 1244,
    "code": "@Test\r\npublic void testStrictUnquotedNamesWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{a:true}\"));\r\n    reader.beginObject();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSingleQuotedNames",
    "start_line": 1246,
    "end_line": 1252,
    "code": "@Test\r\npublic void testStrictSingleQuotedNames() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n    reader.beginObject();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());\r\n    assertStrictError(e, \"line 1 column 3 path $.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientSingleQuotedNames",
    "start_line": 1254,
    "end_line": 1260,
    "code": "@Test\r\npublic void testLenientSingleQuotedNames() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSingleQuotedNamesWithSkipValue",
    "start_line": 1262,
    "end_line": 1268,
    "code": "@Test\r\npublic void testStrictSingleQuotedNamesWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{'a':true}\"));\r\n    reader.beginObject();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnquotedStrings",
    "start_line": 1270,
    "end_line": 1276,
    "code": "@Test\r\npublic void testStrictUnquotedStrings() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnquotedStringsWithSkipValue",
    "start_line": 1278,
    "end_line": 1284,
    "code": "@Test\r\npublic void testStrictUnquotedStringsWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientUnquotedStrings",
    "start_line": 1286,
    "end_line": 1292,
    "code": "@Test\r\npublic void testLenientUnquotedStrings() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[a]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSingleQuotedStrings",
    "start_line": 1294,
    "end_line": 1300,
    "code": "@Test\r\npublic void testStrictSingleQuotedStrings() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientSingleQuotedStrings",
    "start_line": 1302,
    "end_line": 1308,
    "code": "@Test\r\npublic void testLenientSingleQuotedStrings() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSingleQuotedStringsWithSkipValue",
    "start_line": 1310,
    "end_line": 1316,
    "code": "@Test\r\npublic void testStrictSingleQuotedStringsWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"['a']\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSemicolonDelimitedArray",
    "start_line": 1318,
    "end_line": 1324,
    "code": "@Test\r\npublic void testStrictSemicolonDelimitedArray() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientSemicolonDelimitedArray",
    "start_line": 1326,
    "end_line": 1333,
    "code": "@Test\r\npublic void testLenientSemicolonDelimitedArray() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSemicolonDelimitedArrayWithSkipValue",
    "start_line": 1335,
    "end_line": 1341,
    "code": "@Test\r\npublic void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true;true]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSemicolonDelimitedNameValuePair",
    "start_line": 1343,
    "end_line": 1350,
    "code": "@Test\r\npublic void testStrictSemicolonDelimitedNameValuePair() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientSemicolonDelimitedNameValuePair",
    "start_line": 1352,
    "end_line": 1360,
    "code": "@Test\r\npublic void testLenientSemicolonDelimitedNameValuePair() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.nextName()).isEqualTo(\"b\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictSemicolonDelimitedNameValuePairWithSkipValue",
    "start_line": 1362,
    "end_line": 1369,
    "code": "@Test\r\npublic void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":true;\\\"b\\\":true}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 6 path $.a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnnecessaryArraySeparators",
    "start_line": 1371,
    "end_line": 1397,
    "code": "@Test\r\npublic void testStrictUnnecessaryArraySeparators() throws IOException {\r\n    // The following calls `nextNull()` because a lenient JsonReader would treat redundant array\r\n    // separators as implicit JSON null\r\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextNull());\r\n    assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n    JsonReader reader2 = new JsonReader(reader(\"[,true]\"));\r\n    reader2.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.nextNull());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader3 = new JsonReader(reader(\"[true,]\"));\r\n    reader3.beginArray();\r\n    assertThat(reader3.nextBoolean()).isTrue();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader3.nextNull());\r\n    assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n    JsonReader reader4 = new JsonReader(reader(\"[,]\"));\r\n    reader4.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader4.nextNull());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientUnnecessaryArraySeparators",
    "start_line": 1399,
    "end_line": 1430,
    "code": "@Test\r\npublic void testLenientUnnecessaryArraySeparators() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    // Redundant array separators are treated as implicit JSON null\r\n    reader.nextNull();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader.endArray();\r\n    reader = new JsonReader(reader(\"[,true]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.nextNull();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader.endArray();\r\n    reader = new JsonReader(reader(\"[true,]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader.nextNull();\r\n    reader.endArray();\r\n    reader = new JsonReader(reader(\"[,]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.nextNull();\r\n    reader.nextNull();\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictUnnecessaryArraySeparatorsWithSkipValue",
    "start_line": 1432,
    "end_line": 1455,
    "code": "@Test\r\npublic void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[true,,true]\"));\r\n    reader.beginArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n    JsonReader reader2 = new JsonReader(reader(\"[,true]\"));\r\n    reader2.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n    JsonReader reader3 = new JsonReader(reader(\"[true,]\"));\r\n    reader3.beginArray();\r\n    assertThat(reader3.nextBoolean()).isTrue();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());\r\n    assertStrictError(e, \"line 1 column 8 path $[1]\");\r\n    JsonReader reader4 = new JsonReader(reader(\"[,]\"));\r\n    reader4.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader4.skipValue());\r\n    assertStrictError(e, \"line 1 column 3 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictMultipleTopLevelValues",
    "start_line": 1457,
    "end_line": 1464,
    "code": "@Test\r\npublic void testStrictMultipleTopLevelValues() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[] []\"));\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertStrictError(e, \"line 1 column 5 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientMultipleTopLevelValues",
    "start_line": 1466,
    "end_line": 1476,
    "code": "@Test\r\npublic void testLenientMultipleTopLevelValues() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[] true {}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    reader.beginObject();\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictMultipleTopLevelValuesWithSkipValue",
    "start_line": 1478,
    "end_line": 1485,
    "code": "@Test\r\npublic void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[] []\"));\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 5 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelValueTypes",
    "start_line": 1487,
    "end_line": 1513,
    "code": "@Test\r\npublic void testTopLevelValueTypes() throws IOException {\r\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\r\n    assertThat(reader1.nextBoolean()).isTrue();\r\n    assertThat(reader1.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\r\n    assertThat(reader2.nextBoolean()).isFalse();\r\n    assertThat(reader2.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\r\n    assertThat(reader3.peek()).isEqualTo(JsonToken.NULL);\r\n    reader3.nextNull();\r\n    assertThat(reader3.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\r\n    assertThat(reader4.nextInt()).isEqualTo(123);\r\n    assertThat(reader4.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\r\n    assertThat(reader5.nextDouble()).isEqualTo(123.4);\r\n    assertThat(reader5.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\r\n    assertThat(reader6.nextString()).isEqualTo(\"a\");\r\n    assertThat(reader6.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelValueTypeWithSkipValue",
    "start_line": 1515,
    "end_line": 1520,
    "code": "@Test\r\npublic void testTopLevelValueTypeWithSkipValue() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"true\"));\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNonExecutePrefix",
    "start_line": 1522,
    "end_line": 1527,
    "code": "@Test\r\npublic void testStrictNonExecutePrefix() {\r\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.beginArray());\r\n    assertStrictError(e, \"line 1 column 1 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictNonExecutePrefixWithSkipValue",
    "start_line": 1529,
    "end_line": 1534,
    "code": "@Test\r\npublic void testStrictNonExecutePrefixWithSkipValue() {\r\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());\r\n    assertStrictError(e, \"line 1 column 1 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientNonExecutePrefix",
    "start_line": 1536,
    "end_line": 1543,
    "code": "@Test\r\npublic void testLenientNonExecutePrefix() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\")]}'\\n []\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientNonExecutePrefixWithLeadingWhitespace",
    "start_line": 1545,
    "end_line": 1552,
    "code": "@Test\r\npublic void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"\\r\\n \\t)]}'\\n []\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientPartialNonExecutePrefix",
    "start_line": 1554,
    "end_line": 1565,
    "code": "@Test\r\npublic void testLenientPartialNonExecutePrefix() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\")]}' []\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    assertThat(reader.nextString()).isEqualTo(\")\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Unexpected value at line 1 column 3 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testBomIgnoredAsFirstCharacterOfDocument",
    "start_line": 1567,
    "end_line": 1572,
    "code": "@Test\r\npublic void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"\\ufeff[]\"));\r\n    reader.beginArray();\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testBomForbiddenAsOtherCharacterInDocument",
    "start_line": 1574,
    "end_line": 1580,
    "code": "@Test\r\npublic void testBomForbiddenAsOtherCharacterInDocument() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\\ufeff]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.endArray());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPosition",
    "start_line": 1582,
    "end_line": 1586,
    "code": "@SuppressWarnings(\"UngroupedOverloads\")\r\n@Test\r\npublic void testFailWithPosition() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\", \"[\\n\\n\\n\\n\\n\\\"a\\\",}]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionGreaterThanBufferSize",
    "start_line": 1588,
    "end_line": 1593,
    "code": "@Test\r\npublic void testFailWithPositionGreaterThanBufferSize() throws IOException {\r\n    String spaces = repeat(' ', 8192);\r\n    testFailWithPosition(\"Expected value at line 6 column 5 path $[1]\", \"[\\n\\n\" + spaces + \"\\n\\n\\n\\\"a\\\",}]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionOverSlashSlashEndOfLineComment",
    "start_line": 1595,
    "end_line": 1599,
    "code": "@Test\r\npublic void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\", \"\\n// foo\\n\\n//bar\\r\\n[\\\"a\\\",}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionOverHashEndOfLineComment",
    "start_line": 1601,
    "end_line": 1605,
    "code": "@Test\r\npublic void testFailWithPositionOverHashEndOfLineComment() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 5 column 6 path $[1]\", \"\\n# foo\\n\\n#bar\\r\\n[\\\"a\\\",}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionOverCStyleComment",
    "start_line": 1607,
    "end_line": 1611,
    "code": "@Test\r\npublic void testFailWithPositionOverCStyleComment() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 6 column 12 path $[1]\", \"\\n\\n/* foo\\n*\\n*\\r\\nbar */[\\\"a\\\",}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionOverQuotedString",
    "start_line": 1613,
    "end_line": 1617,
    "code": "@Test\r\npublic void testFailWithPositionOverQuotedString() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\", \"[\\\"foo\\nbar\\r\\nbaz\\n\\\",\\n  }\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionOverUnquotedString",
    "start_line": 1619,
    "end_line": 1622,
    "code": "@Test\r\npublic void testFailWithPositionOverUnquotedString() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 5 column 2 path $[1]\", \"[\\n\\nabcd\\n\\n,}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithEscapedNewlineCharacter",
    "start_line": 1624,
    "end_line": 1627,
    "code": "@Test\r\npublic void testFailWithEscapedNewlineCharacter() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 5 column 3 path $[1]\", \"[\\n\\n\\\"\\\\\\n\\n\\\",}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionIsOffsetByBom",
    "start_line": 1629,
    "end_line": 1632,
    "code": "@Test\r\npublic void testFailWithPositionIsOffsetByBom() throws IOException {\r\n    testFailWithPosition(\"Expected value at line 1 column 6 path $[1]\", \"\\ufeff[\\\"a\\\",}]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPosition",
    "start_line": 1634,
    "end_line": 1660,
    "code": "private static void testFailWithPosition(String message, String json) throws IOException {\r\n    // Validate that it works reading the string normally.\r\n    JsonReader reader1 = new JsonReader(reader(json));\r\n    reader1.setStrictness(Strictness.LENIENT);\r\n    reader1.beginArray();\r\n    String unused1 = reader1.nextString();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader1.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(message + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    // Also validate that it works when skipping.\r\n    JsonReader reader2 = new JsonReader(reader(json));\r\n    reader2.setStrictness(Strictness.LENIENT);\r\n    reader2.beginArray();\r\n    reader2.skipValue();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader2.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(message + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testFailWithPositionDeepPath",
    "start_line": 1662,
    "end_line": 1678,
    "code": "@Test\r\npublic void testFailWithPositionDeepPath() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[1,{\\\"a\\\":[2,3,}\"));\r\n    reader.beginArray();\r\n    int unused1 = reader.nextInt();\r\n    reader.beginObject();\r\n    String unused2 = reader.nextName();\r\n    reader.beginArray();\r\n    int unused3 = reader.nextInt();\r\n    int unused4 = reader.nextInt();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 14 path $[1].a[2]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictVeryLongNumber",
    "start_line": 1680,
    "end_line": 1686,
    "code": "@Test\r\npublic void testStrictVeryLongNumber() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\r\n    reader.beginArray();\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextDouble());\r\n    assertStrictError(e, \"line 1 column 2 path $[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientVeryLongNumber",
    "start_line": 1688,
    "end_line": 1697,
    "code": "@Test\r\npublic void testLenientVeryLongNumber() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[0.\" + repeat('9', 8192) + \"]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n    assertThat(reader.nextDouble()).isEqualTo(1d);\r\n    reader.endArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testVeryLongUnquotedLiteral",
    "start_line": 1699,
    "end_line": 1707,
    "code": "@Test\r\npublic void testVeryLongUnquotedLiteral() throws IOException {\r\n    String literal = \"a\" + repeat('b', 8192) + \"c\";\r\n    JsonReader reader = new JsonReader(reader(\"[\" + literal + \"]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(literal);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testDeeplyNestedArrays",
    "start_line": 1709,
    "end_line": 1727,
    "code": "@Test\r\npublic void testDeeplyNestedArrays() throws IOException {\r\n    // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer\r\n    JsonReader reader = new JsonReader(reader(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\"));\r\n    for (int i = 0; i < 40; i++) {\r\n        reader.beginArray();\r\n    }\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\" + \"[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\");\r\n    for (int i = 0; i < 40; i++) {\r\n        reader.endArray();\r\n    }\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testDeeplyNestedObjects",
    "start_line": 1729,
    "end_line": 1751,
    "code": "@Test\r\npublic void testDeeplyNestedObjects() throws IOException {\r\n    // Build a JSON document structured like {\"a\":{\"a\":{\"a\":{\"a\":true}}}}, but 40 levels deep\r\n    String json = \"true\";\r\n    for (int i = 0; i < 40; i++) {\r\n        json = String.format(\"{\\\"a\\\":%s}\", json);\r\n    }\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    for (int i = 0; i < 40; i++) {\r\n        reader.beginObject();\r\n        assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    }\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\" + \".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a\");\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    for (int i = 0; i < 40; i++) {\r\n        reader.endObject();\r\n    }\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNestingLimitDefault",
    "start_line": 1753,
    "end_line": 1774,
    "code": "@Test\r\npublic void testNestingLimitDefault() throws IOException {\r\n    int defaultLimit = JsonReader.DEFAULT_NESTING_LIMIT;\r\n    String json = repeat('[', defaultLimit + 1);\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    assertThat(reader.getNestingLimit()).isEqualTo(defaultLimit);\r\n    for (int i = 0; i < defaultLimit; i++) {\r\n        reader.beginArray();\r\n    }\r\n    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.beginArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit \" + defaultLimit + \" reached at line 1 column \" + (defaultLimit + 2) + \" path $\" + \"[0]\".repeat(defaultLimit));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testNestingLimit",
    "start_line": 1778,
    "end_line": 1833,
    "code": "// Note: The column number reported in the expected exception messages is slightly off and points\r\n// behind instead of directly at the '[' or '{'\r\n@Test\r\npublic void testNestingLimit() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[{\\\"a\\\":1}]\"));\r\n    reader.setNestingLimit(2);\r\n    assertThat(reader.getNestingLimit()).isEqualTo(2);\r\n    reader.beginArray();\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextInt()).isEqualTo(1);\r\n    reader.endObject();\r\n    reader.endArray();\r\n    JsonReader reader2 = new JsonReader(reader(\"[{\\\"a\\\":[]}]\"));\r\n    reader2.setNestingLimit(2);\r\n    reader2.beginArray();\r\n    reader2.beginObject();\r\n    assertThat(reader2.nextName()).isEqualTo(\"a\");\r\n    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader2.beginArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 2 reached at line 1 column 8 path $[0].a\");\r\n    JsonReader reader3 = new JsonReader(reader(\"[]\"));\r\n    reader3.setNestingLimit(0);\r\n    e = assertThrows(MalformedJsonException.class, () -> reader3.beginArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 0 reached at line 1 column 2 path $\");\r\n    JsonReader reader4 = new JsonReader(reader(\"[]\"));\r\n    reader4.setNestingLimit(0);\r\n    // Currently also checked when skipping values\r\n    e = assertThrows(MalformedJsonException.class, () -> reader4.skipValue());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 0 reached at line 1 column 2 path $\");\r\n    JsonReader reader5 = new JsonReader(reader(\"1\"));\r\n    reader5.setNestingLimit(0);\r\n    // Reading value other than array or object should be allowed\r\n    assertThat(reader5.nextInt()).isEqualTo(1);\r\n    // Test multiple top-level arrays\r\n    JsonReader reader6 = new JsonReader(reader(\"[] [[]]\"));\r\n    reader6.setStrictness(Strictness.LENIENT);\r\n    reader6.setNestingLimit(1);\r\n    reader6.beginArray();\r\n    reader6.endArray();\r\n    reader6.beginArray();\r\n    e = assertThrows(MalformedJsonException.class, () -> reader6.beginArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting limit 1 reached at line 1 column 6 path $[0]\");\r\n    JsonReader reader7 = new JsonReader(reader(\"[]\"));\r\n    IllegalArgumentException argException = assertThrows(IllegalArgumentException.class, () -> reader7.setNestingLimit(-1));\r\n    assertThat(argException).hasMessageThat().isEqualTo(\"Invalid nesting limit: -1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringEndingInSlash",
    "start_line": 1836,
    "end_line": 1846,
    "code": "// http://code.google.com/p/google-gson/issues/detail?id=409\r\n@Test\r\npublic void testStringEndingInSlash() {\r\n    JsonReader reader = new JsonReader(reader(\"/\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testDocumentWithCommentEndingInSlash",
    "start_line": 1848,
    "end_line": 1858,
    "code": "@Test\r\npublic void testDocumentWithCommentEndingInSlash() {\r\n    JsonReader reader = new JsonReader(reader(\"/* foo *//\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 10 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringWithLeadingSlash",
    "start_line": 1860,
    "end_line": 1870,
    "code": "@Test\r\npublic void testStringWithLeadingSlash() {\r\n    JsonReader reader = new JsonReader(reader(\"/x\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected value at line 1 column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testUnterminatedObject",
    "start_line": 1872,
    "end_line": 1885,
    "code": "@Test\r\npublic void testUnterminatedObject() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"android\\\"x\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"android\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Unterminated object at line 1 column 16 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testVeryLongQuotedString",
    "start_line": 1887,
    "end_line": 1897,
    "code": "@Test\r\npublic void testVeryLongQuotedString() throws IOException {\r\n    char[] stringChars = new char[1024 * 16];\r\n    Arrays.fill(stringChars, 'x');\r\n    String string = new String(stringChars);\r\n    String json = \"[\\\"\" + string + \"\\\"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(string);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testVeryLongUnquotedString",
    "start_line": 1899,
    "end_line": 1910,
    "code": "@Test\r\npublic void testVeryLongUnquotedString() throws IOException {\r\n    char[] stringChars = new char[1024 * 16];\r\n    Arrays.fill(stringChars, 'x');\r\n    String string = new String(stringChars);\r\n    String json = \"[\" + string + \"]\";\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(string);\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testVeryLongUnterminatedString",
    "start_line": 1912,
    "end_line": 1923,
    "code": "@Test\r\npublic void testVeryLongUnterminatedString() throws IOException {\r\n    char[] stringChars = new char[1024 * 16];\r\n    Arrays.fill(stringChars, 'x');\r\n    String string = new String(stringChars);\r\n    String json = \"[\" + string;\r\n    JsonReader reader = new JsonReader(reader(json));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.nextString()).isEqualTo(string);\r\n    assertThrows(EOFException.class, () -> reader.peek());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipVeryLongUnquotedString",
    "start_line": 1925,
    "end_line": 1932,
    "code": "@Test\r\npublic void testSkipVeryLongUnquotedString() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\" + repeat('x', 8192) + \"]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.skipValue();\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipTopLevelUnquotedString",
    "start_line": 1934,
    "end_line": 1940,
    "code": "@Test\r\npublic void testSkipTopLevelUnquotedString() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(repeat('x', 8192)));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipVeryLongQuotedString",
    "start_line": 1942,
    "end_line": 1948,
    "code": "@Test\r\npublic void testSkipVeryLongQuotedString() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\\\"\" + repeat('x', 8192) + \"\\\"]\"));\r\n    reader.beginArray();\r\n    reader.skipValue();\r\n    reader.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testSkipTopLevelQuotedString",
    "start_line": 1950,
    "end_line": 1956,
    "code": "@Test\r\npublic void testSkipTopLevelQuotedString() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"\\\"\" + repeat('x', 8192) + \"\\\"\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.skipValue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringAsNumberWithTruncatedExponent",
    "start_line": 1958,
    "end_line": 1964,
    "code": "@Test\r\npublic void testStringAsNumberWithTruncatedExponent() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[123e]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringAsNumberWithDigitAndNonDigitExponent",
    "start_line": 1966,
    "end_line": 1972,
    "code": "@Test\r\npublic void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[123e4b]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStringAsNumberWithNonDigitExponent",
    "start_line": 1974,
    "end_line": 1980,
    "code": "@Test\r\npublic void testStringAsNumberWithNonDigitExponent() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[123eb]\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(STRING);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyStringName",
    "start_line": 1982,
    "end_line": 1995,
    "code": "@Test\r\npublic void testEmptyStringName() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"\\\":true}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    assertThat(reader.peek()).isEqualTo(BEGIN_OBJECT);\r\n    reader.beginObject();\r\n    assertThat(reader.peek()).isEqualTo(NAME);\r\n    assertThat(reader.nextName()).isEqualTo(\"\");\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.BOOLEAN);\r\n    assertThat(reader.nextBoolean()).isTrue();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_OBJECT);\r\n    reader.endObject();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testStrictExtraCommasInMaps",
    "start_line": 1997,
    "end_line": 2009,
    "code": "@Test\r\npublic void testStrictExtraCommasInMaps() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"b\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected name at line 1 column 11 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testLenientExtraCommasInMaps",
    "start_line": 2011,
    "end_line": 2024,
    "code": "@Test\r\npublic void testLenientExtraCommasInMaps() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"{\\\"a\\\":\\\"b\\\",}\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginObject();\r\n    assertThat(reader.nextName()).isEqualTo(\"a\");\r\n    assertThat(reader.nextString()).isEqualTo(\"b\");\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected name at line 1 column 11 path $.a\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "repeat",
    "start_line": 2026,
    "end_line": 2030,
    "code": "private static String repeat(char c, int count) {\r\n    char[] array = new char[count];\r\n    Arrays.fill(array, c);\r\n    return new String(array);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testMalformedDocuments",
    "start_line": 2032,
    "end_line": 2076,
    "code": "@Test\r\npublic void testMalformedDocuments() throws IOException {\r\n    assertDocument(\"{]\", BEGIN_OBJECT, MalformedJsonException.class);\r\n    assertDocument(\"{,\", BEGIN_OBJECT, MalformedJsonException.class);\r\n    assertDocument(\"{{\", BEGIN_OBJECT, MalformedJsonException.class);\r\n    assertDocument(\"{[\", BEGIN_OBJECT, MalformedJsonException.class);\r\n    assertDocument(\"{:\", BEGIN_OBJECT, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\":}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"::\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\":,\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=>}\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\":\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\"=>\", BEGIN_OBJECT, NAME, STRING, MalformedJsonException.class);\r\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\"=>\\\"string\\\",\\\"name\\\"\", BEGIN_OBJECT, NAME, STRING, NAME);\r\n    assertDocument(\"[}\", BEGIN_ARRAY, MalformedJsonException.class);\r\n    assertDocument(\"[,]\", BEGIN_ARRAY, NULL, NULL, END_ARRAY);\r\n    assertDocument(\"{\", BEGIN_OBJECT, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\"\", BEGIN_OBJECT, NAME, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\",\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{'name'\", BEGIN_OBJECT, NAME, EOFException.class);\r\n    assertDocument(\"{'name',\", BEGIN_OBJECT, NAME, MalformedJsonException.class);\r\n    assertDocument(\"{name\", BEGIN_OBJECT, NAME, EOFException.class);\r\n    assertDocument(\"[\", BEGIN_ARRAY, EOFException.class);\r\n    assertDocument(\"[string\", BEGIN_ARRAY, STRING, EOFException.class);\r\n    assertDocument(\"[\\\"string\\\"\", BEGIN_ARRAY, STRING, EOFException.class);\r\n    assertDocument(\"['string'\", BEGIN_ARRAY, STRING, EOFException.class);\r\n    assertDocument(\"[123\", BEGIN_ARRAY, NUMBER, EOFException.class);\r\n    assertDocument(\"[123,\", BEGIN_ARRAY, NUMBER, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":123\", BEGIN_OBJECT, NAME, NUMBER, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":123,\", BEGIN_OBJECT, NAME, NUMBER, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":\\\"string\\\"\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":\\\"string\\\",\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":'string'\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":'string',\", BEGIN_OBJECT, NAME, STRING, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":false\", BEGIN_OBJECT, NAME, BOOLEAN, EOFException.class);\r\n    assertDocument(\"{\\\"name\\\":false,,\", BEGIN_OBJECT, NAME, BOOLEAN, MalformedJsonException.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testUnterminatedStringFailure",
    "start_line": 2082,
    "end_line": 2094,
    "code": "/**\r\n * This test behaves slightly differently in Gson 2.2 and earlier. It fails during peek rather\r\n * than during nextString().\r\n */\r\n@Test\r\npublic void testUnterminatedStringFailure() throws IOException {\r\n    JsonReader reader = new JsonReader(reader(\"[\\\"string\"));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    assertThat(reader.peek()).isEqualTo(JsonToken.STRING);\r\n    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Unterminated string at line 1 column 9 path $[0]\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "testReadAcrossBuffers",
    "start_line": 2097,
    "end_line": 2108,
    "code": "/**\r\n * Regression test for an issue with buffer filling and consumeNonExecutePrefix.\r\n */\r\n@Test\r\npublic void testReadAcrossBuffers() throws IOException {\r\n    StringBuilder sb = new StringBuilder(\"#\");\r\n    for (int i = 0; i < JsonReader.BUFFER_SIZE - 3; i++) {\r\n        sb.append(' ');\r\n    }\r\n    sb.append(\"\\n)]}'\\n3\");\r\n    JsonReader reader = new JsonReader(reader(sb.toString()));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    JsonToken token = reader.peek();\r\n    assertThat(token).isEqualTo(JsonToken.NUMBER);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "assertStrictError",
    "start_line": 2110,
    "end_line": 2118,
    "code": "private static void assertStrictError(MalformedJsonException exception, String expectedLocation) {\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at \" + expectedLocation + \"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "assertUnexpectedStructureError",
    "start_line": 2120,
    "end_line": 2138,
    "code": "private static void assertUnexpectedStructureError(IllegalStateException exception, String expectedToken, String actualToken, String expectedLocation) {\r\n    String troubleshootingId = actualToken.equals(\"NULL\") ? \"adapter-not-null-safe\" : \"unexpected-json-structure\";\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Expected \" + expectedToken + \" but was \" + actualToken + \" at \" + expectedLocation + \"\\nSee https://github.com/google/gson/blob/main/Troubleshooting.md#\" + troubleshootingId);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "assertDocument",
    "start_line": 2140,
    "end_line": 2170,
    "code": "private static void assertDocument(String document, Object... expectations) throws IOException {\r\n    JsonReader reader = new JsonReader(reader(document));\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    for (Object expectation : expectations) {\r\n        if (expectation == BEGIN_OBJECT) {\r\n            reader.beginObject();\r\n        } else if (expectation == BEGIN_ARRAY) {\r\n            reader.beginArray();\r\n        } else if (expectation == END_OBJECT) {\r\n            reader.endObject();\r\n        } else if (expectation == END_ARRAY) {\r\n            reader.endArray();\r\n        } else if (expectation == NAME) {\r\n            assertThat(reader.nextName()).isEqualTo(\"name\");\r\n        } else if (expectation == BOOLEAN) {\r\n            assertThat(reader.nextBoolean()).isFalse();\r\n        } else if (expectation == STRING) {\r\n            assertThat(reader.nextString()).isEqualTo(\"string\");\r\n        } else if (expectation == NUMBER) {\r\n            assertThat(reader.nextInt()).isEqualTo(123);\r\n        } else if (expectation == NULL) {\r\n            reader.nextNull();\r\n        } else if (expectation instanceof Class && Exception.class.isAssignableFrom((Class<?>) expectation)) {\r\n            var expected = assertThrows(Exception.class, () -> reader.peek());\r\n            assertThat(expected.getClass()).isEqualTo((Class<?>) expectation);\r\n        } else {\r\n            throw new AssertionError(\"Unsupported expectation value: \" + expectation);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  },
  {
    "type": "method",
    "name": "reader",
    "start_line": 2173,
    "end_line": 2190,
    "code": "/**\r\n * Returns a reader that returns one character at a time.\r\n */\r\nprivate static Reader reader(String s) {\r\n    /* if (true) */\r\n    return new StringReader(s);\r\n    /* return new Reader() {\r\n      int position = 0;\r\n      @Override public int read(char[] buffer, int offset, int count) throws IOException {\r\n        if (position == s.length()) {\r\n          return -1;\r\n        } else if (count > 0) {\r\n          buffer[offset] = s.charAt(position++);\r\n          return 1;\r\n        } else {\r\n          throw new IllegalArgumentException();\r\n        }\r\n      }\r\n      @Override public void close() throws IOException {\r\n      }\r\n    }; */\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderTest.java"
  }
]