[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.GsonTypes",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.internal.GsonTypes;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 24,
    "end_line": 24,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "class",
    "name": "RecursiveTypesResolveTest",
    "start_line": 35,
    "end_line": 104,
    "code": "/**\r\n * Test fixes for infinite recursion on {@link GsonTypes#resolve(java.lang.reflect.Type, Class,\r\n * java.lang.reflect.Type)}, described at <a href=\"https://github.com/google/gson/issues/440\">Issue\r\n * #440</a> and similar issues.\r\n *\r\n * <p>These tests originally caused {@link StackOverflowError} because of infinite recursion on\r\n * attempts to resolve generics on types, with intermediate types like {@code Foo2<? extends ? super\r\n * ? extends ... ? extends A>}\r\n */\r\npublic class RecursiveTypesResolveTest {\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static class Foo1<A> {\r\n\r\n        public Foo2<? extends A> foo2;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static class Foo2<B> {\r\n\r\n        public Foo1<? super B> foo1;\r\n    }\r\n\r\n    /**\r\n     * Test simplest case of recursion.\r\n     */\r\n    @Test\r\n    public void testRecursiveResolveSimple() {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);\r\n        assertThat(adapter).isNotNull();\r\n    }\r\n\r\n    /**\r\n     * Tests below check the behavior of the methods changed for the fix.\r\n     */\r\n    @Test\r\n    public void testDoubleSupertype() {\r\n        assertThat(GsonTypes.supertypeOf(GsonTypes.supertypeOf(Number.class))).isEqualTo(GsonTypes.supertypeOf(Number.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleSubtype() {\r\n        assertThat(GsonTypes.subtypeOf(GsonTypes.subtypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Number.class));\r\n    }\r\n\r\n    @Test\r\n    public void testSuperSubtype() {\r\n        assertThat(GsonTypes.supertypeOf(GsonTypes.subtypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Object.class));\r\n    }\r\n\r\n    @Test\r\n    public void testSubSupertype() {\r\n        assertThat(GsonTypes.subtypeOf(GsonTypes.supertypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Object.class));\r\n    }\r\n\r\n    /**\r\n     * Tests for recursion while resolving type variables.\r\n     */\r\n    @SuppressWarnings(\"unused\")\r\n    private static class TestType<X> {\r\n\r\n        TestType<? super X> superType;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static class TestType2<X, Y> {\r\n\r\n        TestType2<? super Y, ? super X> superReversedType;\r\n    }\r\n\r\n    @Test\r\n    public void testRecursiveTypeVariablesResolve1() {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);\r\n        assertThat(adapter).isNotNull();\r\n    }\r\n\r\n    @Test\r\n    public void testRecursiveTypeVariablesResolve12() {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);\r\n        assertThat(adapter).isNotNull();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testRecursiveResolveSimple",
    "start_line": 48,
    "end_line": 53,
    "code": "/**\r\n * Test simplest case of recursion.\r\n */\r\n@Test\r\npublic void testRecursiveResolveSimple() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);\r\n    assertThat(adapter).isNotNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleSupertype",
    "start_line": 56,
    "end_line": 60,
    "code": "/**\r\n * Tests below check the behavior of the methods changed for the fix.\r\n */\r\n@Test\r\npublic void testDoubleSupertype() {\r\n    assertThat(GsonTypes.supertypeOf(GsonTypes.supertypeOf(Number.class))).isEqualTo(GsonTypes.supertypeOf(Number.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleSubtype",
    "start_line": 62,
    "end_line": 66,
    "code": "@Test\r\npublic void testDoubleSubtype() {\r\n    assertThat(GsonTypes.subtypeOf(GsonTypes.subtypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Number.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testSuperSubtype",
    "start_line": 68,
    "end_line": 72,
    "code": "@Test\r\npublic void testSuperSubtype() {\r\n    assertThat(GsonTypes.supertypeOf(GsonTypes.subtypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Object.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testSubSupertype",
    "start_line": 74,
    "end_line": 78,
    "code": "@Test\r\npublic void testSubSupertype() {\r\n    assertThat(GsonTypes.subtypeOf(GsonTypes.supertypeOf(Number.class))).isEqualTo(GsonTypes.subtypeOf(Object.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testRecursiveTypeVariablesResolve1",
    "start_line": 91,
    "end_line": 96,
    "code": "@Test\r\npublic void testRecursiveTypeVariablesResolve1() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);\r\n    assertThat(adapter).isNotNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  },
  {
    "type": "method",
    "name": "testRecursiveTypeVariablesResolve12",
    "start_line": 98,
    "end_line": 103,
    "code": "@Test\r\npublic void testRecursiveTypeVariablesResolve12() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);\r\n    assertThat(adapter).isNotNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\RecursiveTypesResolveTest.java"
  }
]