[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.base.Splitter",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.common.base.Splitter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.InstanceCreator",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.InstanceCreator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithCustomTypeConverter",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Date",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.Date;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashMap",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.util.HashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashSet",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.util.HashSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 40,
    "end_line": 40,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Set",
    "start_line": 41,
    "end_line": 41,
    "code": "import java.util.Set;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 42,
    "end_line": 42,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Ignore",
    "start_line": 43,
    "end_line": 43,
    "code": "import org.junit.Ignore;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 44,
    "end_line": 44,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "class",
    "name": "CustomTypeAdaptersTest",
    "start_line": 52,
    "end_line": 519,
    "code": "/**\r\n * Functional tests for the support of custom serializer and deserializers.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class CustomTypeAdaptersTest {\r\n\r\n    private GsonBuilder builder;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        builder = new GsonBuilder();\r\n    }\r\n\r\n    @Test\r\n    public void testCustomSerializers() {\r\n        Gson gson = builder.registerTypeAdapter(ClassWithCustomTypeConverter.class, (JsonSerializer<ClassWithCustomTypeConverter>) (src, typeOfSrc, context) -> {\r\n            JsonObject json = new JsonObject();\r\n            json.addProperty(\"bag\", 5);\r\n            json.addProperty(\"value\", 25);\r\n            return json;\r\n        }).create();\r\n        ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\r\n        assertThat(gson.toJson(target)).isEqualTo(\"{\\\"bag\\\":5,\\\"value\\\":25}\");\r\n    }\r\n\r\n    @Test\r\n    public void testCustomDeserializers() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithCustomTypeConverter.class, (JsonDeserializer<ClassWithCustomTypeConverter>) (json, typeOfT, context) -> {\r\n            JsonObject jsonObject = json.getAsJsonObject();\r\n            int value = jsonObject.get(\"bag\").getAsInt();\r\n            return new ClassWithCustomTypeConverter(new BagOfPrimitives(value, value, false, \"\"), value);\r\n        }).create();\r\n        String json = \"{\\\"bag\\\":5,\\\"value\\\":25}\";\r\n        ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\r\n        assertThat(target.getBag().getIntValue()).isEqualTo(5);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void disable_testCustomSerializersOfSelf() {\r\n        Gson gson = createGsonObjectWithFooTypeAdapter();\r\n        Gson basicGson = new Gson();\r\n        Foo newFooObject = new Foo(1, 2L);\r\n        String jsonFromCustomSerializer = gson.toJson(newFooObject);\r\n        String jsonFromGson = basicGson.toJson(newFooObject);\r\n        assertThat(jsonFromCustomSerializer).isEqualTo(jsonFromGson);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void disable_testCustomDeserializersOfSelf() {\r\n        Gson gson = createGsonObjectWithFooTypeAdapter();\r\n        Gson basicGson = new Gson();\r\n        Foo expectedFoo = new Foo(1, 2L);\r\n        String json = basicGson.toJson(expectedFoo);\r\n        Foo newFooObject = gson.fromJson(json, Foo.class);\r\n        assertThat(newFooObject.key).isEqualTo(expectedFoo.key);\r\n        assertThat(newFooObject.value).isEqualTo(expectedFoo.value);\r\n    }\r\n\r\n    @Test\r\n    public void testCustomNestedSerializers() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, (JsonSerializer<BagOfPrimitives>) (src, typeOfSrc, context) -> new JsonPrimitive(6)).create();\r\n        ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\r\n        assertThat(gson.toJson(target)).isEqualTo(\"{\\\"bag\\\":6,\\\"value\\\":10}\");\r\n    }\r\n\r\n    @Test\r\n    public void testCustomNestedDeserializers() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, (JsonDeserializer<BagOfPrimitives>) (json, typeOfT, context) -> {\r\n            int value = json.getAsInt();\r\n            return new BagOfPrimitives(value, value, false, \"\");\r\n        }).create();\r\n        String json = \"{\\\"bag\\\":7,\\\"value\\\":25}\";\r\n        ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\r\n        assertThat(target.getBag().getIntValue()).isEqualTo(7);\r\n    }\r\n\r\n    @Test\r\n    public void testCustomTypeAdapterDoesNotAppliesToSubClasses() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> {\r\n            JsonObject json = new JsonObject();\r\n            json.addProperty(\"value\", src.baseValue);\r\n            return json;\r\n        }).create();\r\n        Base b = new Base();\r\n        String json = gson.toJson(b);\r\n        assertThat(json).contains(\"value\");\r\n        b = new Derived();\r\n        json = gson.toJson(b);\r\n        assertThat(json).contains(\"derivedValue\");\r\n    }\r\n\r\n    @Test\r\n    public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> {\r\n            JsonObject json = new JsonObject();\r\n            json.addProperty(\"value\", src.baseValue);\r\n            return json;\r\n        }).create();\r\n        Base b = new Base();\r\n        String json = gson.toJson(b);\r\n        assertThat(json).contains(\"value\");\r\n        b = new Derived();\r\n        json = gson.toJson(b, Base.class);\r\n        assertThat(json).contains(\"value\");\r\n        assertThat(json).doesNotContain(\"derivedValue\");\r\n    }\r\n\r\n    private static class Base {\r\n\r\n        int baseValue = 2;\r\n    }\r\n\r\n    private static class Derived extends Base {\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        int derivedValue = 3;\r\n    }\r\n\r\n    private Gson createGsonObjectWithFooTypeAdapter() {\r\n        return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();\r\n    }\r\n\r\n    public static class Foo {\r\n\r\n        private final int key;\r\n\r\n        private final long value;\r\n\r\n        public Foo() {\r\n            this(0, 0L);\r\n        }\r\n\r\n        public Foo(int key, long value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    public static final class FooTypeAdapter implements JsonSerializer<Foo>, JsonDeserializer<Foo> {\r\n\r\n        @Override\r\n        public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return context.deserialize(json, typeOfT);\r\n        }\r\n\r\n        @Override\r\n        public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return context.serialize(src, typeOfSrc);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testCustomSerializerInvokedForPrimitives() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(boolean.class, (JsonSerializer<Boolean>) (value, type, context) -> new JsonPrimitive(value ? 1 : 0)).create();\r\n        assertThat(gson.toJson(true, boolean.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(true, Boolean.class)).isEqualTo(\"true\");\r\n    }\r\n\r\n    @Test\r\n    public void testCustomDeserializerInvokedForPrimitives() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(boolean.class, (JsonDeserializer<Boolean>) (json, type, context) -> json.getAsInt() != 0).create();\r\n        assertThat(gson.fromJson(\"1\", boolean.class)).isEqualTo(true);\r\n        assertThat(gson.fromJson(\"true\", Boolean.class)).isEqualTo(true);\r\n    }\r\n\r\n    @Test\r\n    public void testCustomByteArraySerializer() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(byte[].class, (JsonSerializer<byte[]>) (src, typeOfSrc, context) -> {\r\n            StringBuilder sb = new StringBuilder(src.length);\r\n            for (byte b : src) {\r\n                sb.append(b);\r\n            }\r\n            return new JsonPrimitive(sb.toString());\r\n        }).create();\r\n        byte[] data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n        String json = gson.toJson(data);\r\n        assertThat(json).isEqualTo(\"\\\"0123456789\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testCustomByteArrayDeserializerAndInstanceCreator() {\r\n        GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class, (JsonDeserializer<byte[]>) (json, typeOfT, context) -> {\r\n            String str = json.getAsString();\r\n            byte[] data = new byte[str.length()];\r\n            for (int i = 0; i < data.length; ++i) {\r\n                data[i] = Byte.parseByte(\"\" + str.charAt(i));\r\n            }\r\n            return data;\r\n        });\r\n        Gson gson = gsonBuilder.create();\r\n        String json = \"'0123456789'\";\r\n        byte[] actual = gson.fromJson(json, byte[].class);\r\n        byte[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n        for (int i = 0; i < actual.length; ++i) {\r\n            assertThat(actual[i]).isEqualTo(expected[i]);\r\n        }\r\n    }\r\n\r\n    private static final class StringHolder {\r\n\r\n        String part1;\r\n\r\n        String part2;\r\n\r\n        public StringHolder(String string) {\r\n            List<String> parts = Splitter.on(':').splitToList(string);\r\n            part1 = parts.get(0);\r\n            part2 = parts.get(1);\r\n        }\r\n\r\n        public StringHolder(String part1, String part2) {\r\n            this.part1 = part1;\r\n            this.part2 = part2;\r\n        }\r\n    }\r\n\r\n    private static class StringHolderTypeAdapter implements JsonSerializer<StringHolder>, JsonDeserializer<StringHolder>, InstanceCreator<StringHolder> {\r\n\r\n        @Override\r\n        public StringHolder createInstance(Type type) {\r\n            // Fill up with objects that will be thrown away\r\n            return new StringHolder(\"unknown:thing\");\r\n        }\r\n\r\n        @Override\r\n        public StringHolder deserialize(JsonElement src, Type type, JsonDeserializationContext context) {\r\n            return new StringHolder(src.getAsString());\r\n        }\r\n\r\n        @Override\r\n        public JsonElement serialize(StringHolder src, Type typeOfSrc, JsonSerializationContext context) {\r\n            String contents = src.part1 + ':' + src.part2;\r\n            return new JsonPrimitive(contents);\r\n        }\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForCollectionElementSerializationWithType() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        Type setType = new TypeToken<Set<StringHolder>>() {\r\n        }.getType();\r\n        StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n        Set<StringHolder> setOfHolders = new HashSet<>();\r\n        setOfHolders.add(holder);\r\n        String json = gson.toJson(setOfHolders, setType);\r\n        assertThat(json).contains(\"Jacob:Tomaw\");\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForCollectionElementSerialization() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n        Set<StringHolder> setOfHolders = new HashSet<>();\r\n        setOfHolders.add(holder);\r\n        String json = gson.toJson(setOfHolders);\r\n        assertThat(json).contains(\"Jacob:Tomaw\");\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForCollectionElementDeserialization() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        Type setType = new TypeToken<Set<StringHolder>>() {\r\n        }.getType();\r\n        Set<StringHolder> setOfHolders = gson.fromJson(\"['Jacob:Tomaw']\", setType);\r\n        assertThat(setOfHolders.size()).isEqualTo(1);\r\n        StringHolder foo = setOfHolders.iterator().next();\r\n        assertThat(foo.part1).isEqualTo(\"Jacob\");\r\n        assertThat(foo.part2).isEqualTo(\"Tomaw\");\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForMapElementSerializationWithType() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        Type mapType = new TypeToken<Map<String, StringHolder>>() {\r\n        }.getType();\r\n        StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n        Map<String, StringHolder> mapOfHolders = new HashMap<>();\r\n        mapOfHolders.put(\"foo\", holder);\r\n        String json = gson.toJson(mapOfHolders, mapType);\r\n        assertThat(json).contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\");\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForMapElementSerialization() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n        Map<String, StringHolder> mapOfHolders = new HashMap<>();\r\n        mapOfHolders.put(\"foo\", holder);\r\n        String json = gson.toJson(mapOfHolders);\r\n        assertThat(json).contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\");\r\n    }\r\n\r\n    // Test created from Issue 70\r\n    @Test\r\n    public void testCustomAdapterInvokedForMapElementDeserialization() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n        Type mapType = new TypeToken<Map<String, StringHolder>>() {\r\n        }.getType();\r\n        Map<String, StringHolder> mapOfFoo = gson.fromJson(\"{'foo':'Jacob:Tomaw'}\", mapType);\r\n        assertThat(mapOfFoo.size()).isEqualTo(1);\r\n        StringHolder foo = mapOfFoo.get(\"foo\");\r\n        assertThat(foo.part1).isEqualTo(\"Jacob\");\r\n        assertThat(foo.part2).isEqualTo(\"Tomaw\");\r\n    }\r\n\r\n    @Test\r\n    public void testEnsureCustomSerializerNotInvokedForNullValues() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderSerializer()).create();\r\n        DataHolderWrapper target = new DataHolderWrapper(new DataHolder(\"abc\"));\r\n        String json = gson.toJson(target);\r\n        assertThat(json).isEqualTo(\"{\\\"wrappedData\\\":{\\\"myData\\\":\\\"abc\\\"}}\");\r\n    }\r\n\r\n    @Test\r\n    public void testEnsureCustomDeserializerNotInvokedForNullValues() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create();\r\n        String json = \"{wrappedData:null}\";\r\n        DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\r\n        assertThat(actual.wrappedData).isNull();\r\n    }\r\n\r\n    // Test created from Issue 352\r\n    @Test\r\n    @SuppressWarnings({ \"JavaUtilDate\", \"UndefinedEquals\" })\r\n    public void testRegisterHierarchyAdapterForDate() {\r\n        Gson gson = new GsonBuilder().registerTypeHierarchyAdapter(Date.class, new DateTypeAdapter()).create();\r\n        assertThat(gson.toJson(new Date(0))).isEqualTo(\"0\");\r\n        assertThat(gson.toJson(new java.sql.Date(0))).isEqualTo(\"0\");\r\n        assertThat(gson.fromJson(\"0\", Date.class)).isEqualTo(new Date(0));\r\n        assertThat(gson.fromJson(\"0\", java.sql.Date.class)).isEqualTo(new java.sql.Date(0));\r\n    }\r\n\r\n    private static class DataHolder {\r\n\r\n        final String data;\r\n\r\n        public DataHolder(String data) {\r\n            this.data = data;\r\n        }\r\n    }\r\n\r\n    private static class DataHolderWrapper {\r\n\r\n        final DataHolder wrappedData;\r\n\r\n        public DataHolderWrapper(DataHolder data) {\r\n            this.wrappedData = data;\r\n        }\r\n    }\r\n\r\n    private static class DataHolderSerializer implements JsonSerializer<DataHolder> {\r\n\r\n        @Override\r\n        public JsonElement serialize(DataHolder src, Type typeOfSrc, JsonSerializationContext context) {\r\n            JsonObject obj = new JsonObject();\r\n            obj.addProperty(\"myData\", src.data);\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {\r\n\r\n        @Override\r\n        public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            JsonObject jsonObj = json.getAsJsonObject();\r\n            JsonElement jsonElement = jsonObj.get(\"data\");\r\n            if (jsonElement == null || jsonElement.isJsonNull()) {\r\n                return new DataHolder(null);\r\n            }\r\n            return new DataHolder(jsonElement.getAsString());\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"JavaUtilDate\")\r\n    private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\r\n\r\n        @Override\r\n        public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\r\n            return typeOfT == Date.class ? new Date(json.getAsLong()) : new java.sql.Date(json.getAsLong());\r\n        }\r\n\r\n        @Override\r\n        public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(src.getTime());\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "field",
    "name": "builder",
    "start_line": 53,
    "end_line": 53,
    "code": "private GsonBuilder builder;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 55,
    "end_line": 58,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    builder = new GsonBuilder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomSerializers",
    "start_line": 60,
    "end_line": 76,
    "code": "@Test\r\npublic void testCustomSerializers() {\r\n    Gson gson = builder.registerTypeAdapter(ClassWithCustomTypeConverter.class, (JsonSerializer<ClassWithCustomTypeConverter>) (src, typeOfSrc, context) -> {\r\n        JsonObject json = new JsonObject();\r\n        json.addProperty(\"bag\", 5);\r\n        json.addProperty(\"value\", 25);\r\n        return json;\r\n    }).create();\r\n    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\r\n    assertThat(gson.toJson(target)).isEqualTo(\"{\\\"bag\\\":5,\\\"value\\\":25}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomDeserializers",
    "start_line": 78,
    "end_line": 95,
    "code": "@Test\r\npublic void testCustomDeserializers() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithCustomTypeConverter.class, (JsonDeserializer<ClassWithCustomTypeConverter>) (json, typeOfT, context) -> {\r\n        JsonObject jsonObject = json.getAsJsonObject();\r\n        int value = jsonObject.get(\"bag\").getAsInt();\r\n        return new ClassWithCustomTypeConverter(new BagOfPrimitives(value, value, false, \"\"), value);\r\n    }).create();\r\n    String json = \"{\\\"bag\\\":5,\\\"value\\\":25}\";\r\n    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\r\n    assertThat(target.getBag().getIntValue()).isEqualTo(5);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "disable_testCustomSerializersOfSelf",
    "start_line": 97,
    "end_line": 107,
    "code": "@Test\r\n@Ignore\r\npublic void disable_testCustomSerializersOfSelf() {\r\n    Gson gson = createGsonObjectWithFooTypeAdapter();\r\n    Gson basicGson = new Gson();\r\n    Foo newFooObject = new Foo(1, 2L);\r\n    String jsonFromCustomSerializer = gson.toJson(newFooObject);\r\n    String jsonFromGson = basicGson.toJson(newFooObject);\r\n    assertThat(jsonFromCustomSerializer).isEqualTo(jsonFromGson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "disable_testCustomDeserializersOfSelf",
    "start_line": 109,
    "end_line": 120,
    "code": "@Test\r\n@Ignore\r\npublic void disable_testCustomDeserializersOfSelf() {\r\n    Gson gson = createGsonObjectWithFooTypeAdapter();\r\n    Gson basicGson = new Gson();\r\n    Foo expectedFoo = new Foo(1, 2L);\r\n    String json = basicGson.toJson(expectedFoo);\r\n    Foo newFooObject = gson.fromJson(json, Foo.class);\r\n    assertThat(newFooObject.key).isEqualTo(expectedFoo.key);\r\n    assertThat(newFooObject.value).isEqualTo(expectedFoo.value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomNestedSerializers",
    "start_line": 122,
    "end_line": 132,
    "code": "@Test\r\npublic void testCustomNestedSerializers() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, (JsonSerializer<BagOfPrimitives>) (src, typeOfSrc, context) -> new JsonPrimitive(6)).create();\r\n    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();\r\n    assertThat(gson.toJson(target)).isEqualTo(\"{\\\"bag\\\":6,\\\"value\\\":10}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomNestedDeserializers",
    "start_line": 134,
    "end_line": 149,
    "code": "@Test\r\npublic void testCustomNestedDeserializers() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, (JsonDeserializer<BagOfPrimitives>) (json, typeOfT, context) -> {\r\n        int value = json.getAsInt();\r\n        return new BagOfPrimitives(value, value, false, \"\");\r\n    }).create();\r\n    String json = \"{\\\"bag\\\":7,\\\"value\\\":25}\";\r\n    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);\r\n    assertThat(target.getBag().getIntValue()).isEqualTo(7);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomTypeAdapterDoesNotAppliesToSubClasses",
    "start_line": 151,
    "end_line": 170,
    "code": "@Test\r\npublic void testCustomTypeAdapterDoesNotAppliesToSubClasses() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> {\r\n        JsonObject json = new JsonObject();\r\n        json.addProperty(\"value\", src.baseValue);\r\n        return json;\r\n    }).create();\r\n    Base b = new Base();\r\n    String json = gson.toJson(b);\r\n    assertThat(json).contains(\"value\");\r\n    b = new Derived();\r\n    json = gson.toJson(b);\r\n    assertThat(json).contains(\"derivedValue\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass",
    "start_line": 172,
    "end_line": 192,
    "code": "@Test\r\npublic void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> {\r\n        JsonObject json = new JsonObject();\r\n        json.addProperty(\"value\", src.baseValue);\r\n        return json;\r\n    }).create();\r\n    Base b = new Base();\r\n    String json = gson.toJson(b);\r\n    assertThat(json).contains(\"value\");\r\n    b = new Derived();\r\n    json = gson.toJson(b, Base.class);\r\n    assertThat(json).contains(\"value\");\r\n    assertThat(json).doesNotContain(\"derivedValue\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "createGsonObjectWithFooTypeAdapter",
    "start_line": 203,
    "end_line": 205,
    "code": "private Gson createGsonObjectWithFooTypeAdapter() {\r\n    return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomSerializerInvokedForPrimitives",
    "start_line": 234,
    "end_line": 245,
    "code": "@Test\r\npublic void testCustomSerializerInvokedForPrimitives() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(boolean.class, (JsonSerializer<Boolean>) (value, type, context) -> new JsonPrimitive(value ? 1 : 0)).create();\r\n    assertThat(gson.toJson(true, boolean.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(true, Boolean.class)).isEqualTo(\"true\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomDeserializerInvokedForPrimitives",
    "start_line": 247,
    "end_line": 257,
    "code": "@Test\r\npublic void testCustomDeserializerInvokedForPrimitives() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(boolean.class, (JsonDeserializer<Boolean>) (json, type, context) -> json.getAsInt() != 0).create();\r\n    assertThat(gson.fromJson(\"1\", boolean.class)).isEqualTo(true);\r\n    assertThat(gson.fromJson(\"true\", Boolean.class)).isEqualTo(true);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomByteArraySerializer",
    "start_line": 259,
    "end_line": 277,
    "code": "@Test\r\npublic void testCustomByteArraySerializer() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(byte[].class, (JsonSerializer<byte[]>) (src, typeOfSrc, context) -> {\r\n        StringBuilder sb = new StringBuilder(src.length);\r\n        for (byte b : src) {\r\n            sb.append(b);\r\n        }\r\n        return new JsonPrimitive(sb.toString());\r\n    }).create();\r\n    byte[] data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    String json = gson.toJson(data);\r\n    assertThat(json).isEqualTo(\"\\\"0123456789\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomByteArrayDeserializerAndInstanceCreator",
    "start_line": 279,
    "end_line": 301,
    "code": "@Test\r\npublic void testCustomByteArrayDeserializerAndInstanceCreator() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class, (JsonDeserializer<byte[]>) (json, typeOfT, context) -> {\r\n        String str = json.getAsString();\r\n        byte[] data = new byte[str.length()];\r\n        for (int i = 0; i < data.length; ++i) {\r\n            data[i] = Byte.parseByte(\"\" + str.charAt(i));\r\n        }\r\n        return data;\r\n    });\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"'0123456789'\";\r\n    byte[] actual = gson.fromJson(json, byte[].class);\r\n    byte[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    for (int i = 0; i < actual.length; ++i) {\r\n        assertThat(actual[i]).isEqualTo(expected[i]);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForCollectionElementSerializationWithType",
    "start_line": 345,
    "end_line": 357,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForCollectionElementSerializationWithType() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    Type setType = new TypeToken<Set<StringHolder>>() {\r\n    }.getType();\r\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n    Set<StringHolder> setOfHolders = new HashSet<>();\r\n    setOfHolders.add(holder);\r\n    String json = gson.toJson(setOfHolders, setType);\r\n    assertThat(json).contains(\"Jacob:Tomaw\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForCollectionElementSerialization",
    "start_line": 360,
    "end_line": 371,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForCollectionElementSerialization() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n    Set<StringHolder> setOfHolders = new HashSet<>();\r\n    setOfHolders.add(holder);\r\n    String json = gson.toJson(setOfHolders);\r\n    assertThat(json).contains(\"Jacob:Tomaw\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForCollectionElementDeserialization",
    "start_line": 374,
    "end_line": 386,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForCollectionElementDeserialization() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    Type setType = new TypeToken<Set<StringHolder>>() {\r\n    }.getType();\r\n    Set<StringHolder> setOfHolders = gson.fromJson(\"['Jacob:Tomaw']\", setType);\r\n    assertThat(setOfHolders.size()).isEqualTo(1);\r\n    StringHolder foo = setOfHolders.iterator().next();\r\n    assertThat(foo.part1).isEqualTo(\"Jacob\");\r\n    assertThat(foo.part2).isEqualTo(\"Tomaw\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForMapElementSerializationWithType",
    "start_line": 389,
    "end_line": 401,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForMapElementSerializationWithType() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    Type mapType = new TypeToken<Map<String, StringHolder>>() {\r\n    }.getType();\r\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n    Map<String, StringHolder> mapOfHolders = new HashMap<>();\r\n    mapOfHolders.put(\"foo\", holder);\r\n    String json = gson.toJson(mapOfHolders, mapType);\r\n    assertThat(json).contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForMapElementSerialization",
    "start_line": 404,
    "end_line": 415,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForMapElementSerialization() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\r\n    Map<String, StringHolder> mapOfHolders = new HashMap<>();\r\n    mapOfHolders.put(\"foo\", holder);\r\n    String json = gson.toJson(mapOfHolders);\r\n    assertThat(json).contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testCustomAdapterInvokedForMapElementDeserialization",
    "start_line": 418,
    "end_line": 430,
    "code": "// Test created from Issue 70\r\n@Test\r\npublic void testCustomAdapterInvokedForMapElementDeserialization() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create();\r\n    Type mapType = new TypeToken<Map<String, StringHolder>>() {\r\n    }.getType();\r\n    Map<String, StringHolder> mapOfFoo = gson.fromJson(\"{'foo':'Jacob:Tomaw'}\", mapType);\r\n    assertThat(mapOfFoo.size()).isEqualTo(1);\r\n    StringHolder foo = mapOfFoo.get(\"foo\");\r\n    assertThat(foo.part1).isEqualTo(\"Jacob\");\r\n    assertThat(foo.part2).isEqualTo(\"Tomaw\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testEnsureCustomSerializerNotInvokedForNullValues",
    "start_line": 432,
    "end_line": 441,
    "code": "@Test\r\npublic void testEnsureCustomSerializerNotInvokedForNullValues() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderSerializer()).create();\r\n    DataHolderWrapper target = new DataHolderWrapper(new DataHolder(\"abc\"));\r\n    String json = gson.toJson(target);\r\n    assertThat(json).isEqualTo(\"{\\\"wrappedData\\\":{\\\"myData\\\":\\\"abc\\\"}}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testEnsureCustomDeserializerNotInvokedForNullValues",
    "start_line": 443,
    "end_line": 452,
    "code": "@Test\r\npublic void testEnsureCustomDeserializerNotInvokedForNullValues() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create();\r\n    String json = \"{wrappedData:null}\";\r\n    DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);\r\n    assertThat(actual.wrappedData).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testRegisterHierarchyAdapterForDate",
    "start_line": 455,
    "end_line": 464,
    "code": "// Test created from Issue 352\r\n@Test\r\n@SuppressWarnings({ \"JavaUtilDate\", \"UndefinedEquals\" })\r\npublic void testRegisterHierarchyAdapterForDate() {\r\n    Gson gson = new GsonBuilder().registerTypeHierarchyAdapter(Date.class, new DateTypeAdapter()).create();\r\n    assertThat(gson.toJson(new Date(0))).isEqualTo(\"0\");\r\n    assertThat(gson.toJson(new java.sql.Date(0))).isEqualTo(\"0\");\r\n    assertThat(gson.fromJson(\"0\", Date.class)).isEqualTo(new Date(0));\r\n    assertThat(gson.fromJson(\"0\", java.sql.Date.class)).isEqualTo(new java.sql.Date(0));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomTypeAdaptersTest.java"
  }
]