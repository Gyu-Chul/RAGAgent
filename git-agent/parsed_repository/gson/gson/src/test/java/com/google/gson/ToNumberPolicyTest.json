[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.MalformedJsonException",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.stream.MalformedJsonException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 28,
    "end_line": 28,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "class",
    "name": "ToNumberPolicyTest",
    "start_line": 30,
    "end_line": 179,
    "code": "public class ToNumberPolicyTest {\r\n\r\n    @Test\r\n    public void testDouble() throws IOException {\r\n        ToNumberStrategy strategy = ToNumberPolicy.DOUBLE;\r\n        assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(10.1);\r\n        assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(3.141592653589793D);\r\n        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"1e400\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: Infinity at line 1 column 6 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n        assertThrows(NumberFormatException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n    }\r\n\r\n    @Test\r\n    public void testLazilyParsedNumber() throws IOException {\r\n        ToNumberStrategy strategy = ToNumberPolicy.LAZILY_PARSED_NUMBER;\r\n        assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(new LazilyParsedNumber(\"10.1\"));\r\n        assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(new LazilyParsedNumber(\"3.141592653589793238462643383279\"));\r\n        assertThat(strategy.readNumber(fromString(\"1e400\"))).isEqualTo(new LazilyParsedNumber(\"1e400\"));\r\n    }\r\n\r\n    @Test\r\n    public void testLongOrDouble() throws IOException {\r\n        ToNumberStrategy strategy = ToNumberPolicy.LONG_OR_DOUBLE;\r\n        assertThat(strategy.readNumber(fromString(\"10\"))).isEqualTo(10L);\r\n        assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(10.1);\r\n        assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(3.141592653589793D);\r\n        Exception e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"1e400\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: Infinity; at path $\");\r\n        e = assertThrows(JsonParseException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Cannot parse not-a-number; at path $\");\r\n        assertThat(strategy.readNumber(fromStringLenient(\"NaN\"))).isEqualTo(Double.NaN);\r\n        assertThat(strategy.readNumber(fromStringLenient(\"Infinity\"))).isEqualTo(Double.POSITIVE_INFINITY);\r\n        assertThat(strategy.readNumber(fromStringLenient(\"-Infinity\"))).isEqualTo(Double.NEGATIVE_INFINITY);\r\n        e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"NaN\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n        e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"Infinity\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n        e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"-Infinity\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimal() throws IOException {\r\n        ToNumberStrategy strategy = ToNumberPolicy.BIG_DECIMAL;\r\n        assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(new BigDecimal(\"10.1\"));\r\n        assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(new BigDecimal(\"3.141592653589793238462643383279\"));\r\n        assertThat(strategy.readNumber(fromString(\"1e400\"))).isEqualTo(new BigDecimal(\"1e400\"));\r\n        JsonParseException e = assertThrows(JsonParseException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Cannot parse not-a-number; at path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullsAreNeverExpected() throws IOException {\r\n        IllegalStateException e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.DOUBLE.readNumber(fromString(\"null\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected a double but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n        e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.LAZILY_PARSED_NUMBER.readNumber(fromString(\"null\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n        e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.LONG_OR_DOUBLE.readNumber(fromString(\"null\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n        e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.BIG_DECIMAL.readNumber(fromString(\"null\")));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n    }\r\n\r\n    private static JsonReader fromString(String json) {\r\n        return new JsonReader(new StringReader(json));\r\n    }\r\n\r\n    private static JsonReader fromStringLenient(String json) {\r\n        JsonReader jsonReader = fromString(json);\r\n        jsonReader.setStrictness(Strictness.LENIENT);\r\n        return jsonReader;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testDouble",
    "start_line": 31,
    "end_line": 48,
    "code": "@Test\r\npublic void testDouble() throws IOException {\r\n    ToNumberStrategy strategy = ToNumberPolicy.DOUBLE;\r\n    assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(10.1);\r\n    assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(3.141592653589793D);\r\n    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"1e400\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: Infinity at line 1 column 6 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    assertThrows(NumberFormatException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testLazilyParsedNumber",
    "start_line": 50,
    "end_line": 57,
    "code": "@Test\r\npublic void testLazilyParsedNumber() throws IOException {\r\n    ToNumberStrategy strategy = ToNumberPolicy.LAZILY_PARSED_NUMBER;\r\n    assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(new LazilyParsedNumber(\"10.1\"));\r\n    assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(new LazilyParsedNumber(\"3.141592653589793238462643383279\"));\r\n    assertThat(strategy.readNumber(fromString(\"1e400\"))).isEqualTo(new LazilyParsedNumber(\"1e400\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testLongOrDouble",
    "start_line": 59,
    "end_line": 111,
    "code": "@Test\r\npublic void testLongOrDouble() throws IOException {\r\n    ToNumberStrategy strategy = ToNumberPolicy.LONG_OR_DOUBLE;\r\n    assertThat(strategy.readNumber(fromString(\"10\"))).isEqualTo(10L);\r\n    assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(10.1);\r\n    assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(3.141592653589793D);\r\n    Exception e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"1e400\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JSON forbids NaN and infinities: Infinity; at path $\");\r\n    e = assertThrows(JsonParseException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Cannot parse not-a-number; at path $\");\r\n    assertThat(strategy.readNumber(fromStringLenient(\"NaN\"))).isEqualTo(Double.NaN);\r\n    assertThat(strategy.readNumber(fromStringLenient(\"Infinity\"))).isEqualTo(Double.POSITIVE_INFINITY);\r\n    assertThat(strategy.readNumber(fromStringLenient(\"-Infinity\"))).isEqualTo(Double.NEGATIVE_INFINITY);\r\n    e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"NaN\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"Infinity\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n    e = assertThrows(MalformedJsonException.class, () -> strategy.readNumber(fromString(\"-Infinity\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1\" + \" column 1 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimal",
    "start_line": 113,
    "end_line": 125,
    "code": "@Test\r\npublic void testBigDecimal() throws IOException {\r\n    ToNumberStrategy strategy = ToNumberPolicy.BIG_DECIMAL;\r\n    assertThat(strategy.readNumber(fromString(\"10.1\"))).isEqualTo(new BigDecimal(\"10.1\"));\r\n    assertThat(strategy.readNumber(fromString(\"3.141592653589793238462643383279\"))).isEqualTo(new BigDecimal(\"3.141592653589793238462643383279\"));\r\n    assertThat(strategy.readNumber(fromString(\"1e400\"))).isEqualTo(new BigDecimal(\"1e400\"));\r\n    JsonParseException e = assertThrows(JsonParseException.class, () -> strategy.readNumber(fromString(\"\\\"not-a-number\\\"\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Cannot parse not-a-number; at path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testNullsAreNeverExpected",
    "start_line": 127,
    "end_line": 168,
    "code": "@Test\r\npublic void testNullsAreNeverExpected() throws IOException {\r\n    IllegalStateException e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.DOUBLE.readNumber(fromString(\"null\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected a double but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n    e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.LAZILY_PARSED_NUMBER.readNumber(fromString(\"null\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n    e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.LONG_OR_DOUBLE.readNumber(fromString(\"null\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n    e = assertThrows(IllegalStateException.class, () -> ToNumberPolicy.BIG_DECIMAL.readNumber(fromString(\"null\")));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Expected a string but was NULL at line 1 column 5 path $\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#adapter-not-null-safe\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "fromString",
    "start_line": 170,
    "end_line": 172,
    "code": "private static JsonReader fromString(String json) {\r\n    return new JsonReader(new StringReader(json));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  },
  {
    "type": "method",
    "name": "fromStringLenient",
    "start_line": 174,
    "end_line": 178,
    "code": "private static JsonReader fromStringLenient(String json) {\r\n    JsonReader jsonReader = fromString(json);\r\n    jsonReader.setStrictness(Strictness.LENIENT);\r\n    return jsonReader;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\ToNumberPolicyTest.java"
  }
]