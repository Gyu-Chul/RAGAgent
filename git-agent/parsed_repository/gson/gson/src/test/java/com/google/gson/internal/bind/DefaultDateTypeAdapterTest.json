[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertWithMessage",
    "start_line": 20,
    "end_line": 20,
    "code": "import static com.google.common.truth.Truth.assertWithMessage;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 21,
    "end_line": 21,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.DefaultDateTypeAdapter.DateType",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.internal.bind.DefaultDateTypeAdapter.DateType;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.text.DateFormat",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.text.DateFormat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.text.SimpleDateFormat",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.text.SimpleDateFormat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Date",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Date;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.util.TimeZone",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.TimeZone;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 35,
    "end_line": 35,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "class",
    "name": "DefaultDateTypeAdapterTest",
    "start_line": 42,
    "end_line": 250,
    "code": "/**\r\n * A simple unit test for the {@link DefaultDateTypeAdapter} class.\r\n *\r\n * @author Joel Leitch\r\n */\r\n@SuppressWarnings(\"JavaUtilDate\")\r\npublic class DefaultDateTypeAdapterTest {\r\n\r\n    @Test\r\n    public void testFormattingInEnUs() {\r\n        assertFormattingAlwaysEmitsUsLocale(Locale.US);\r\n    }\r\n\r\n    @Test\r\n    public void testFormattingInFr() {\r\n        assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\r\n    }\r\n\r\n    private static void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(locale);\r\n        try {\r\n            // The patterns here attempt to accommodate minor date-time formatting differences between JDK\r\n            // versions. Ideally Gson would serialize in a way that is independent of the JDK version.\r\n            // Note: \\h means \"horizontal space\", because some JDK versions use Narrow No Break Space\r\n            // (U+202F) before the AM or PM indication.\r\n            String utcFull = \"(Coordinated Universal Time|UTC)\";\r\n            assertFormatted(\"Jan 1, 1970,? 12:00:00\\\\hAM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n            assertFormatted(\"1/1/70,? 12:00\\\\hAM\", DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n            assertFormatted(\"Jan 1, 1970,? 12:00:00\\\\hAM\", DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n            assertFormatted(\"January 1, 1970(,| at)? 12:00:00\\\\hAM UTC\", DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n            assertFormatted(\"Thursday, January 1, 1970(,| at)? 12:00:00\\\\hAM \" + utcFull, DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testParsingDatesFormattedWithSystemLocale() throws Exception {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.FRANCE);\r\n        try {\r\n            Date date = new Date(0);\r\n            assertParsed(DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(date), DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n            assertParsed(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(date), DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n            assertParsed(DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(date), DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n            assertParsed(DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(date), DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n            assertParsed(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date), DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testParsingDatesFormattedWithUsLocale() throws Exception {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        try {\r\n            assertParsed(\"Jan 1, 1970 0:00:00 AM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n            assertParsed(\"1/1/70 0:00 AM\", DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n            assertParsed(\"Jan 1, 1970 0:00:00 AM\", DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n            assertParsed(\"January 1, 1970 0:00:00 AM UTC\", DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n            assertParsed(\"Thursday, January 1, 1970 0:00:00 AM UTC\", DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testFormatUsesDefaultTimezone() throws Exception {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        try {\r\n            assertFormatted(\"Dec 31, 1969,? 4:00:00\\\\hPM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n            assertParsed(\"Dec 31, 1969 4:00:00 PM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testDateDeserializationISO8601() throws Exception {\r\n        TypeAdapterFactory adapterFactory = DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY;\r\n        assertParsed(\"1970-01-01T00:00:00.000Z\", adapterFactory);\r\n        assertParsed(\"1970-01-01T00:00Z\", adapterFactory);\r\n        assertParsed(\"1970-01-01T00:00:00+00:00\", adapterFactory);\r\n        assertParsed(\"1970-01-01T01:00:00+01:00\", adapterFactory);\r\n        assertParsed(\"1970-01-01T01:00:00+01\", adapterFactory);\r\n    }\r\n\r\n    @Test\r\n    public void testDatePattern() {\r\n        String pattern = \"yyyy-MM-dd\";\r\n        TypeAdapter<Date> dateTypeAdapter = dateAdapter(DateType.DATE.createAdapterFactory(pattern));\r\n        DateFormat formatter = new SimpleDateFormat(pattern);\r\n        Date currentDate = new Date();\r\n        String dateString = dateTypeAdapter.toJson(currentDate);\r\n        assertThat(dateString).isEqualTo(toLiteral(formatter.format(currentDate)));\r\n    }\r\n\r\n    @Test\r\n    public void testInvalidDatePattern() {\r\n        assertThrows(IllegalArgumentException.class, () -> DateType.DATE.createAdapterFactory(\"I am a bad Date pattern....\"));\r\n    }\r\n\r\n    @Test\r\n    public void testNullValue() throws Exception {\r\n        TypeAdapter<Date> adapter = dateAdapter(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        assertThat(adapter.fromJson(\"null\")).isNull();\r\n        assertThat(adapter.toJson(null)).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnexpectedToken() throws Exception {\r\n        TypeAdapter<Date> adapter = dateAdapter(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        IllegalStateException e = assertThrows(IllegalStateException.class, () -> adapter.fromJson(\"{}\"));\r\n        assertThat(e).hasMessageThat().startsWith(\"Expected a string but was BEGIN_OBJECT\");\r\n    }\r\n\r\n    @Test\r\n    public void testGsonDateFormat() {\r\n        TimeZone originalTimeZone = TimeZone.getDefault();\r\n        // Set the default timezone to UTC\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        try {\r\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm z\").create();\r\n            Date originalDate = new Date(0);\r\n            // Serialize the date object\r\n            String json = gson.toJson(originalDate);\r\n            assertThat(json).isEqualTo(\"\\\"1970-01-01 00:00 UTC\\\"\");\r\n            // Deserialize a date string with the PST timezone\r\n            Date deserializedDate = gson.fromJson(\"\\\"1970-01-01 00:00 PST\\\"\", Date.class);\r\n            // Assert that the deserialized date's time is correct\r\n            assertThat(deserializedDate.getTime()).isEqualTo(new Date(28800000).getTime());\r\n            // Serialize the deserialized date object again\r\n            String jsonAfterDeserialization = gson.toJson(deserializedDate);\r\n            // The expectation is that the date, after deserialization, when serialized again should still\r\n            // be in the UTC timezone\r\n            assertThat(jsonAfterDeserialization).isEqualTo(\"\\\"1970-01-01 08:00 UTC\\\"\");\r\n        } finally {\r\n            TimeZone.setDefault(originalTimeZone);\r\n        }\r\n    }\r\n\r\n    private static TypeAdapter<Date> dateAdapter(TypeAdapterFactory adapterFactory) {\r\n        TypeAdapter<Date> adapter = adapterFactory.create(new Gson(), TypeToken.get(Date.class));\r\n        assertThat(adapter).isNotNull();\r\n        return adapter;\r\n    }\r\n\r\n    private static void assertFormatted(String formattedPattern, TypeAdapterFactory adapterFactory) {\r\n        TypeAdapter<Date> adapter = dateAdapter(adapterFactory);\r\n        String json = adapter.toJson(new Date(0));\r\n        assertThat(json).matches(toLiteral(formattedPattern));\r\n    }\r\n\r\n    @SuppressWarnings(\"UndefinedEquals\")\r\n    private static void assertParsed(String date, TypeAdapterFactory adapterFactory) throws IOException {\r\n        TypeAdapter<Date> adapter = dateAdapter(adapterFactory);\r\n        assertWithMessage(date).that(adapter.fromJson(toLiteral(date))).isEqualTo(new Date(0));\r\n        assertWithMessage(\"ISO 8601\").that(adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\"))).isEqualTo(new Date(0));\r\n    }\r\n\r\n    private static String toLiteral(String s) {\r\n        return '\"' + s + '\"';\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testFormattingInEnUs",
    "start_line": 45,
    "end_line": 48,
    "code": "@Test\r\npublic void testFormattingInEnUs() {\r\n    assertFormattingAlwaysEmitsUsLocale(Locale.US);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testFormattingInFr",
    "start_line": 50,
    "end_line": 53,
    "code": "@Test\r\npublic void testFormattingInFr() {\r\n    assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "assertFormattingAlwaysEmitsUsLocale",
    "start_line": 55,
    "end_line": 83,
    "code": "private static void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(locale);\r\n    try {\r\n        // The patterns here attempt to accommodate minor date-time formatting differences between JDK\r\n        // versions. Ideally Gson would serialize in a way that is independent of the JDK version.\r\n        // Note: \\h means \"horizontal space\", because some JDK versions use Narrow No Break Space\r\n        // (U+202F) before the AM or PM indication.\r\n        String utcFull = \"(Coordinated Universal Time|UTC)\";\r\n        assertFormatted(\"Jan 1, 1970,? 12:00:00\\\\hAM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        assertFormatted(\"1/1/70,? 12:00\\\\hAM\", DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n        assertFormatted(\"Jan 1, 1970,? 12:00:00\\\\hAM\", DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n        assertFormatted(\"January 1, 1970(,| at)? 12:00:00\\\\hAM UTC\", DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n        assertFormatted(\"Thursday, January 1, 1970(,| at)? 12:00:00\\\\hAM \" + utcFull, DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testParsingDatesFormattedWithSystemLocale",
    "start_line": 85,
    "end_line": 112,
    "code": "@Test\r\npublic void testParsingDatesFormattedWithSystemLocale() throws Exception {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.FRANCE);\r\n    try {\r\n        Date date = new Date(0);\r\n        assertParsed(DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(date), DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        assertParsed(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(date), DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n        assertParsed(DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM).format(date), DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n        assertParsed(DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(date), DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n        assertParsed(DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(date), DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testParsingDatesFormattedWithUsLocale",
    "start_line": 114,
    "end_line": 137,
    "code": "@Test\r\npublic void testParsingDatesFormattedWithUsLocale() throws Exception {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    try {\r\n        assertParsed(\"Jan 1, 1970 0:00:00 AM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        assertParsed(\"1/1/70 0:00 AM\", DateType.DATE.createAdapterFactory(DateFormat.SHORT, DateFormat.SHORT));\r\n        assertParsed(\"Jan 1, 1970 0:00:00 AM\", DateType.DATE.createAdapterFactory(DateFormat.MEDIUM, DateFormat.MEDIUM));\r\n        assertParsed(\"January 1, 1970 0:00:00 AM UTC\", DateType.DATE.createAdapterFactory(DateFormat.LONG, DateFormat.LONG));\r\n        assertParsed(\"Thursday, January 1, 1970 0:00:00 AM UTC\", DateType.DATE.createAdapterFactory(DateFormat.FULL, DateFormat.FULL));\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testFormatUsesDefaultTimezone",
    "start_line": 139,
    "end_line": 152,
    "code": "@Test\r\npublic void testFormatUsesDefaultTimezone() throws Exception {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    try {\r\n        assertFormatted(\"Dec 31, 1969,? 4:00:00\\\\hPM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        assertParsed(\"Dec 31, 1969 4:00:00 PM\", DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testDateDeserializationISO8601",
    "start_line": 154,
    "end_line": 162,
    "code": "@Test\r\npublic void testDateDeserializationISO8601() throws Exception {\r\n    TypeAdapterFactory adapterFactory = DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY;\r\n    assertParsed(\"1970-01-01T00:00:00.000Z\", adapterFactory);\r\n    assertParsed(\"1970-01-01T00:00Z\", adapterFactory);\r\n    assertParsed(\"1970-01-01T00:00:00+00:00\", adapterFactory);\r\n    assertParsed(\"1970-01-01T01:00:00+01:00\", adapterFactory);\r\n    assertParsed(\"1970-01-01T01:00:00+01\", adapterFactory);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testDatePattern",
    "start_line": 164,
    "end_line": 173,
    "code": "@Test\r\npublic void testDatePattern() {\r\n    String pattern = \"yyyy-MM-dd\";\r\n    TypeAdapter<Date> dateTypeAdapter = dateAdapter(DateType.DATE.createAdapterFactory(pattern));\r\n    DateFormat formatter = new SimpleDateFormat(pattern);\r\n    Date currentDate = new Date();\r\n    String dateString = dateTypeAdapter.toJson(currentDate);\r\n    assertThat(dateString).isEqualTo(toLiteral(formatter.format(currentDate)));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testInvalidDatePattern",
    "start_line": 175,
    "end_line": 180,
    "code": "@Test\r\npublic void testInvalidDatePattern() {\r\n    assertThrows(IllegalArgumentException.class, () -> DateType.DATE.createAdapterFactory(\"I am a bad Date pattern....\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testNullValue",
    "start_line": 182,
    "end_line": 187,
    "code": "@Test\r\npublic void testNullValue() throws Exception {\r\n    TypeAdapter<Date> adapter = dateAdapter(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n    assertThat(adapter.fromJson(\"null\")).isNull();\r\n    assertThat(adapter.toJson(null)).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testUnexpectedToken",
    "start_line": 189,
    "end_line": 195,
    "code": "@Test\r\npublic void testUnexpectedToken() throws Exception {\r\n    TypeAdapter<Date> adapter = dateAdapter(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n    IllegalStateException e = assertThrows(IllegalStateException.class, () -> adapter.fromJson(\"{}\"));\r\n    assertThat(e).hasMessageThat().startsWith(\"Expected a string but was BEGIN_OBJECT\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testGsonDateFormat",
    "start_line": 197,
    "end_line": 223,
    "code": "@Test\r\npublic void testGsonDateFormat() {\r\n    TimeZone originalTimeZone = TimeZone.getDefault();\r\n    // Set the default timezone to UTC\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    try {\r\n        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm z\").create();\r\n        Date originalDate = new Date(0);\r\n        // Serialize the date object\r\n        String json = gson.toJson(originalDate);\r\n        assertThat(json).isEqualTo(\"\\\"1970-01-01 00:00 UTC\\\"\");\r\n        // Deserialize a date string with the PST timezone\r\n        Date deserializedDate = gson.fromJson(\"\\\"1970-01-01 00:00 PST\\\"\", Date.class);\r\n        // Assert that the deserialized date's time is correct\r\n        assertThat(deserializedDate.getTime()).isEqualTo(new Date(28800000).getTime());\r\n        // Serialize the deserialized date object again\r\n        String jsonAfterDeserialization = gson.toJson(deserializedDate);\r\n        // The expectation is that the date, after deserialization, when serialized again should still\r\n        // be in the UTC timezone\r\n        assertThat(jsonAfterDeserialization).isEqualTo(\"\\\"1970-01-01 08:00 UTC\\\"\");\r\n    } finally {\r\n        TimeZone.setDefault(originalTimeZone);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "dateAdapter",
    "start_line": 225,
    "end_line": 229,
    "code": "private static TypeAdapter<Date> dateAdapter(TypeAdapterFactory adapterFactory) {\r\n    TypeAdapter<Date> adapter = adapterFactory.create(new Gson(), TypeToken.get(Date.class));\r\n    assertThat(adapter).isNotNull();\r\n    return adapter;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "assertFormatted",
    "start_line": 231,
    "end_line": 235,
    "code": "private static void assertFormatted(String formattedPattern, TypeAdapterFactory adapterFactory) {\r\n    TypeAdapter<Date> adapter = dateAdapter(adapterFactory);\r\n    String json = adapter.toJson(new Date(0));\r\n    assertThat(json).matches(toLiteral(formattedPattern));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "assertParsed",
    "start_line": 237,
    "end_line": 245,
    "code": "@SuppressWarnings(\"UndefinedEquals\")\r\nprivate static void assertParsed(String date, TypeAdapterFactory adapterFactory) throws IOException {\r\n    TypeAdapter<Date> adapter = dateAdapter(adapterFactory);\r\n    assertWithMessage(date).that(adapter.fromJson(toLiteral(date))).isEqualTo(new Date(0));\r\n    assertWithMessage(\"ISO 8601\").that(adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\"))).isEqualTo(new Date(0));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "toLiteral",
    "start_line": 247,
    "end_line": 249,
    "code": "private static String toLiteral(String s) {\r\n    return '\"' + s + '\"';\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\bind\\DefaultDateTypeAdapterTest.java"
  }
]