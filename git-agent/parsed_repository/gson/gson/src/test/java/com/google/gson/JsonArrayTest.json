[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.testing.EqualsTester",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.common.testing.EqualsTester;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.MoreAsserts",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.common.MoreAsserts;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 25,
    "end_line": 25,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "class",
    "name": "JsonArrayTest",
    "start_line": 32,
    "end_line": 357,
    "code": "/**\r\n * Tests handling of JSON arrays.\r\n *\r\n * @author Jesse Wilson\r\n */\r\npublic final class JsonArrayTest {\r\n\r\n    @Test\r\n    public void testEqualsOnEmptyArray() {\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsNonEmptyArray() {\r\n        JsonArray a = new JsonArray();\r\n        JsonArray b = new JsonArray();\r\n        new EqualsTester().addEqualityGroup(a).testEquals();\r\n        a.add(new JsonObject());\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n        b.add(new JsonObject());\r\n        MoreAsserts.assertEqualsAndHashCode(a, b);\r\n        a.add(new JsonObject());\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n        b.add(JsonNull.INSTANCE);\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testRemove() {\r\n        JsonArray array = new JsonArray();\r\n        assertThrows(IndexOutOfBoundsException.class, () -> array.remove(0));\r\n        JsonPrimitive a = new JsonPrimitive(\"a\");\r\n        array.add(a);\r\n        assertThat(array.remove(a)).isTrue();\r\n        assertThat(array).doesNotContain(a);\r\n        array.add(a);\r\n        array.add(new JsonPrimitive(\"b\"));\r\n        assertThat(array.remove(1).getAsString()).isEqualTo(\"b\");\r\n        assertThat(array).hasSize(1);\r\n        assertThat(array).contains(a);\r\n    }\r\n\r\n    @Test\r\n    public void testSet() {\r\n        JsonArray array = new JsonArray();\r\n        assertThrows(IndexOutOfBoundsException.class, () -> array.set(0, new JsonPrimitive(1)));\r\n        JsonPrimitive a = new JsonPrimitive(\"a\");\r\n        array.add(a);\r\n        JsonPrimitive b = new JsonPrimitive(\"b\");\r\n        JsonElement oldValue = array.set(0, b);\r\n        assertThat(oldValue).isEqualTo(a);\r\n        assertThat(array.get(0).getAsString()).isEqualTo(\"b\");\r\n        oldValue = array.set(0, null);\r\n        assertThat(oldValue).isEqualTo(b);\r\n        assertThat(array.get(0)).isEqualTo(JsonNull.INSTANCE);\r\n        oldValue = array.set(0, new JsonPrimitive(\"c\"));\r\n        assertThat(oldValue).isEqualTo(JsonNull.INSTANCE);\r\n        assertThat(array.get(0).getAsString()).isEqualTo(\"c\");\r\n        assertThat(array).hasSize(1);\r\n    }\r\n\r\n    @Test\r\n    public void testDeepCopy() {\r\n        JsonArray original = new JsonArray();\r\n        JsonArray firstEntry = new JsonArray();\r\n        original.add(firstEntry);\r\n        JsonArray copy = original.deepCopy();\r\n        original.add(new JsonPrimitive(\"y\"));\r\n        assertThat(copy).hasSize(1);\r\n        firstEntry.add(new JsonPrimitive(\"z\"));\r\n        assertThat(original.get(0).getAsJsonArray()).hasSize(1);\r\n        assertThat(copy.get(0).getAsJsonArray()).hasSize(0);\r\n    }\r\n\r\n    @Test\r\n    public void testIsEmpty() {\r\n        JsonArray array = new JsonArray();\r\n        assertThat(array).isEmpty();\r\n        JsonPrimitive a = new JsonPrimitive(\"a\");\r\n        array.add(a);\r\n        assertThat(array).isNotEmpty();\r\n        array.remove(0);\r\n        assertThat(array).isEmpty();\r\n    }\r\n\r\n    @Test\r\n    public void testFailedGetArrayValues() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add(JsonParser.parseString(\"{\" + \"\\\"key1\\\":\\\"value1\\\",\" + \"\\\"key2\\\":\\\"value2\\\",\" + \"\\\"key3\\\":\\\"value3\\\",\" + \"\\\"key4\\\":\\\"value4\\\"\" + \"}\"));\r\n        Exception e = assertThrows(UnsupportedOperationException.class, () -> jsonArray.getAsBoolean());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonObject\");\r\n        e = assertThrows(IndexOutOfBoundsException.class, () -> jsonArray.get(-1));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Index -1 out of bounds for length 1\");\r\n        e = assertThrows(UnsupportedOperationException.class, () -> jsonArray.getAsString());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonObject\");\r\n        jsonArray.remove(0);\r\n        jsonArray.add(\"hello\");\r\n        e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsDouble());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n        e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsInt());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n        e = assertThrows(IllegalStateException.class, () -> jsonArray.get(0).getAsJsonArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Not a JSON Array: \\\"hello\\\"\");\r\n        e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsJsonObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Not a JSON Object: [\\\"hello\\\"]\");\r\n        e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsLong());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testGetAs_WrongArraySize() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsByte());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Array must have size 1, but has size 0\");\r\n        jsonArray.add(true);\r\n        jsonArray.add(false);\r\n        e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsByte());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Array must have size 1, but has size 2\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add(\"Hello\");\r\n        jsonArray.add(\"Goodbye\");\r\n        jsonArray.add(\"Thank you\");\r\n        jsonArray.add((String) null);\r\n        jsonArray.add(\"Yes\");\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[\\\"Hello\\\",\\\"Goodbye\\\",\\\"Thank you\\\",null,\\\"Yes\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testIntegerPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        int x = 1;\r\n        jsonArray.add(x);\r\n        x = 2;\r\n        jsonArray.add(x);\r\n        x = -3;\r\n        jsonArray.add(x);\r\n        jsonArray.add((Integer) null);\r\n        x = 4;\r\n        jsonArray.add(x);\r\n        x = 0;\r\n        jsonArray.add(x);\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[1,2,-3,null,4,0]\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoublePrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        double x = 1.0;\r\n        jsonArray.add(x);\r\n        x = 2.13232;\r\n        jsonArray.add(x);\r\n        x = 0.121;\r\n        jsonArray.add(x);\r\n        jsonArray.add((Double) null);\r\n        x = -0.00234;\r\n        jsonArray.add(x);\r\n        jsonArray.add((Double) null);\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[1.0,2.13232,0.121,null,-0.00234,null]\");\r\n    }\r\n\r\n    @Test\r\n    public void testBooleanPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add(true);\r\n        jsonArray.add(true);\r\n        jsonArray.add(false);\r\n        jsonArray.add(false);\r\n        jsonArray.add((Boolean) null);\r\n        jsonArray.add(true);\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[true,true,false,false,null,true]\");\r\n    }\r\n\r\n    @Test\r\n    public void testCharPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add('a');\r\n        jsonArray.add('e');\r\n        jsonArray.add('i');\r\n        jsonArray.add((char) 111);\r\n        jsonArray.add((Character) null);\r\n        jsonArray.add('u');\r\n        jsonArray.add(\"and sometimes Y\");\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",null,\\\"u\\\",\\\"and sometimes Y\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testMixedPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add('a');\r\n        jsonArray.add(\"apple\");\r\n        jsonArray.add(12121);\r\n        jsonArray.add((char) 111);\r\n        jsonArray.add((Boolean) null);\r\n        assertThat(jsonArray.get(jsonArray.size() - 1)).isEqualTo(JsonNull.INSTANCE);\r\n        jsonArray.add((Character) null);\r\n        assertThat(jsonArray.get(jsonArray.size() - 1)).isEqualTo(JsonNull.INSTANCE);\r\n        jsonArray.add(12.232);\r\n        jsonArray.add(BigInteger.valueOf(2323));\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullPrimitiveAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add((Character) null);\r\n        jsonArray.add((Boolean) null);\r\n        jsonArray.add((Integer) null);\r\n        jsonArray.add((Double) null);\r\n        jsonArray.add((Float) null);\r\n        jsonArray.add((BigInteger) null);\r\n        jsonArray.add((String) null);\r\n        jsonArray.add((Boolean) null);\r\n        jsonArray.add((Number) null);\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[null,null,null,null,null,null,null,null,null]\");\r\n        for (int i = 0; i < jsonArray.size(); i++) {\r\n            // Verify that they are actually a JsonNull and not a Java null\r\n            assertThat(jsonArray.get(i)).isEqualTo(JsonNull.INSTANCE);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testNullJsonElementAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add((JsonElement) null);\r\n        assertThat(jsonArray.get(0)).isEqualTo(JsonNull.INSTANCE);\r\n    }\r\n\r\n    @Test\r\n    public void testSameAddition() {\r\n        JsonArray jsonArray = new JsonArray();\r\n        jsonArray.add('a');\r\n        jsonArray.add('a');\r\n        jsonArray.add(true);\r\n        jsonArray.add(true);\r\n        jsonArray.add(1212);\r\n        jsonArray.add(1212);\r\n        jsonArray.add(34.34);\r\n        jsonArray.add(34.34);\r\n        jsonArray.add((Boolean) null);\r\n        jsonArray.add((Boolean) null);\r\n        assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"a\\\",true,true,1212,1212,34.34,34.34,null,null]\");\r\n    }\r\n\r\n    @Test\r\n    public void testToString() {\r\n        JsonArray array = new JsonArray();\r\n        assertThat(array.toString()).isEqualTo(\"[]\");\r\n        array.add(JsonNull.INSTANCE);\r\n        array.add(Float.NaN);\r\n        array.add(\"a\\0\");\r\n        JsonArray nestedArray = new JsonArray();\r\n        nestedArray.add('\"');\r\n        array.add(nestedArray);\r\n        JsonObject nestedObject = new JsonObject();\r\n        nestedObject.addProperty(\"n\\0\", 1);\r\n        array.add(nestedObject);\r\n        assertThat(array.toString()).isEqualTo(\"[null,NaN,\\\"a\\\\u0000\\\",[\\\"\\\\\\\"\\\"],{\\\"n\\\\u0000\\\":1}]\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsOnEmptyArray",
    "start_line": 34,
    "end_line": 37,
    "code": "@Test\r\npublic void testEqualsOnEmptyArray() {\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsNonEmptyArray",
    "start_line": 39,
    "end_line": 60,
    "code": "@Test\r\npublic void testEqualsNonEmptyArray() {\r\n    JsonArray a = new JsonArray();\r\n    JsonArray b = new JsonArray();\r\n    new EqualsTester().addEqualityGroup(a).testEquals();\r\n    a.add(new JsonObject());\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n    b.add(new JsonObject());\r\n    MoreAsserts.assertEqualsAndHashCode(a, b);\r\n    a.add(new JsonObject());\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n    b.add(JsonNull.INSTANCE);\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testRemove",
    "start_line": 62,
    "end_line": 76,
    "code": "@Test\r\npublic void testRemove() {\r\n    JsonArray array = new JsonArray();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> array.remove(0));\r\n    JsonPrimitive a = new JsonPrimitive(\"a\");\r\n    array.add(a);\r\n    assertThat(array.remove(a)).isTrue();\r\n    assertThat(array).doesNotContain(a);\r\n    array.add(a);\r\n    array.add(new JsonPrimitive(\"b\"));\r\n    assertThat(array.remove(1).getAsString()).isEqualTo(\"b\");\r\n    assertThat(array).hasSize(1);\r\n    assertThat(array).contains(a);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testSet",
    "start_line": 78,
    "end_line": 99,
    "code": "@Test\r\npublic void testSet() {\r\n    JsonArray array = new JsonArray();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> array.set(0, new JsonPrimitive(1)));\r\n    JsonPrimitive a = new JsonPrimitive(\"a\");\r\n    array.add(a);\r\n    JsonPrimitive b = new JsonPrimitive(\"b\");\r\n    JsonElement oldValue = array.set(0, b);\r\n    assertThat(oldValue).isEqualTo(a);\r\n    assertThat(array.get(0).getAsString()).isEqualTo(\"b\");\r\n    oldValue = array.set(0, null);\r\n    assertThat(oldValue).isEqualTo(b);\r\n    assertThat(array.get(0)).isEqualTo(JsonNull.INSTANCE);\r\n    oldValue = array.set(0, new JsonPrimitive(\"c\"));\r\n    assertThat(oldValue).isEqualTo(JsonNull.INSTANCE);\r\n    assertThat(array.get(0).getAsString()).isEqualTo(\"c\");\r\n    assertThat(array).hasSize(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testDeepCopy",
    "start_line": 101,
    "end_line": 115,
    "code": "@Test\r\npublic void testDeepCopy() {\r\n    JsonArray original = new JsonArray();\r\n    JsonArray firstEntry = new JsonArray();\r\n    original.add(firstEntry);\r\n    JsonArray copy = original.deepCopy();\r\n    original.add(new JsonPrimitive(\"y\"));\r\n    assertThat(copy).hasSize(1);\r\n    firstEntry.add(new JsonPrimitive(\"z\"));\r\n    assertThat(original.get(0).getAsJsonArray()).hasSize(1);\r\n    assertThat(copy.get(0).getAsJsonArray()).hasSize(0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testIsEmpty",
    "start_line": 117,
    "end_line": 128,
    "code": "@Test\r\npublic void testIsEmpty() {\r\n    JsonArray array = new JsonArray();\r\n    assertThat(array).isEmpty();\r\n    JsonPrimitive a = new JsonPrimitive(\"a\");\r\n    array.add(a);\r\n    assertThat(array).isNotEmpty();\r\n    array.remove(0);\r\n    assertThat(array).isEmpty();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testFailedGetArrayValues",
    "start_line": 130,
    "end_line": 167,
    "code": "@Test\r\npublic void testFailedGetArrayValues() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add(JsonParser.parseString(\"{\" + \"\\\"key1\\\":\\\"value1\\\",\" + \"\\\"key2\\\":\\\"value2\\\",\" + \"\\\"key3\\\":\\\"value3\\\",\" + \"\\\"key4\\\":\\\"value4\\\"\" + \"}\"));\r\n    Exception e = assertThrows(UnsupportedOperationException.class, () -> jsonArray.getAsBoolean());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonObject\");\r\n    e = assertThrows(IndexOutOfBoundsException.class, () -> jsonArray.get(-1));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Index -1 out of bounds for length 1\");\r\n    e = assertThrows(UnsupportedOperationException.class, () -> jsonArray.getAsString());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonObject\");\r\n    jsonArray.remove(0);\r\n    jsonArray.add(\"hello\");\r\n    e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsDouble());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n    e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsInt());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n    e = assertThrows(IllegalStateException.class, () -> jsonArray.get(0).getAsJsonArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Not a JSON Array: \\\"hello\\\"\");\r\n    e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsJsonObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Not a JSON Object: [\\\"hello\\\"]\");\r\n    e = assertThrows(NumberFormatException.class, () -> jsonArray.getAsLong());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"For input string: \\\"hello\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testGetAs_WrongArraySize",
    "start_line": 169,
    "end_line": 179,
    "code": "@Test\r\npublic void testGetAs_WrongArraySize() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsByte());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Array must have size 1, but has size 0\");\r\n    jsonArray.add(true);\r\n    jsonArray.add(false);\r\n    e = assertThrows(IllegalStateException.class, () -> jsonArray.getAsByte());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Array must have size 1, but has size 2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testStringPrimitiveAddition",
    "start_line": 181,
    "end_line": 193,
    "code": "@Test\r\npublic void testStringPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add(\"Hello\");\r\n    jsonArray.add(\"Goodbye\");\r\n    jsonArray.add(\"Thank you\");\r\n    jsonArray.add((String) null);\r\n    jsonArray.add(\"Yes\");\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[\\\"Hello\\\",\\\"Goodbye\\\",\\\"Thank you\\\",null,\\\"Yes\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testIntegerPrimitiveAddition",
    "start_line": 195,
    "end_line": 217,
    "code": "@Test\r\npublic void testIntegerPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    int x = 1;\r\n    jsonArray.add(x);\r\n    x = 2;\r\n    jsonArray.add(x);\r\n    x = -3;\r\n    jsonArray.add(x);\r\n    jsonArray.add((Integer) null);\r\n    x = 4;\r\n    jsonArray.add(x);\r\n    x = 0;\r\n    jsonArray.add(x);\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[1,2,-3,null,4,0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testDoublePrimitiveAddition",
    "start_line": 219,
    "end_line": 240,
    "code": "@Test\r\npublic void testDoublePrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    double x = 1.0;\r\n    jsonArray.add(x);\r\n    x = 2.13232;\r\n    jsonArray.add(x);\r\n    x = 0.121;\r\n    jsonArray.add(x);\r\n    jsonArray.add((Double) null);\r\n    x = -0.00234;\r\n    jsonArray.add(x);\r\n    jsonArray.add((Double) null);\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[1.0,2.13232,0.121,null,-0.00234,null]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testBooleanPrimitiveAddition",
    "start_line": 242,
    "end_line": 254,
    "code": "@Test\r\npublic void testBooleanPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add(true);\r\n    jsonArray.add(true);\r\n    jsonArray.add(false);\r\n    jsonArray.add(false);\r\n    jsonArray.add((Boolean) null);\r\n    jsonArray.add(true);\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[true,true,false,false,null,true]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testCharPrimitiveAddition",
    "start_line": 256,
    "end_line": 270,
    "code": "@Test\r\npublic void testCharPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add('a');\r\n    jsonArray.add('e');\r\n    jsonArray.add('i');\r\n    jsonArray.add((char) 111);\r\n    jsonArray.add((Character) null);\r\n    jsonArray.add('u');\r\n    jsonArray.add(\"and sometimes Y\");\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",null,\\\"u\\\",\\\"and sometimes Y\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testMixedPrimitiveAddition",
    "start_line": 272,
    "end_line": 292,
    "code": "@Test\r\npublic void testMixedPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add('a');\r\n    jsonArray.add(\"apple\");\r\n    jsonArray.add(12121);\r\n    jsonArray.add((char) 111);\r\n    jsonArray.add((Boolean) null);\r\n    assertThat(jsonArray.get(jsonArray.size() - 1)).isEqualTo(JsonNull.INSTANCE);\r\n    jsonArray.add((Character) null);\r\n    assertThat(jsonArray.get(jsonArray.size() - 1)).isEqualTo(JsonNull.INSTANCE);\r\n    jsonArray.add(12.232);\r\n    jsonArray.add(BigInteger.valueOf(2323));\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testNullPrimitiveAddition",
    "start_line": 294,
    "end_line": 313,
    "code": "@Test\r\npublic void testNullPrimitiveAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add((Character) null);\r\n    jsonArray.add((Boolean) null);\r\n    jsonArray.add((Integer) null);\r\n    jsonArray.add((Double) null);\r\n    jsonArray.add((Float) null);\r\n    jsonArray.add((BigInteger) null);\r\n    jsonArray.add((String) null);\r\n    jsonArray.add((Boolean) null);\r\n    jsonArray.add((Number) null);\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[null,null,null,null,null,null,null,null,null]\");\r\n    for (int i = 0; i < jsonArray.size(); i++) {\r\n        // Verify that they are actually a JsonNull and not a Java null\r\n        assertThat(jsonArray.get(i)).isEqualTo(JsonNull.INSTANCE);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testNullJsonElementAddition",
    "start_line": 315,
    "end_line": 320,
    "code": "@Test\r\npublic void testNullJsonElementAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add((JsonElement) null);\r\n    assertThat(jsonArray.get(0)).isEqualTo(JsonNull.INSTANCE);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testSameAddition",
    "start_line": 322,
    "end_line": 339,
    "code": "@Test\r\npublic void testSameAddition() {\r\n    JsonArray jsonArray = new JsonArray();\r\n    jsonArray.add('a');\r\n    jsonArray.add('a');\r\n    jsonArray.add(true);\r\n    jsonArray.add(true);\r\n    jsonArray.add(1212);\r\n    jsonArray.add(1212);\r\n    jsonArray.add(34.34);\r\n    jsonArray.add(34.34);\r\n    jsonArray.add((Boolean) null);\r\n    jsonArray.add((Boolean) null);\r\n    assertThat(jsonArray.toString()).isEqualTo(\"[\\\"a\\\",\\\"a\\\",true,true,1212,1212,34.34,34.34,null,null]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  },
  {
    "type": "method",
    "name": "testToString",
    "start_line": 341,
    "end_line": 356,
    "code": "@Test\r\npublic void testToString() {\r\n    JsonArray array = new JsonArray();\r\n    assertThat(array.toString()).isEqualTo(\"[]\");\r\n    array.add(JsonNull.INSTANCE);\r\n    array.add(Float.NaN);\r\n    array.add(\"a\\0\");\r\n    JsonArray nestedArray = new JsonArray();\r\n    nestedArray.add('\"');\r\n    array.add(nestedArray);\r\n    JsonObject nestedObject = new JsonObject();\r\n    nestedObject.addProperty(\"n\\0\", 1);\r\n    array.add(nestedObject);\r\n    assertThat(array.toString()).isEqualTo(\"[null,NaN,\\\"a\\\\u0000\\\",[\\\"\\\\\\\"\\\"],{\\\"n\\\\u0000\\\":1}]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonArrayTest.java"
  }
]