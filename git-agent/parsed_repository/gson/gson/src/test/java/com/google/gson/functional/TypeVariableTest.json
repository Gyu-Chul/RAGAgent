[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashMap",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.HashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 28,
    "end_line": 28,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "class",
    "name": "TypeVariableTest",
    "start_line": 35,
    "end_line": 144,
    "code": "/**\r\n * Functional test for Gson serialization and deserialization of classes with type variables.\r\n *\r\n * @author Joel Leitch\r\n */\r\npublic class TypeVariableTest {\r\n\r\n    @Test\r\n    public void testAdvancedTypeVariables() {\r\n        Gson gson = new Gson();\r\n        Bar bar1 = new Bar(\"someString\", 1, true);\r\n        ArrayList<Integer> arrayList = new ArrayList<>();\r\n        arrayList.add(1);\r\n        arrayList.add(2);\r\n        arrayList.add(3);\r\n        bar1.map.put(\"key1\", arrayList);\r\n        bar1.map.put(\"key2\", new ArrayList<>());\r\n        String json = gson.toJson(bar1);\r\n        Bar bar2 = gson.fromJson(json, Bar.class);\r\n        assertThat(bar2).isEqualTo(bar1);\r\n    }\r\n\r\n    @Test\r\n    public void testTypeVariablesViaTypeParameter() {\r\n        Gson gson = new Gson();\r\n        Foo<String, Integer> original = new Foo<>(\"e\", 5, false);\r\n        original.map.put(\"f\", Arrays.asList(6, 7));\r\n        Type type = new TypeToken<Foo<String, Integer>>() {\r\n        }.getType();\r\n        String json = gson.toJson(original, type);\r\n        assertThat(json).isEqualTo(\"{\\\"someSField\\\":\\\"e\\\",\\\"someTField\\\":5,\\\"map\\\":{\\\"f\\\":[6,7]},\\\"redField\\\":false}\");\r\n        assertThat(gson.<Foo<String, Integer>>fromJson(json, type)).isEqualTo(original);\r\n    }\r\n\r\n    @Test\r\n    public void testBasicTypeVariables() {\r\n        Gson gson = new Gson();\r\n        Blue blue1 = new Blue(true);\r\n        String json = gson.toJson(blue1);\r\n        Blue blue2 = gson.fromJson(json, Blue.class);\r\n        assertThat(blue2).isEqualTo(blue1);\r\n    }\r\n\r\n    // for missing hashCode() override\r\n    @SuppressWarnings({ \"overrides\", \"EqualsHashCode\" })\r\n    public static class Blue extends Red<Boolean> {\r\n\r\n        public Blue() {\r\n            super(false);\r\n        }\r\n\r\n        public Blue(boolean value) {\r\n            super(value);\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (!(o instanceof Blue)) {\r\n                return false;\r\n            }\r\n            Blue blue = (Blue) o;\r\n            return redField.equals(blue.redField);\r\n        }\r\n    }\r\n\r\n    public static class Red<S> {\r\n\r\n        protected S redField;\r\n\r\n        public Red() {\r\n        }\r\n\r\n        public Red(S redField) {\r\n            this.redField = redField;\r\n        }\r\n    }\r\n\r\n    // for missing hashCode() override\r\n    @SuppressWarnings({ \"overrides\", \"EqualsHashCode\" })\r\n    public static class Foo<S, T> extends Red<Boolean> {\r\n\r\n        private S someSField;\r\n\r\n        private T someTField;\r\n\r\n        public final Map<S, List<T>> map = new HashMap<>();\r\n\r\n        public Foo() {\r\n        }\r\n\r\n        public Foo(S sValue, T tValue, Boolean redField) {\r\n            super(redField);\r\n            this.someSField = sValue;\r\n            this.someTField = tValue;\r\n        }\r\n\r\n        @Override\r\n        @SuppressWarnings(\"unchecked\")\r\n        public boolean equals(Object o) {\r\n            if (!(o instanceof Foo<?, ?>)) {\r\n                return false;\r\n            }\r\n            Foo<S, T> realFoo = (Foo<S, T>) o;\r\n            return redField.equals(realFoo.redField) && someTField.equals(realFoo.someTField) && someSField.equals(realFoo.someSField) && map.equals(realFoo.map);\r\n        }\r\n    }\r\n\r\n    public static class Bar extends Foo<String, Integer> {\r\n\r\n        public Bar() {\r\n            this(\"\", 0, false);\r\n        }\r\n\r\n        public Bar(String s, Integer i, boolean b) {\r\n            super(s, i, b);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "method",
    "name": "testAdvancedTypeVariables",
    "start_line": 37,
    "end_line": 51,
    "code": "@Test\r\npublic void testAdvancedTypeVariables() {\r\n    Gson gson = new Gson();\r\n    Bar bar1 = new Bar(\"someString\", 1, true);\r\n    ArrayList<Integer> arrayList = new ArrayList<>();\r\n    arrayList.add(1);\r\n    arrayList.add(2);\r\n    arrayList.add(3);\r\n    bar1.map.put(\"key1\", arrayList);\r\n    bar1.map.put(\"key2\", new ArrayList<>());\r\n    String json = gson.toJson(bar1);\r\n    Bar bar2 = gson.fromJson(json, Bar.class);\r\n    assertThat(bar2).isEqualTo(bar1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "method",
    "name": "testTypeVariablesViaTypeParameter",
    "start_line": 53,
    "end_line": 64,
    "code": "@Test\r\npublic void testTypeVariablesViaTypeParameter() {\r\n    Gson gson = new Gson();\r\n    Foo<String, Integer> original = new Foo<>(\"e\", 5, false);\r\n    original.map.put(\"f\", Arrays.asList(6, 7));\r\n    Type type = new TypeToken<Foo<String, Integer>>() {\r\n    }.getType();\r\n    String json = gson.toJson(original, type);\r\n    assertThat(json).isEqualTo(\"{\\\"someSField\\\":\\\"e\\\",\\\"someTField\\\":5,\\\"map\\\":{\\\"f\\\":[6,7]},\\\"redField\\\":false}\");\r\n    assertThat(gson.<Foo<String, Integer>>fromJson(json, type)).isEqualTo(original);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  },
  {
    "type": "method",
    "name": "testBasicTypeVariables",
    "start_line": 66,
    "end_line": 74,
    "code": "@Test\r\npublic void testBasicTypeVariables() {\r\n    Gson gson = new Gson();\r\n    Blue blue1 = new Blue(true);\r\n    String json = gson.toJson(blue1);\r\n    Blue blue2 = gson.fromJson(json, Blue.class);\r\n    assertThat(blue2).isEqualTo(blue1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\TypeVariableTest.java"
  }
]