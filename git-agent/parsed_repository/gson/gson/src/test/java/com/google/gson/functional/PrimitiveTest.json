[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.LongSerializationPolicy",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.LongSerializationPolicy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.io.Serializable",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.Serializable;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 35,
    "end_line": 35,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 36,
    "end_line": 36,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "class",
    "name": "PrimitiveTest",
    "start_line": 44,
    "end_line": 972,
    "code": "/**\r\n * Functional tests for Json primitive values: integers, and floating point numbers.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class PrimitiveTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveIntegerAutoboxedSerialization() {\r\n        assertThat(gson.toJson(1)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveIntegerAutoboxedDeserialization() {\r\n        int expected = 1;\r\n        int actual = gson.fromJson(\"1\", int.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n        actual = gson.fromJson(\"1\", Integer.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testByteSerialization() {\r\n        assertThat(gson.toJson(1, byte.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(1, Byte.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(Byte.MIN_VALUE, Byte.class)).isEqualTo(Byte.toString(Byte.MIN_VALUE));\r\n        assertThat(gson.toJson(Byte.MAX_VALUE, Byte.class)).isEqualTo(Byte.toString(Byte.MAX_VALUE));\r\n        // Should perform narrowing conversion\r\n        assertThat(gson.toJson(128, Byte.class)).isEqualTo(\"-128\");\r\n        assertThat(gson.toJson(1.5, Byte.class)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testByteDeserialization() {\r\n        Byte boxed = gson.fromJson(\"1\", Byte.class);\r\n        assertThat(boxed).isEqualTo(1);\r\n        byte primitive = gson.fromJson(\"1\", byte.class);\r\n        assertThat(primitive).isEqualTo(1);\r\n        byte[] bytes = gson.fromJson(\"[-128, 0, 127, 255]\", byte[].class);\r\n        assertThat(bytes).isEqualTo(new byte[] { -128, 0, 127, -1 });\r\n    }\r\n\r\n    @Test\r\n    public void testByteDeserializationLossy() {\r\n        JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-129\", byte.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from -129 to byte; at path $\");\r\n        e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"256\", byte.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from 256 to byte; at path $\");\r\n        e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"2147483648\", byte.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"java.lang.NumberFormatException: Expected an int but was 2147483648\" + \" at line 1 column 11 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testShortSerialization() {\r\n        assertThat(gson.toJson(1, short.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(1, Short.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(Short.MIN_VALUE, Short.class)).isEqualTo(Short.toString(Short.MIN_VALUE));\r\n        assertThat(gson.toJson(Short.MAX_VALUE, Short.class)).isEqualTo(Short.toString(Short.MAX_VALUE));\r\n        // Should perform widening conversion\r\n        assertThat(gson.toJson((byte) 1, Short.class)).isEqualTo(\"1\");\r\n        // Should perform narrowing conversion\r\n        assertThat(gson.toJson(32768, Short.class)).isEqualTo(\"-32768\");\r\n        assertThat(gson.toJson(1.5, Short.class)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testShortDeserialization() {\r\n        Short boxed = gson.fromJson(\"1\", Short.class);\r\n        assertThat(boxed).isEqualTo(1);\r\n        short primitive = gson.fromJson(\"1\", short.class);\r\n        assertThat(primitive).isEqualTo(1);\r\n        short[] shorts = gson.fromJson(\"[-32768, 0, 32767, 65535]\", short[].class);\r\n        assertThat(shorts).isEqualTo(new short[] { -32768, 0, 32767, -1 });\r\n    }\r\n\r\n    @Test\r\n    public void testShortDeserializationLossy() {\r\n        JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-32769\", short.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from -32769 to short; at path $\");\r\n        e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"65536\", short.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from 65536 to short; at path $\");\r\n        e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"2147483648\", short.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"java.lang.NumberFormatException: Expected an int but was 2147483648\" + \" at line 1 column 11 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testIntSerialization() {\r\n        assertThat(gson.toJson(1, int.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(1, Integer.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(Integer.MIN_VALUE, Integer.class)).isEqualTo(Integer.toString(Integer.MIN_VALUE));\r\n        assertThat(gson.toJson(Integer.MAX_VALUE, Integer.class)).isEqualTo(Integer.toString(Integer.MAX_VALUE));\r\n        // Should perform widening conversion\r\n        assertThat(gson.toJson((byte) 1, Integer.class)).isEqualTo(\"1\");\r\n        // Should perform narrowing conversion\r\n        assertThat(gson.toJson(2147483648L, Integer.class)).isEqualTo(\"-2147483648\");\r\n        assertThat(gson.toJson(1.5, Integer.class)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testLongSerialization() {\r\n        assertThat(gson.toJson(1L, long.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(1L, Long.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(Long.MIN_VALUE, Long.class)).isEqualTo(Long.toString(Long.MIN_VALUE));\r\n        assertThat(gson.toJson(Long.MAX_VALUE, Long.class)).isEqualTo(Long.toString(Long.MAX_VALUE));\r\n        // Should perform widening conversion\r\n        assertThat(gson.toJson((byte) 1, Long.class)).isEqualTo(\"1\");\r\n        // Should perform narrowing conversion\r\n        assertThat(gson.toJson(1.5, Long.class)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testFloatSerialization() {\r\n        assertThat(gson.toJson(1.5f, float.class)).isEqualTo(\"1.5\");\r\n        assertThat(gson.toJson(1.5f, Float.class)).isEqualTo(\"1.5\");\r\n        assertThat(gson.toJson(Float.MIN_VALUE, Float.class)).isEqualTo(Float.toString(Float.MIN_VALUE));\r\n        assertThat(gson.toJson(Float.MAX_VALUE, Float.class)).isEqualTo(Float.toString(Float.MAX_VALUE));\r\n        // Should perform widening conversion\r\n        assertThat(gson.toJson((byte) 1, Float.class)).isEqualTo(\"1.0\");\r\n        // (This widening conversion is actually lossy)\r\n        assertThat(gson.toJson(Long.MAX_VALUE - 10L, Float.class)).isEqualTo(Float.toString((float) (Long.MAX_VALUE - 10L)));\r\n        // Should perform narrowing conversion\r\n        gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Double.MAX_VALUE, Float.class)).isEqualTo(\"Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleSerialization() {\r\n        assertThat(gson.toJson(1.5, double.class)).isEqualTo(\"1.5\");\r\n        assertThat(gson.toJson(1.5, Double.class)).isEqualTo(\"1.5\");\r\n        assertThat(gson.toJson(Double.MIN_VALUE, Double.class)).isEqualTo(Double.toString(Double.MIN_VALUE));\r\n        assertThat(gson.toJson(Double.MAX_VALUE, Double.class)).isEqualTo(Double.toString(Double.MAX_VALUE));\r\n        // Should perform widening conversion\r\n        assertThat(gson.toJson((byte) 1, Double.class)).isEqualTo(\"1.0\");\r\n        // (This widening conversion is actually lossy)\r\n        assertThat(gson.toJson(Long.MAX_VALUE - 10L, Double.class)).isEqualTo(Double.toString((double) (Long.MAX_VALUE - 10L)));\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization() {\r\n        int[] target = { -9332 };\r\n        assertThat(gson.toJson(target)).isEqualTo(\"[-9332]\");\r\n        assertThat(gson.toJson(target, int[].class)).isEqualTo(\"[-9332]\");\r\n        assertThat(gson.toJson(target, Integer[].class)).isEqualTo(\"[-9332]\");\r\n    }\r\n\r\n    @Test\r\n    public void testReallyLongValuesSerialization() {\r\n        long value = 333961828784581L;\r\n        assertThat(gson.toJson(value)).isEqualTo(\"333961828784581\");\r\n    }\r\n\r\n    @Test\r\n    public void testReallyLongValuesDeserialization() {\r\n        String json = \"333961828784581\";\r\n        long value = gson.fromJson(json, Long.class);\r\n        assertThat(value).isEqualTo(333961828784581L);\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveLongAutoboxedSerialization() {\r\n        assertThat(gson.toJson(1L, long.class)).isEqualTo(\"1\");\r\n        assertThat(gson.toJson(1L, Long.class)).isEqualTo(\"1\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveLongAutoboxedDeserialization() {\r\n        long expected = 1L;\r\n        long actual = gson.fromJson(\"1\", long.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n        actual = gson.fromJson(\"1\", Long.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveLongAutoboxedInASingleElementArraySerialization() {\r\n        long[] target = { -23L };\r\n        assertThat(gson.toJson(target)).isEqualTo(\"[-23]\");\r\n        assertThat(gson.toJson(target, long[].class)).isEqualTo(\"[-23]\");\r\n        assertThat(gson.toJson(target, Long[].class)).isEqualTo(\"[-23]\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveBooleanAutoboxedSerialization() {\r\n        assertThat(gson.toJson(true)).isEqualTo(\"true\");\r\n        assertThat(gson.toJson(false)).isEqualTo(\"false\");\r\n    }\r\n\r\n    @Test\r\n    public void testBooleanDeserialization() {\r\n        boolean value = gson.fromJson(\"false\", boolean.class);\r\n        assertThat(value).isEqualTo(false);\r\n        value = gson.fromJson(\"true\", boolean.class);\r\n        assertThat(value).isEqualTo(true);\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization() {\r\n        boolean[] target = { false };\r\n        assertThat(gson.toJson(target)).isEqualTo(\"[false]\");\r\n        assertThat(gson.toJson(target, boolean[].class)).isEqualTo(\"[false]\");\r\n        assertThat(gson.toJson(target, Boolean[].class)).isEqualTo(\"[false]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNumberSerialization() {\r\n        Number expected = 1L;\r\n        String json = gson.toJson(expected);\r\n        assertThat(json).isEqualTo(expected.toString());\r\n        json = gson.toJson(expected, Number.class);\r\n        assertThat(json).isEqualTo(expected.toString());\r\n    }\r\n\r\n    @Test\r\n    public void testNumberDeserialization() {\r\n        String json = \"1\";\r\n        Number expected = Integer.valueOf(json);\r\n        Number actual = gson.fromJson(json, Number.class);\r\n        assertThat(actual.intValue()).isEqualTo(expected.intValue());\r\n        json = String.valueOf(Long.MAX_VALUE);\r\n        expected = Long.valueOf(json);\r\n        actual = gson.fromJson(json, Number.class);\r\n        assertThat(actual.longValue()).isEqualTo(expected.longValue());\r\n        json = \"1.0\";\r\n        actual = gson.fromJson(json, Number.class);\r\n        assertThat(actual.longValue()).isEqualTo(1L);\r\n    }\r\n\r\n    @Test\r\n    public void testNumberAsStringDeserialization() {\r\n        Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);\r\n        assertThat(value.intValue()).isEqualTo(18);\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveDoubleAutoboxedSerialization() {\r\n        assertThat(gson.toJson(-122.08234335D)).isEqualTo(\"-122.08234335\");\r\n        assertThat(gson.toJson(122.08112002D)).isEqualTo(\"122.08112002\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveDoubleAutoboxedDeserialization() {\r\n        double actual = gson.fromJson(\"-122.08858585\", double.class);\r\n        assertThat(actual).isEqualTo(-122.08858585D);\r\n        actual = gson.fromJson(\"122.023900008000\", Double.class);\r\n        assertThat(actual).isEqualTo(122.023900008D);\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {\r\n        double[] target = { -122.08D };\r\n        assertThat(gson.toJson(target)).isEqualTo(\"[-122.08]\");\r\n        assertThat(gson.toJson(target, double[].class)).isEqualTo(\"[-122.08]\");\r\n        assertThat(gson.toJson(target, Double[].class)).isEqualTo(\"[-122.08]\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleAsStringRepresentationDeserialization() {\r\n        String doubleValue = \"1.0043E+5\";\r\n        Double expected = Double.valueOf(doubleValue);\r\n        Double actual = gson.fromJson(doubleValue, Double.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n        double actual1 = gson.fromJson(doubleValue, double.class);\r\n        assertThat(actual1).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleNoFractAsStringRepresentationDeserialization() {\r\n        String doubleValue = \"1E+5\";\r\n        Double expected = Double.valueOf(doubleValue);\r\n        Double actual = gson.fromJson(doubleValue, Double.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n        double actual1 = gson.fromJson(doubleValue, double.class);\r\n        assertThat(actual1).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleArrayDeserialization() {\r\n        String json = \"[0.0, 0.004761904761904762, 3.4013606962703525E-4, 7.936508173034305E-4,\" + \"0.0011904761904761906, 0.0]\";\r\n        double[] values = gson.fromJson(json, double[].class);\r\n        assertThat(values).hasLength(6);\r\n        assertThat(values[0]).isEqualTo(0.0);\r\n        assertThat(values[1]).isEqualTo(0.004761904761904762);\r\n        assertThat(values[2]).isEqualTo(3.4013606962703525E-4);\r\n        assertThat(values[3]).isEqualTo(7.936508173034305E-4);\r\n        assertThat(values[4]).isEqualTo(0.0011904761904761906);\r\n        assertThat(values[5]).isEqualTo(0.0);\r\n    }\r\n\r\n    @Test\r\n    public void testLargeDoubleDeserialization() {\r\n        String doubleValue = \"1.234567899E8\";\r\n        Double expected = Double.valueOf(doubleValue);\r\n        Double actual = gson.fromJson(doubleValue, Double.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n        double actual1 = gson.fromJson(doubleValue, double.class);\r\n        assertThat(actual1).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalSerialization() {\r\n        BigDecimal target = new BigDecimal(\"-122.0e-21\");\r\n        String json = gson.toJson(target);\r\n        assertThat(new BigDecimal(json)).isEqualTo(target);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalDeserialization() {\r\n        BigDecimal target = new BigDecimal(\"-122.0e-21\");\r\n        String json = \"-122.0e-21\";\r\n        assertThat(gson.fromJson(json, BigDecimal.class)).isEqualTo(target);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalInASingleElementArraySerialization() {\r\n        BigDecimal[] target = { new BigDecimal(\"-122.08e-21\") };\r\n        String json = gson.toJson(target);\r\n        String actual = extractElementFromArray(json);\r\n        assertThat(new BigDecimal(actual)).isEqualTo(target[0]);\r\n        json = gson.toJson(target, BigDecimal[].class);\r\n        actual = extractElementFromArray(json);\r\n        assertThat(new BigDecimal(actual)).isEqualTo(target[0]);\r\n    }\r\n\r\n    @Test\r\n    public void testSmallValueForBigDecimalSerialization() {\r\n        BigDecimal target = new BigDecimal(\"1.55\");\r\n        String actual = gson.toJson(target);\r\n        assertThat(actual).isEqualTo(target.toString());\r\n    }\r\n\r\n    @Test\r\n    public void testSmallValueForBigDecimalDeserialization() {\r\n        BigDecimal expected = new BigDecimal(\"1.55\");\r\n        BigDecimal actual = gson.fromJson(\"1.55\", BigDecimal.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalPreservePrecisionSerialization() {\r\n        String expectedValue = \"1.000\";\r\n        BigDecimal obj = new BigDecimal(expectedValue);\r\n        String actualValue = gson.toJson(obj);\r\n        assertThat(actualValue).isEqualTo(expectedValue);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalPreservePrecisionDeserialization() {\r\n        String json = \"1.000\";\r\n        BigDecimal expected = new BigDecimal(json);\r\n        BigDecimal actual = gson.fromJson(json, BigDecimal.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalAsStringRepresentationDeserialization() {\r\n        String doubleValue = \"0.05E+5\";\r\n        BigDecimal expected = new BigDecimal(doubleValue);\r\n        BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalNoFractAsStringRepresentationDeserialization() {\r\n        String doubleValue = \"5E+5\";\r\n        BigDecimal expected = new BigDecimal(doubleValue);\r\n        BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBigIntegerSerialization() {\r\n        BigInteger target = new BigInteger(\"12121211243123245845384534687435634558945453489543985435\");\r\n        assertThat(gson.toJson(target)).isEqualTo(target.toString());\r\n    }\r\n\r\n    @Test\r\n    public void testBigIntegerDeserialization() {\r\n        String json = \"12121211243123245845384534687435634558945453489543985435\";\r\n        BigInteger target = new BigInteger(json);\r\n        assertThat(gson.fromJson(json, BigInteger.class)).isEqualTo(target);\r\n    }\r\n\r\n    @Test\r\n    public void testBigIntegerInASingleElementArraySerialization() {\r\n        BigInteger[] target = { new BigInteger(\"1212121243434324323254365345367456456456465464564564\") };\r\n        String json = gson.toJson(target);\r\n        String actual = extractElementFromArray(json);\r\n        assertThat(new BigInteger(actual)).isEqualTo(target[0]);\r\n        json = gson.toJson(target, BigInteger[].class);\r\n        actual = extractElementFromArray(json);\r\n        assertThat(new BigInteger(actual)).isEqualTo(target[0]);\r\n    }\r\n\r\n    @Test\r\n    public void testSmallValueForBigIntegerSerialization() {\r\n        BigInteger target = new BigInteger(\"15\");\r\n        String actual = gson.toJson(target);\r\n        assertThat(actual).isEqualTo(target.toString());\r\n    }\r\n\r\n    @Test\r\n    public void testSmallValueForBigIntegerDeserialization() {\r\n        BigInteger expected = new BigInteger(\"15\");\r\n        BigInteger actual = gson.fromJson(\"15\", BigInteger.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testBadValueForBigIntegerDeserialization() {\r\n        // BigInteger can not be decimal values\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"15.099\", BigInteger.class));\r\n    }\r\n\r\n    @Test\r\n    public void testLazilyParsedNumberSerialization() {\r\n        LazilyParsedNumber target = new LazilyParsedNumber(\"1.5\");\r\n        String actual = gson.toJson(target);\r\n        assertThat(actual).isEqualTo(\"1.5\");\r\n    }\r\n\r\n    @Test\r\n    public void testLazilyParsedNumberDeserialization() {\r\n        LazilyParsedNumber expected = new LazilyParsedNumber(\"1.5\");\r\n        LazilyParsedNumber actual = gson.fromJson(\"1.5\", LazilyParsedNumber.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testMoreSpecificSerialization() {\r\n        Gson gson = new Gson();\r\n        String expected = \"This is a string\";\r\n        String expectedJson = gson.toJson(expected);\r\n        Serializable serializableString = expected;\r\n        String actualJson = gson.toJson(serializableString, Serializable.class);\r\n        assertThat(actualJson).isNotEqualTo(expectedJson);\r\n    }\r\n\r\n    private static String extractElementFromArray(String json) {\r\n        return json.substring(json.indexOf('[') + 1, json.lastIndexOf(']'));\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleNaNSerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"NaN is not a valid double value as per JSON specification. To override this behavior,\" + \" use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NaN, double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NaN, Double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleNaNSerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Double.NaN, double.class)).isEqualTo(\"NaN\");\r\n        assertThat(gson.toJson(Double.NaN, Double.class)).isEqualTo(\"NaN\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleNaNDeserialization() {\r\n        assertThat(gson.fromJson(\"NaN\", double.class)).isNaN();\r\n        assertThat(gson.fromJson(\"NaN\", Double.class)).isNaN();\r\n    }\r\n\r\n    @Test\r\n    public void testFloatNaNSerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"NaN is not a valid double value as per JSON specification. To override this behavior,\" + \" use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NaN, float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NaN, Float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testFloatNaNSerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Float.NaN, float.class)).isEqualTo(\"NaN\");\r\n        assertThat(gson.toJson(Float.NaN, Float.class)).isEqualTo(\"NaN\");\r\n    }\r\n\r\n    @Test\r\n    public void testFloatNaNDeserialization() {\r\n        assertThat(gson.fromJson(\"NaN\", float.class)).isNaN();\r\n        assertThat(gson.fromJson(\"NaN\", Float.class)).isNaN();\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalNaNDeserializationNotSupported() {\r\n        // Gson should not accept NaN for deserialization of BigDecimal\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"NaN\", BigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleInfinitySerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.POSITIVE_INFINITY, double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.POSITIVE_INFINITY, Double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleInfinitySerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Double.POSITIVE_INFINITY, double.class)).isEqualTo(\"Infinity\");\r\n        assertThat(gson.toJson(Double.POSITIVE_INFINITY, Double.class)).isEqualTo(\"Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleInfinityDeserialization() {\r\n        assertThat(gson.fromJson(\"Infinity\", double.class)).isPositiveInfinity();\r\n        assertThat(gson.fromJson(\"Infinity\", Double.class)).isPositiveInfinity();\r\n    }\r\n\r\n    @Test\r\n    public void testFloatInfinitySerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.POSITIVE_INFINITY, float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.POSITIVE_INFINITY, Float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testFloatInfinitySerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Float.POSITIVE_INFINITY, float.class)).isEqualTo(\"Infinity\");\r\n        assertThat(gson.toJson(Float.POSITIVE_INFINITY, Float.class)).isEqualTo(\"Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testFloatInfinityDeserialization() {\r\n        assertThat(gson.fromJson(\"Infinity\", float.class)).isPositiveInfinity();\r\n        assertThat(gson.fromJson(\"Infinity\", Float.class)).isPositiveInfinity();\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalInfinityDeserializationNotSupported() {\r\n        // Gson should not accept positive infinity for deserialization of BigDecimal\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"Infinity\", BigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinitySerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"-Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NEGATIVE_INFINITY, double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NEGATIVE_INFINITY, Double.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinitySerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Double.NEGATIVE_INFINITY, double.class)).isEqualTo(\"-Infinity\");\r\n        assertThat(gson.toJson(Double.NEGATIVE_INFINITY, Double.class)).isEqualTo(\"-Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinityDeserialization() {\r\n        assertThat(gson.fromJson(\"-Infinity\", double.class)).isNegativeInfinity();\r\n        assertThat(gson.fromJson(\"-Infinity\", Double.class)).isNegativeInfinity();\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinityFloatSerializationNotSupportedByDefault() {\r\n        String expectedMessage = \"-Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n        var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NEGATIVE_INFINITY, float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NEGATIVE_INFINITY, Float.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinityFloatSerialization() {\r\n        Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n        assertThat(gson.toJson(Float.NEGATIVE_INFINITY, float.class)).isEqualTo(\"-Infinity\");\r\n        assertThat(gson.toJson(Float.NEGATIVE_INFINITY, Float.class)).isEqualTo(\"-Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testNegativeInfinityFloatDeserialization() {\r\n        assertThat(gson.fromJson(\"-Infinity\", float.class)).isNegativeInfinity();\r\n        assertThat(gson.fromJson(\"-Infinity\", Float.class)).isNegativeInfinity();\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalNegativeInfinityDeserializationNotSupported() {\r\n        // Gson should not accept negative infinity for deserialization of BigDecimal\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-Infinity\", BigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testLongAsStringSerialization() {\r\n        gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\r\n        String result = gson.toJson(15L);\r\n        assertThat(result).isEqualTo(\"\\\"15\\\"\");\r\n        // Test with an integer and ensure its still a number\r\n        result = gson.toJson(2);\r\n        assertThat(result).isEqualTo(\"2\");\r\n    }\r\n\r\n    @Test\r\n    public void testLongAsStringDeserialization() {\r\n        long value = gson.fromJson(\"\\\"15\\\"\", long.class);\r\n        assertThat(value).isEqualTo(15);\r\n        gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\r\n        value = gson.fromJson(\"\\\"25\\\"\", long.class);\r\n        assertThat(value).isEqualTo(25);\r\n    }\r\n\r\n    @Test\r\n    public void testQuotedStringSerializationAndDeserialization() {\r\n        String value = \"String Blah Blah Blah...1, 2, 3\";\r\n        String serializedForm = gson.toJson(value);\r\n        assertThat(serializedForm).isEqualTo(\"\\\"\" + value + \"\\\"\");\r\n        String actual = gson.fromJson(serializedForm, String.class);\r\n        assertThat(actual).isEqualTo(value);\r\n    }\r\n\r\n    @Test\r\n    public void testUnquotedStringDeserializationFails() {\r\n        assertThat(gson.fromJson(\"UnquotedSingleWord\", String.class)).isEqualTo(\"UnquotedSingleWord\");\r\n        String value = \"String Blah Blah Blah...1, 2, 3\";\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(value, String.class));\r\n    }\r\n\r\n    @Test\r\n    public void testHtmlCharacterSerialization() {\r\n        String target = \"<script>var a = 12;</script>\";\r\n        String result = gson.toJson(target);\r\n        assertThat(result).isNotEqualTo('\"' + target + '\"');\r\n        gson = new GsonBuilder().disableHtmlEscaping().create();\r\n        result = gson.toJson(target);\r\n        assertThat(result).isEqualTo('\"' + target + '\"');\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializePrimitiveWrapperAsObjectField() {\r\n        String json = \"{i:10}\";\r\n        ClassWithIntegerField target = gson.fromJson(json, ClassWithIntegerField.class);\r\n        assertThat(target.i).isEqualTo(10);\r\n    }\r\n\r\n    private static class ClassWithIntegerField {\r\n\r\n        Integer i;\r\n    }\r\n\r\n    @Test\r\n    public void testPrimitiveClassLiteral() {\r\n        assertThat(gson.fromJson(\"1\", int.class)).isEqualTo(1);\r\n        assertThat(gson.fromJson(new StringReader(\"1\"), int.class)).isEqualTo(1);\r\n        assertThat(gson.fromJson(new JsonPrimitive(1), int.class)).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsLongPrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", long.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsLongWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3]\", Long.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsInt() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, 2, 3, 4]\", int.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsInteger() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{}\", Integer.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsShortPrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", short.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsShortWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"['a','b']\", Short.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsDoublePrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2]\", double.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsDoubleWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", Double.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsFloatPrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", float.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsFloatWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3]\", Float.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsBytePrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", byte.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsByteWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Byte.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsBooleanPrimitive() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", boolean.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsBooleanWrapper() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Boolean.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsBigDecimal() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", BigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsBigDecimal() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'a':1}\", BigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsBigInteger() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", BigInteger.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsBigInteger() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'c':2}\", BigInteger.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonArrayAsNumber() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Number.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeJsonObjectAsNumber() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'c':2}\", Number.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingDecimalPointValueZeroSucceeds() {\r\n        assertThat(gson.fromJson(\"1.0\", Integer.class)).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingNonZeroDecimalPointValuesAsIntegerFails() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Byte.class));\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Short.class));\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Integer.class));\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Long.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingBigDecimalAsIntegerFails() {\r\n        JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-122.08e-213\", Integer.class));\r\n        assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected an int but was -122.08e-213 at line 1 column 13 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingBigIntegerAsInteger() {\r\n        String number = \"12121211243123245845384534687435634558945453489543985435\";\r\n        JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(number, Integer.class));\r\n        assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected an int but was \" + number + \" at line 1 column 57 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingBigIntegerAsLong() {\r\n        String number = \"12121211243123245845384534687435634558945453489543985435\";\r\n        JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(number, Long.class));\r\n        assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected a long but was \" + number + \" at line 1 column 57 path $\");\r\n    }\r\n\r\n    @Test\r\n    public void testValueVeryCloseToZeroIsZero() {\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", byte.class)).isEqualTo(0);\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", short.class)).isEqualTo(0);\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", int.class)).isEqualTo(0);\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", long.class)).isEqualTo(0);\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", float.class)).isEqualTo(-0.0f);\r\n        assertThat(gson.fromJson(\"-122.08e-2132\", double.class)).isEqualTo(-0.0);\r\n        assertThat(gson.fromJson(\"122.08e-2132\", float.class)).isEqualTo(0.0f);\r\n        assertThat(gson.fromJson(\"122.08e-2132\", double.class)).isEqualTo(0.0);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingBigDecimalAsBigIntegerFails() {\r\n        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-122.08e-213\", BigInteger.class));\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingBigIntegerAsBigDecimal() {\r\n        BigDecimal actual = gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", BigDecimal.class);\r\n        assertThat(actual.toPlainString()).isEqualTo(\"12121211243123245845384534687435634558945453489543985435\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringsAsBooleans() {\r\n        String json = \"['true', 'false', 'TRUE', 'yes', '1']\";\r\n        List<Boolean> deserialized = gson.fromJson(json, new TypeToken<List<Boolean>>() {\r\n        });\r\n        assertThat(deserialized).isEqualTo(Arrays.asList(true, false, true, false, false));\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 45,
    "end_line": 45,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 47,
    "end_line": 50,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveIntegerAutoboxedSerialization",
    "start_line": 52,
    "end_line": 55,
    "code": "@Test\r\npublic void testPrimitiveIntegerAutoboxedSerialization() {\r\n    assertThat(gson.toJson(1)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveIntegerAutoboxedDeserialization",
    "start_line": 57,
    "end_line": 65,
    "code": "@Test\r\npublic void testPrimitiveIntegerAutoboxedDeserialization() {\r\n    int expected = 1;\r\n    int actual = gson.fromJson(\"1\", int.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n    actual = gson.fromJson(\"1\", Integer.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteSerialization",
    "start_line": 67,
    "end_line": 76,
    "code": "@Test\r\npublic void testByteSerialization() {\r\n    assertThat(gson.toJson(1, byte.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(1, Byte.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(Byte.MIN_VALUE, Byte.class)).isEqualTo(Byte.toString(Byte.MIN_VALUE));\r\n    assertThat(gson.toJson(Byte.MAX_VALUE, Byte.class)).isEqualTo(Byte.toString(Byte.MAX_VALUE));\r\n    // Should perform narrowing conversion\r\n    assertThat(gson.toJson(128, Byte.class)).isEqualTo(\"-128\");\r\n    assertThat(gson.toJson(1.5, Byte.class)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteDeserialization",
    "start_line": 78,
    "end_line": 87,
    "code": "@Test\r\npublic void testByteDeserialization() {\r\n    Byte boxed = gson.fromJson(\"1\", Byte.class);\r\n    assertThat(boxed).isEqualTo(1);\r\n    byte primitive = gson.fromJson(\"1\", byte.class);\r\n    assertThat(primitive).isEqualTo(1);\r\n    byte[] bytes = gson.fromJson(\"[-128, 0, 127, 255]\", byte[].class);\r\n    assertThat(bytes).isEqualTo(new byte[] { -128, 0, 127, -1 });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteDeserializationLossy",
    "start_line": 89,
    "end_line": 104,
    "code": "@Test\r\npublic void testByteDeserializationLossy() {\r\n    JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-129\", byte.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from -129 to byte; at path $\");\r\n    e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"256\", byte.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from 256 to byte; at path $\");\r\n    e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"2147483648\", byte.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"java.lang.NumberFormatException: Expected an int but was 2147483648\" + \" at line 1 column 11 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortSerialization",
    "start_line": 106,
    "end_line": 119,
    "code": "@Test\r\npublic void testShortSerialization() {\r\n    assertThat(gson.toJson(1, short.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(1, Short.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(Short.MIN_VALUE, Short.class)).isEqualTo(Short.toString(Short.MIN_VALUE));\r\n    assertThat(gson.toJson(Short.MAX_VALUE, Short.class)).isEqualTo(Short.toString(Short.MAX_VALUE));\r\n    // Should perform widening conversion\r\n    assertThat(gson.toJson((byte) 1, Short.class)).isEqualTo(\"1\");\r\n    // Should perform narrowing conversion\r\n    assertThat(gson.toJson(32768, Short.class)).isEqualTo(\"-32768\");\r\n    assertThat(gson.toJson(1.5, Short.class)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortDeserialization",
    "start_line": 121,
    "end_line": 130,
    "code": "@Test\r\npublic void testShortDeserialization() {\r\n    Short boxed = gson.fromJson(\"1\", Short.class);\r\n    assertThat(boxed).isEqualTo(1);\r\n    short primitive = gson.fromJson(\"1\", short.class);\r\n    assertThat(primitive).isEqualTo(1);\r\n    short[] shorts = gson.fromJson(\"[-32768, 0, 32767, 65535]\", short[].class);\r\n    assertThat(shorts).isEqualTo(new short[] { -32768, 0, 32767, -1 });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortDeserializationLossy",
    "start_line": 132,
    "end_line": 147,
    "code": "@Test\r\npublic void testShortDeserializationLossy() {\r\n    JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-32769\", short.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from -32769 to short; at path $\");\r\n    e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"65536\", short.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Lossy conversion from 65536 to short; at path $\");\r\n    e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"2147483648\", short.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"java.lang.NumberFormatException: Expected an int but was 2147483648\" + \" at line 1 column 11 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testIntSerialization",
    "start_line": 149,
    "end_line": 162,
    "code": "@Test\r\npublic void testIntSerialization() {\r\n    assertThat(gson.toJson(1, int.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(1, Integer.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(Integer.MIN_VALUE, Integer.class)).isEqualTo(Integer.toString(Integer.MIN_VALUE));\r\n    assertThat(gson.toJson(Integer.MAX_VALUE, Integer.class)).isEqualTo(Integer.toString(Integer.MAX_VALUE));\r\n    // Should perform widening conversion\r\n    assertThat(gson.toJson((byte) 1, Integer.class)).isEqualTo(\"1\");\r\n    // Should perform narrowing conversion\r\n    assertThat(gson.toJson(2147483648L, Integer.class)).isEqualTo(\"-2147483648\");\r\n    assertThat(gson.toJson(1.5, Integer.class)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLongSerialization",
    "start_line": 164,
    "end_line": 174,
    "code": "@Test\r\npublic void testLongSerialization() {\r\n    assertThat(gson.toJson(1L, long.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(1L, Long.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(Long.MIN_VALUE, Long.class)).isEqualTo(Long.toString(Long.MIN_VALUE));\r\n    assertThat(gson.toJson(Long.MAX_VALUE, Long.class)).isEqualTo(Long.toString(Long.MAX_VALUE));\r\n    // Should perform widening conversion\r\n    assertThat(gson.toJson((byte) 1, Long.class)).isEqualTo(\"1\");\r\n    // Should perform narrowing conversion\r\n    assertThat(gson.toJson(1.5, Long.class)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatSerialization",
    "start_line": 176,
    "end_line": 192,
    "code": "@Test\r\npublic void testFloatSerialization() {\r\n    assertThat(gson.toJson(1.5f, float.class)).isEqualTo(\"1.5\");\r\n    assertThat(gson.toJson(1.5f, Float.class)).isEqualTo(\"1.5\");\r\n    assertThat(gson.toJson(Float.MIN_VALUE, Float.class)).isEqualTo(Float.toString(Float.MIN_VALUE));\r\n    assertThat(gson.toJson(Float.MAX_VALUE, Float.class)).isEqualTo(Float.toString(Float.MAX_VALUE));\r\n    // Should perform widening conversion\r\n    assertThat(gson.toJson((byte) 1, Float.class)).isEqualTo(\"1.0\");\r\n    // (This widening conversion is actually lossy)\r\n    assertThat(gson.toJson(Long.MAX_VALUE - 10L, Float.class)).isEqualTo(Float.toString((float) (Long.MAX_VALUE - 10L)));\r\n    // Should perform narrowing conversion\r\n    gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Double.MAX_VALUE, Float.class)).isEqualTo(\"Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleSerialization",
    "start_line": 194,
    "end_line": 207,
    "code": "@Test\r\npublic void testDoubleSerialization() {\r\n    assertThat(gson.toJson(1.5, double.class)).isEqualTo(\"1.5\");\r\n    assertThat(gson.toJson(1.5, Double.class)).isEqualTo(\"1.5\");\r\n    assertThat(gson.toJson(Double.MIN_VALUE, Double.class)).isEqualTo(Double.toString(Double.MIN_VALUE));\r\n    assertThat(gson.toJson(Double.MAX_VALUE, Double.class)).isEqualTo(Double.toString(Double.MAX_VALUE));\r\n    // Should perform widening conversion\r\n    assertThat(gson.toJson((byte) 1, Double.class)).isEqualTo(\"1.0\");\r\n    // (This widening conversion is actually lossy)\r\n    assertThat(gson.toJson(Long.MAX_VALUE - 10L, Double.class)).isEqualTo(Double.toString((double) (Long.MAX_VALUE - 10L)));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveIntegerAutoboxedInASingleElementArraySerialization",
    "start_line": 209,
    "end_line": 215,
    "code": "@Test\r\npublic void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization() {\r\n    int[] target = { -9332 };\r\n    assertThat(gson.toJson(target)).isEqualTo(\"[-9332]\");\r\n    assertThat(gson.toJson(target, int[].class)).isEqualTo(\"[-9332]\");\r\n    assertThat(gson.toJson(target, Integer[].class)).isEqualTo(\"[-9332]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testReallyLongValuesSerialization",
    "start_line": 217,
    "end_line": 221,
    "code": "@Test\r\npublic void testReallyLongValuesSerialization() {\r\n    long value = 333961828784581L;\r\n    assertThat(gson.toJson(value)).isEqualTo(\"333961828784581\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testReallyLongValuesDeserialization",
    "start_line": 223,
    "end_line": 228,
    "code": "@Test\r\npublic void testReallyLongValuesDeserialization() {\r\n    String json = \"333961828784581\";\r\n    long value = gson.fromJson(json, Long.class);\r\n    assertThat(value).isEqualTo(333961828784581L);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveLongAutoboxedSerialization",
    "start_line": 230,
    "end_line": 234,
    "code": "@Test\r\npublic void testPrimitiveLongAutoboxedSerialization() {\r\n    assertThat(gson.toJson(1L, long.class)).isEqualTo(\"1\");\r\n    assertThat(gson.toJson(1L, Long.class)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveLongAutoboxedDeserialization",
    "start_line": 236,
    "end_line": 244,
    "code": "@Test\r\npublic void testPrimitiveLongAutoboxedDeserialization() {\r\n    long expected = 1L;\r\n    long actual = gson.fromJson(\"1\", long.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n    actual = gson.fromJson(\"1\", Long.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveLongAutoboxedInASingleElementArraySerialization",
    "start_line": 246,
    "end_line": 252,
    "code": "@Test\r\npublic void testPrimitiveLongAutoboxedInASingleElementArraySerialization() {\r\n    long[] target = { -23L };\r\n    assertThat(gson.toJson(target)).isEqualTo(\"[-23]\");\r\n    assertThat(gson.toJson(target, long[].class)).isEqualTo(\"[-23]\");\r\n    assertThat(gson.toJson(target, Long[].class)).isEqualTo(\"[-23]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveBooleanAutoboxedSerialization",
    "start_line": 254,
    "end_line": 258,
    "code": "@Test\r\npublic void testPrimitiveBooleanAutoboxedSerialization() {\r\n    assertThat(gson.toJson(true)).isEqualTo(\"true\");\r\n    assertThat(gson.toJson(false)).isEqualTo(\"false\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBooleanDeserialization",
    "start_line": 260,
    "end_line": 266,
    "code": "@Test\r\npublic void testBooleanDeserialization() {\r\n    boolean value = gson.fromJson(\"false\", boolean.class);\r\n    assertThat(value).isEqualTo(false);\r\n    value = gson.fromJson(\"true\", boolean.class);\r\n    assertThat(value).isEqualTo(true);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveBooleanAutoboxedInASingleElementArraySerialization",
    "start_line": 268,
    "end_line": 274,
    "code": "@Test\r\npublic void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization() {\r\n    boolean[] target = { false };\r\n    assertThat(gson.toJson(target)).isEqualTo(\"[false]\");\r\n    assertThat(gson.toJson(target, boolean[].class)).isEqualTo(\"[false]\");\r\n    assertThat(gson.toJson(target, Boolean[].class)).isEqualTo(\"[false]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNumberSerialization",
    "start_line": 276,
    "end_line": 284,
    "code": "@Test\r\npublic void testNumberSerialization() {\r\n    Number expected = 1L;\r\n    String json = gson.toJson(expected);\r\n    assertThat(json).isEqualTo(expected.toString());\r\n    json = gson.toJson(expected, Number.class);\r\n    assertThat(json).isEqualTo(expected.toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNumberDeserialization",
    "start_line": 286,
    "end_line": 301,
    "code": "@Test\r\npublic void testNumberDeserialization() {\r\n    String json = \"1\";\r\n    Number expected = Integer.valueOf(json);\r\n    Number actual = gson.fromJson(json, Number.class);\r\n    assertThat(actual.intValue()).isEqualTo(expected.intValue());\r\n    json = String.valueOf(Long.MAX_VALUE);\r\n    expected = Long.valueOf(json);\r\n    actual = gson.fromJson(json, Number.class);\r\n    assertThat(actual.longValue()).isEqualTo(expected.longValue());\r\n    json = \"1.0\";\r\n    actual = gson.fromJson(json, Number.class);\r\n    assertThat(actual.longValue()).isEqualTo(1L);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNumberAsStringDeserialization",
    "start_line": 303,
    "end_line": 307,
    "code": "@Test\r\npublic void testNumberAsStringDeserialization() {\r\n    Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);\r\n    assertThat(value.intValue()).isEqualTo(18);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveDoubleAutoboxedSerialization",
    "start_line": 309,
    "end_line": 313,
    "code": "@Test\r\npublic void testPrimitiveDoubleAutoboxedSerialization() {\r\n    assertThat(gson.toJson(-122.08234335D)).isEqualTo(\"-122.08234335\");\r\n    assertThat(gson.toJson(122.08112002D)).isEqualTo(\"122.08112002\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveDoubleAutoboxedDeserialization",
    "start_line": 315,
    "end_line": 322,
    "code": "@Test\r\npublic void testPrimitiveDoubleAutoboxedDeserialization() {\r\n    double actual = gson.fromJson(\"-122.08858585\", double.class);\r\n    assertThat(actual).isEqualTo(-122.08858585D);\r\n    actual = gson.fromJson(\"122.023900008000\", Double.class);\r\n    assertThat(actual).isEqualTo(122.023900008D);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveDoubleAutoboxedInASingleElementArraySerialization",
    "start_line": 324,
    "end_line": 330,
    "code": "@Test\r\npublic void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {\r\n    double[] target = { -122.08D };\r\n    assertThat(gson.toJson(target)).isEqualTo(\"[-122.08]\");\r\n    assertThat(gson.toJson(target, double[].class)).isEqualTo(\"[-122.08]\");\r\n    assertThat(gson.toJson(target, Double[].class)).isEqualTo(\"[-122.08]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleAsStringRepresentationDeserialization",
    "start_line": 332,
    "end_line": 341,
    "code": "@Test\r\npublic void testDoubleAsStringRepresentationDeserialization() {\r\n    String doubleValue = \"1.0043E+5\";\r\n    Double expected = Double.valueOf(doubleValue);\r\n    Double actual = gson.fromJson(doubleValue, Double.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n    double actual1 = gson.fromJson(doubleValue, double.class);\r\n    assertThat(actual1).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleNoFractAsStringRepresentationDeserialization",
    "start_line": 343,
    "end_line": 352,
    "code": "@Test\r\npublic void testDoubleNoFractAsStringRepresentationDeserialization() {\r\n    String doubleValue = \"1E+5\";\r\n    Double expected = Double.valueOf(doubleValue);\r\n    Double actual = gson.fromJson(doubleValue, Double.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n    double actual1 = gson.fromJson(doubleValue, double.class);\r\n    assertThat(actual1).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleArrayDeserialization",
    "start_line": 354,
    "end_line": 368,
    "code": "@Test\r\npublic void testDoubleArrayDeserialization() {\r\n    String json = \"[0.0, 0.004761904761904762, 3.4013606962703525E-4, 7.936508173034305E-4,\" + \"0.0011904761904761906, 0.0]\";\r\n    double[] values = gson.fromJson(json, double[].class);\r\n    assertThat(values).hasLength(6);\r\n    assertThat(values[0]).isEqualTo(0.0);\r\n    assertThat(values[1]).isEqualTo(0.004761904761904762);\r\n    assertThat(values[2]).isEqualTo(3.4013606962703525E-4);\r\n    assertThat(values[3]).isEqualTo(7.936508173034305E-4);\r\n    assertThat(values[4]).isEqualTo(0.0011904761904761906);\r\n    assertThat(values[5]).isEqualTo(0.0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLargeDoubleDeserialization",
    "start_line": 370,
    "end_line": 379,
    "code": "@Test\r\npublic void testLargeDoubleDeserialization() {\r\n    String doubleValue = \"1.234567899E8\";\r\n    Double expected = Double.valueOf(doubleValue);\r\n    Double actual = gson.fromJson(doubleValue, Double.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n    double actual1 = gson.fromJson(doubleValue, double.class);\r\n    assertThat(actual1).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalSerialization",
    "start_line": 381,
    "end_line": 386,
    "code": "@Test\r\npublic void testBigDecimalSerialization() {\r\n    BigDecimal target = new BigDecimal(\"-122.0e-21\");\r\n    String json = gson.toJson(target);\r\n    assertThat(new BigDecimal(json)).isEqualTo(target);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalDeserialization",
    "start_line": 388,
    "end_line": 393,
    "code": "@Test\r\npublic void testBigDecimalDeserialization() {\r\n    BigDecimal target = new BigDecimal(\"-122.0e-21\");\r\n    String json = \"-122.0e-21\";\r\n    assertThat(gson.fromJson(json, BigDecimal.class)).isEqualTo(target);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalInASingleElementArraySerialization",
    "start_line": 395,
    "end_line": 405,
    "code": "@Test\r\npublic void testBigDecimalInASingleElementArraySerialization() {\r\n    BigDecimal[] target = { new BigDecimal(\"-122.08e-21\") };\r\n    String json = gson.toJson(target);\r\n    String actual = extractElementFromArray(json);\r\n    assertThat(new BigDecimal(actual)).isEqualTo(target[0]);\r\n    json = gson.toJson(target, BigDecimal[].class);\r\n    actual = extractElementFromArray(json);\r\n    assertThat(new BigDecimal(actual)).isEqualTo(target[0]);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testSmallValueForBigDecimalSerialization",
    "start_line": 407,
    "end_line": 412,
    "code": "@Test\r\npublic void testSmallValueForBigDecimalSerialization() {\r\n    BigDecimal target = new BigDecimal(\"1.55\");\r\n    String actual = gson.toJson(target);\r\n    assertThat(actual).isEqualTo(target.toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testSmallValueForBigDecimalDeserialization",
    "start_line": 414,
    "end_line": 419,
    "code": "@Test\r\npublic void testSmallValueForBigDecimalDeserialization() {\r\n    BigDecimal expected = new BigDecimal(\"1.55\");\r\n    BigDecimal actual = gson.fromJson(\"1.55\", BigDecimal.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalPreservePrecisionSerialization",
    "start_line": 421,
    "end_line": 428,
    "code": "@Test\r\npublic void testBigDecimalPreservePrecisionSerialization() {\r\n    String expectedValue = \"1.000\";\r\n    BigDecimal obj = new BigDecimal(expectedValue);\r\n    String actualValue = gson.toJson(obj);\r\n    assertThat(actualValue).isEqualTo(expectedValue);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalPreservePrecisionDeserialization",
    "start_line": 430,
    "end_line": 437,
    "code": "@Test\r\npublic void testBigDecimalPreservePrecisionDeserialization() {\r\n    String json = \"1.000\";\r\n    BigDecimal expected = new BigDecimal(json);\r\n    BigDecimal actual = gson.fromJson(json, BigDecimal.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalAsStringRepresentationDeserialization",
    "start_line": 439,
    "end_line": 445,
    "code": "@Test\r\npublic void testBigDecimalAsStringRepresentationDeserialization() {\r\n    String doubleValue = \"0.05E+5\";\r\n    BigDecimal expected = new BigDecimal(doubleValue);\r\n    BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalNoFractAsStringRepresentationDeserialization",
    "start_line": 447,
    "end_line": 453,
    "code": "@Test\r\npublic void testBigDecimalNoFractAsStringRepresentationDeserialization() {\r\n    String doubleValue = \"5E+5\";\r\n    BigDecimal expected = new BigDecimal(doubleValue);\r\n    BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigIntegerSerialization",
    "start_line": 455,
    "end_line": 459,
    "code": "@Test\r\npublic void testBigIntegerSerialization() {\r\n    BigInteger target = new BigInteger(\"12121211243123245845384534687435634558945453489543985435\");\r\n    assertThat(gson.toJson(target)).isEqualTo(target.toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigIntegerDeserialization",
    "start_line": 461,
    "end_line": 466,
    "code": "@Test\r\npublic void testBigIntegerDeserialization() {\r\n    String json = \"12121211243123245845384534687435634558945453489543985435\";\r\n    BigInteger target = new BigInteger(json);\r\n    assertThat(gson.fromJson(json, BigInteger.class)).isEqualTo(target);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigIntegerInASingleElementArraySerialization",
    "start_line": 468,
    "end_line": 478,
    "code": "@Test\r\npublic void testBigIntegerInASingleElementArraySerialization() {\r\n    BigInteger[] target = { new BigInteger(\"1212121243434324323254365345367456456456465464564564\") };\r\n    String json = gson.toJson(target);\r\n    String actual = extractElementFromArray(json);\r\n    assertThat(new BigInteger(actual)).isEqualTo(target[0]);\r\n    json = gson.toJson(target, BigInteger[].class);\r\n    actual = extractElementFromArray(json);\r\n    assertThat(new BigInteger(actual)).isEqualTo(target[0]);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testSmallValueForBigIntegerSerialization",
    "start_line": 480,
    "end_line": 485,
    "code": "@Test\r\npublic void testSmallValueForBigIntegerSerialization() {\r\n    BigInteger target = new BigInteger(\"15\");\r\n    String actual = gson.toJson(target);\r\n    assertThat(actual).isEqualTo(target.toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testSmallValueForBigIntegerDeserialization",
    "start_line": 487,
    "end_line": 492,
    "code": "@Test\r\npublic void testSmallValueForBigIntegerDeserialization() {\r\n    BigInteger expected = new BigInteger(\"15\");\r\n    BigInteger actual = gson.fromJson(\"15\", BigInteger.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBadValueForBigIntegerDeserialization",
    "start_line": 494,
    "end_line": 498,
    "code": "@Test\r\npublic void testBadValueForBigIntegerDeserialization() {\r\n    // BigInteger can not be decimal values\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"15.099\", BigInteger.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLazilyParsedNumberSerialization",
    "start_line": 500,
    "end_line": 505,
    "code": "@Test\r\npublic void testLazilyParsedNumberSerialization() {\r\n    LazilyParsedNumber target = new LazilyParsedNumber(\"1.5\");\r\n    String actual = gson.toJson(target);\r\n    assertThat(actual).isEqualTo(\"1.5\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLazilyParsedNumberDeserialization",
    "start_line": 507,
    "end_line": 512,
    "code": "@Test\r\npublic void testLazilyParsedNumberDeserialization() {\r\n    LazilyParsedNumber expected = new LazilyParsedNumber(\"1.5\");\r\n    LazilyParsedNumber actual = gson.fromJson(\"1.5\", LazilyParsedNumber.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testMoreSpecificSerialization",
    "start_line": 514,
    "end_line": 523,
    "code": "@Test\r\npublic void testMoreSpecificSerialization() {\r\n    Gson gson = new Gson();\r\n    String expected = \"This is a string\";\r\n    String expectedJson = gson.toJson(expected);\r\n    Serializable serializableString = expected;\r\n    String actualJson = gson.toJson(serializableString, Serializable.class);\r\n    assertThat(actualJson).isNotEqualTo(expectedJson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "extractElementFromArray",
    "start_line": 525,
    "end_line": 527,
    "code": "private static String extractElementFromArray(String json) {\r\n    return json.substring(json.indexOf('[') + 1, json.lastIndexOf(']'));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleNaNSerializationNotSupportedByDefault",
    "start_line": 529,
    "end_line": 541,
    "code": "@Test\r\npublic void testDoubleNaNSerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"NaN is not a valid double value as per JSON specification. To override this behavior,\" + \" use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NaN, double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NaN, Double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleNaNSerialization",
    "start_line": 543,
    "end_line": 548,
    "code": "@Test\r\npublic void testDoubleNaNSerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Double.NaN, double.class)).isEqualTo(\"NaN\");\r\n    assertThat(gson.toJson(Double.NaN, Double.class)).isEqualTo(\"NaN\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleNaNDeserialization",
    "start_line": 550,
    "end_line": 554,
    "code": "@Test\r\npublic void testDoubleNaNDeserialization() {\r\n    assertThat(gson.fromJson(\"NaN\", double.class)).isNaN();\r\n    assertThat(gson.fromJson(\"NaN\", Double.class)).isNaN();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatNaNSerializationNotSupportedByDefault",
    "start_line": 556,
    "end_line": 567,
    "code": "@Test\r\npublic void testFloatNaNSerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"NaN is not a valid double value as per JSON specification. To override this behavior,\" + \" use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NaN, float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NaN, Float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatNaNSerialization",
    "start_line": 569,
    "end_line": 574,
    "code": "@Test\r\npublic void testFloatNaNSerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Float.NaN, float.class)).isEqualTo(\"NaN\");\r\n    assertThat(gson.toJson(Float.NaN, Float.class)).isEqualTo(\"NaN\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatNaNDeserialization",
    "start_line": 576,
    "end_line": 580,
    "code": "@Test\r\npublic void testFloatNaNDeserialization() {\r\n    assertThat(gson.fromJson(\"NaN\", float.class)).isNaN();\r\n    assertThat(gson.fromJson(\"NaN\", Float.class)).isNaN();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalNaNDeserializationNotSupported",
    "start_line": 582,
    "end_line": 586,
    "code": "@Test\r\npublic void testBigDecimalNaNDeserializationNotSupported() {\r\n    // Gson should not accept NaN for deserialization of BigDecimal\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"NaN\", BigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleInfinitySerializationNotSupportedByDefault",
    "start_line": 588,
    "end_line": 605,
    "code": "@Test\r\npublic void testDoubleInfinitySerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.POSITIVE_INFINITY, double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.POSITIVE_INFINITY, Double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleInfinitySerialization",
    "start_line": 607,
    "end_line": 612,
    "code": "@Test\r\npublic void testDoubleInfinitySerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Double.POSITIVE_INFINITY, double.class)).isEqualTo(\"Infinity\");\r\n    assertThat(gson.toJson(Double.POSITIVE_INFINITY, Double.class)).isEqualTo(\"Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleInfinityDeserialization",
    "start_line": 614,
    "end_line": 618,
    "code": "@Test\r\npublic void testDoubleInfinityDeserialization() {\r\n    assertThat(gson.fromJson(\"Infinity\", double.class)).isPositiveInfinity();\r\n    assertThat(gson.fromJson(\"Infinity\", Double.class)).isPositiveInfinity();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatInfinitySerializationNotSupportedByDefault",
    "start_line": 620,
    "end_line": 637,
    "code": "@Test\r\npublic void testFloatInfinitySerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.POSITIVE_INFINITY, float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.POSITIVE_INFINITY, Float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatInfinitySerialization",
    "start_line": 639,
    "end_line": 644,
    "code": "@Test\r\npublic void testFloatInfinitySerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Float.POSITIVE_INFINITY, float.class)).isEqualTo(\"Infinity\");\r\n    assertThat(gson.toJson(Float.POSITIVE_INFINITY, Float.class)).isEqualTo(\"Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatInfinityDeserialization",
    "start_line": 646,
    "end_line": 650,
    "code": "@Test\r\npublic void testFloatInfinityDeserialization() {\r\n    assertThat(gson.fromJson(\"Infinity\", float.class)).isPositiveInfinity();\r\n    assertThat(gson.fromJson(\"Infinity\", Float.class)).isPositiveInfinity();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalInfinityDeserializationNotSupported",
    "start_line": 652,
    "end_line": 656,
    "code": "@Test\r\npublic void testBigDecimalInfinityDeserializationNotSupported() {\r\n    // Gson should not accept positive infinity for deserialization of BigDecimal\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"Infinity\", BigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinitySerializationNotSupportedByDefault",
    "start_line": 658,
    "end_line": 675,
    "code": "@Test\r\npublic void testNegativeInfinitySerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"-Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NEGATIVE_INFINITY, double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Double.NEGATIVE_INFINITY, Double.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinitySerialization",
    "start_line": 677,
    "end_line": 682,
    "code": "@Test\r\npublic void testNegativeInfinitySerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Double.NEGATIVE_INFINITY, double.class)).isEqualTo(\"-Infinity\");\r\n    assertThat(gson.toJson(Double.NEGATIVE_INFINITY, Double.class)).isEqualTo(\"-Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinityDeserialization",
    "start_line": 684,
    "end_line": 688,
    "code": "@Test\r\npublic void testNegativeInfinityDeserialization() {\r\n    assertThat(gson.fromJson(\"-Infinity\", double.class)).isNegativeInfinity();\r\n    assertThat(gson.fromJson(\"-Infinity\", Double.class)).isNegativeInfinity();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinityFloatSerializationNotSupportedByDefault",
    "start_line": 690,
    "end_line": 707,
    "code": "@Test\r\npublic void testNegativeInfinityFloatSerializationNotSupportedByDefault() {\r\n    String expectedMessage = \"-Infinity is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\";\r\n    var e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NEGATIVE_INFINITY, float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> gson.toJson(Float.NEGATIVE_INFINITY, Float.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinityFloatSerialization",
    "start_line": 709,
    "end_line": 714,
    "code": "@Test\r\npublic void testNegativeInfinityFloatSerialization() {\r\n    Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();\r\n    assertThat(gson.toJson(Float.NEGATIVE_INFINITY, float.class)).isEqualTo(\"-Infinity\");\r\n    assertThat(gson.toJson(Float.NEGATIVE_INFINITY, Float.class)).isEqualTo(\"-Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNegativeInfinityFloatDeserialization",
    "start_line": 716,
    "end_line": 720,
    "code": "@Test\r\npublic void testNegativeInfinityFloatDeserialization() {\r\n    assertThat(gson.fromJson(\"-Infinity\", float.class)).isNegativeInfinity();\r\n    assertThat(gson.fromJson(\"-Infinity\", Float.class)).isNegativeInfinity();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalNegativeInfinityDeserializationNotSupported",
    "start_line": 722,
    "end_line": 726,
    "code": "@Test\r\npublic void testBigDecimalNegativeInfinityDeserializationNotSupported() {\r\n    // Gson should not accept negative infinity for deserialization of BigDecimal\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-Infinity\", BigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLongAsStringSerialization",
    "start_line": 728,
    "end_line": 737,
    "code": "@Test\r\npublic void testLongAsStringSerialization() {\r\n    gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\r\n    String result = gson.toJson(15L);\r\n    assertThat(result).isEqualTo(\"\\\"15\\\"\");\r\n    // Test with an integer and ensure its still a number\r\n    result = gson.toJson(2);\r\n    assertThat(result).isEqualTo(\"2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLongAsStringDeserialization",
    "start_line": 739,
    "end_line": 747,
    "code": "@Test\r\npublic void testLongAsStringDeserialization() {\r\n    long value = gson.fromJson(\"\\\"15\\\"\", long.class);\r\n    assertThat(value).isEqualTo(15);\r\n    gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();\r\n    value = gson.fromJson(\"\\\"25\\\"\", long.class);\r\n    assertThat(value).isEqualTo(25);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testQuotedStringSerializationAndDeserialization",
    "start_line": 749,
    "end_line": 757,
    "code": "@Test\r\npublic void testQuotedStringSerializationAndDeserialization() {\r\n    String value = \"String Blah Blah Blah...1, 2, 3\";\r\n    String serializedForm = gson.toJson(value);\r\n    assertThat(serializedForm).isEqualTo(\"\\\"\" + value + \"\\\"\");\r\n    String actual = gson.fromJson(serializedForm, String.class);\r\n    assertThat(actual).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testUnquotedStringDeserializationFails",
    "start_line": 759,
    "end_line": 765,
    "code": "@Test\r\npublic void testUnquotedStringDeserializationFails() {\r\n    assertThat(gson.fromJson(\"UnquotedSingleWord\", String.class)).isEqualTo(\"UnquotedSingleWord\");\r\n    String value = \"String Blah Blah Blah...1, 2, 3\";\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(value, String.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testHtmlCharacterSerialization",
    "start_line": 767,
    "end_line": 776,
    "code": "@Test\r\npublic void testHtmlCharacterSerialization() {\r\n    String target = \"<script>var a = 12;</script>\";\r\n    String result = gson.toJson(target);\r\n    assertThat(result).isNotEqualTo('\"' + target + '\"');\r\n    gson = new GsonBuilder().disableHtmlEscaping().create();\r\n    result = gson.toJson(target);\r\n    assertThat(result).isEqualTo('\"' + target + '\"');\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializePrimitiveWrapperAsObjectField",
    "start_line": 778,
    "end_line": 783,
    "code": "@Test\r\npublic void testDeserializePrimitiveWrapperAsObjectField() {\r\n    String json = \"{i:10}\";\r\n    ClassWithIntegerField target = gson.fromJson(json, ClassWithIntegerField.class);\r\n    assertThat(target.i).isEqualTo(10);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveClassLiteral",
    "start_line": 789,
    "end_line": 794,
    "code": "@Test\r\npublic void testPrimitiveClassLiteral() {\r\n    assertThat(gson.fromJson(\"1\", int.class)).isEqualTo(1);\r\n    assertThat(gson.fromJson(new StringReader(\"1\"), int.class)).isEqualTo(1);\r\n    assertThat(gson.fromJson(new JsonPrimitive(1), int.class)).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsLongPrimitive",
    "start_line": 796,
    "end_line": 799,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsLongPrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", long.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsLongWrapper",
    "start_line": 801,
    "end_line": 804,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsLongWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3]\", Long.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsInt",
    "start_line": 806,
    "end_line": 809,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsInt() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, 2, 3, 4]\", int.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsInteger",
    "start_line": 811,
    "end_line": 814,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsInteger() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{}\", Integer.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsShortPrimitive",
    "start_line": 816,
    "end_line": 819,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsShortPrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", short.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsShortWrapper",
    "start_line": 821,
    "end_line": 824,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsShortWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"['a','b']\", Short.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsDoublePrimitive",
    "start_line": 826,
    "end_line": 829,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsDoublePrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2]\", double.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsDoubleWrapper",
    "start_line": 831,
    "end_line": 834,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsDoubleWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", Double.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsFloatPrimitive",
    "start_line": 836,
    "end_line": 839,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsFloatPrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", float.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsFloatWrapper",
    "start_line": 841,
    "end_line": 844,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsFloatWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3]\", Float.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsBytePrimitive",
    "start_line": 846,
    "end_line": 849,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsBytePrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", byte.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsByteWrapper",
    "start_line": 851,
    "end_line": 854,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsByteWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Byte.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsBooleanPrimitive",
    "start_line": 856,
    "end_line": 859,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsBooleanPrimitive() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'abc':1}\", boolean.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsBooleanWrapper",
    "start_line": 861,
    "end_line": 864,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsBooleanWrapper() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Boolean.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsBigDecimal",
    "start_line": 866,
    "end_line": 869,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsBigDecimal() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", BigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsBigDecimal",
    "start_line": 871,
    "end_line": 874,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsBigDecimal() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'a':1}\", BigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsBigInteger",
    "start_line": 876,
    "end_line": 879,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsBigInteger() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", BigInteger.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsBigInteger",
    "start_line": 881,
    "end_line": 884,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsBigInteger() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'c':2}\", BigInteger.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonArrayAsNumber",
    "start_line": 886,
    "end_line": 889,
    "code": "@Test\r\npublic void testDeserializeJsonArrayAsNumber() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1,2,3,4]\", Number.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeJsonObjectAsNumber",
    "start_line": 891,
    "end_line": 894,
    "code": "@Test\r\npublic void testDeserializeJsonObjectAsNumber() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{'c':2}\", Number.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingDecimalPointValueZeroSucceeds",
    "start_line": 896,
    "end_line": 899,
    "code": "@Test\r\npublic void testDeserializingDecimalPointValueZeroSucceeds() {\r\n    assertThat(gson.fromJson(\"1.0\", Integer.class)).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingNonZeroDecimalPointValuesAsIntegerFails",
    "start_line": 901,
    "end_line": 907,
    "code": "@Test\r\npublic void testDeserializingNonZeroDecimalPointValuesAsIntegerFails() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Byte.class));\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Short.class));\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Integer.class));\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"1.02\", Long.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingBigDecimalAsIntegerFails",
    "start_line": 909,
    "end_line": 917,
    "code": "@Test\r\npublic void testDeserializingBigDecimalAsIntegerFails() {\r\n    JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-122.08e-213\", Integer.class));\r\n    assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected an int but was -122.08e-213 at line 1 column 13 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingBigIntegerAsInteger",
    "start_line": 919,
    "end_line": 928,
    "code": "@Test\r\npublic void testDeserializingBigIntegerAsInteger() {\r\n    String number = \"12121211243123245845384534687435634558945453489543985435\";\r\n    JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(number, Integer.class));\r\n    assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected an int but was \" + number + \" at line 1 column 57 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingBigIntegerAsLong",
    "start_line": 930,
    "end_line": 939,
    "code": "@Test\r\npublic void testDeserializingBigIntegerAsLong() {\r\n    String number = \"12121211243123245845384534687435634558945453489543985435\";\r\n    JsonSyntaxException e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(number, Long.class));\r\n    assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Expected a long but was \" + number + \" at line 1 column 57 path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testValueVeryCloseToZeroIsZero",
    "start_line": 941,
    "end_line": 951,
    "code": "@Test\r\npublic void testValueVeryCloseToZeroIsZero() {\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", byte.class)).isEqualTo(0);\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", short.class)).isEqualTo(0);\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", int.class)).isEqualTo(0);\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", long.class)).isEqualTo(0);\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", float.class)).isEqualTo(-0.0f);\r\n    assertThat(gson.fromJson(\"-122.08e-2132\", double.class)).isEqualTo(-0.0);\r\n    assertThat(gson.fromJson(\"122.08e-2132\", float.class)).isEqualTo(0.0f);\r\n    assertThat(gson.fromJson(\"122.08e-2132\", double.class)).isEqualTo(0.0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingBigDecimalAsBigIntegerFails",
    "start_line": 953,
    "end_line": 956,
    "code": "@Test\r\npublic void testDeserializingBigDecimalAsBigIntegerFails() {\r\n    assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"-122.08e-213\", BigInteger.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingBigIntegerAsBigDecimal",
    "start_line": 958,
    "end_line": 964,
    "code": "@Test\r\npublic void testDeserializingBigIntegerAsBigDecimal() {\r\n    BigDecimal actual = gson.fromJson(\"12121211243123245845384534687435634558945453489543985435\", BigDecimal.class);\r\n    assertThat(actual.toPlainString()).isEqualTo(\"12121211243123245845384534687435634558945453489543985435\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testStringsAsBooleans",
    "start_line": 966,
    "end_line": 971,
    "code": "@Test\r\npublic void testStringsAsBooleans() {\r\n    String json = \"['true', 'false', 'TRUE', 'yes', '1']\";\r\n    List<Boolean> deserialized = gson.fromJson(json, new TypeToken<List<Boolean>>() {\r\n    });\r\n    assertThat(deserialized).isEqualTo(Arrays.asList(true, false, true, false, false));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrimitiveTest.java"
  }
]