[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.SerializedName",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.annotations.SerializedName;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.MoreAsserts",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.common.MoreAsserts;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.EnumMap",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.util.EnumMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.EnumSet",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.util.EnumSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Set",
    "start_line": 40,
    "end_line": 40,
    "code": "import java.util.Set;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 41,
    "end_line": 41,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 42,
    "end_line": 42,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "class",
    "name": "EnumTest",
    "start_line": 50,
    "end_line": 322,
    "code": "/**\r\n * Functional tests for Java 5.0 enums.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class EnumTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelEnumSerialization() {\r\n        String result = gson.toJson(MyEnum.VALUE1);\r\n        assertThat(result).isEqualTo('\"' + MyEnum.VALUE1.toString() + '\"');\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelEnumDeserialization() {\r\n        MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\r\n        assertThat(result).isEqualTo(MyEnum.VALUE1);\r\n    }\r\n\r\n    @Test\r\n    public void testCollectionOfEnumsSerialization() {\r\n        Type type = new TypeToken<Collection<MyEnum>>() {\r\n        }.getType();\r\n        Collection<MyEnum> target = new ArrayList<>();\r\n        target.add(MyEnum.VALUE1);\r\n        target.add(MyEnum.VALUE2);\r\n        String expectedJson = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\r\n        String actualJson = gson.toJson(target);\r\n        assertThat(actualJson).isEqualTo(expectedJson);\r\n        actualJson = gson.toJson(target, type);\r\n        assertThat(actualJson).isEqualTo(expectedJson);\r\n    }\r\n\r\n    @Test\r\n    public void testCollectionOfEnumsDeserialization() {\r\n        Type type = new TypeToken<Collection<MyEnum>>() {\r\n        }.getType();\r\n        String json = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\r\n        Collection<MyEnum> target = gson.fromJson(json, type);\r\n        MoreAsserts.assertContains(target, MyEnum.VALUE1);\r\n        MoreAsserts.assertContains(target, MyEnum.VALUE2);\r\n    }\r\n\r\n    @Test\r\n    public void testClassWithEnumFieldSerialization() {\r\n        ClassWithEnumFields target = new ClassWithEnumFields();\r\n        assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testClassWithEnumFieldDeserialization() {\r\n        String json = \"{value1:'VALUE1',value2:'VALUE2'}\";\r\n        ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);\r\n        assertThat(target.value1).isEqualTo(MyEnum.VALUE1);\r\n        assertThat(target.value2).isEqualTo(MyEnum.VALUE2);\r\n    }\r\n\r\n    private static enum MyEnum {\r\n\r\n        VALUE1, VALUE2\r\n    }\r\n\r\n    private static class ClassWithEnumFields {\r\n\r\n        private final MyEnum value1 = MyEnum.VALUE1;\r\n\r\n        private final MyEnum value2 = MyEnum.VALUE2;\r\n\r\n        public String getExpectedJson() {\r\n            return \"{\\\"value1\\\":\\\"\" + value1 + \"\\\",\\\"value2\\\":\\\"\" + value2 + \"\\\"}\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test for issue 226.\r\n     */\r\n    @Test\r\n    @SuppressWarnings(\"GetClassOnEnum\")\r\n    public void testEnumSubclass() {\r\n        assertThat(Roshambo.ROCK.getClass()).isNotEqualTo(Roshambo.class);\r\n        assertThat(gson.toJson(Roshambo.ROCK)).isEqualTo(\"\\\"ROCK\\\"\");\r\n        assertThat(gson.toJson(EnumSet.allOf(Roshambo.class))).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\");\r\n        assertThat(gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.class)).isEqualTo(Roshambo.ROCK);\r\n        Set<Roshambo> deserialized = gson.fromJson(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", new TypeToken<>() {\r\n        });\r\n        assertThat(deserialized).isEqualTo(EnumSet.allOf(Roshambo.class));\r\n        // A bit contrived, but should also work if explicitly deserializing using anonymous enum\r\n        // subclass\r\n        assertThat(gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.ROCK.getClass())).isEqualTo(Roshambo.ROCK);\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"GetClassOnEnum\")\r\n    public void testEnumSubclassWithRegisteredTypeAdapter() {\r\n        gson = new GsonBuilder().registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter()).create();\r\n        assertThat(Roshambo.ROCK.getClass()).isNotEqualTo(Roshambo.class);\r\n        assertThat(gson.toJson(Roshambo.ROCK)).isEqualTo(\"\\\"123ROCK\\\"\");\r\n        assertThat(gson.toJson(EnumSet.allOf(Roshambo.class))).isEqualTo(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\");\r\n        assertThat(gson.fromJson(\"\\\"123ROCK\\\"\", Roshambo.class)).isEqualTo(Roshambo.ROCK);\r\n        Set<Roshambo> deserialized = gson.fromJson(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", new TypeToken<>() {\r\n        });\r\n        assertThat(deserialized).isEqualTo(EnumSet.allOf(Roshambo.class));\r\n    }\r\n\r\n    @Test\r\n    public void testEnumSubclassAsParameterizedType() {\r\n        Collection<Roshambo> list = new ArrayList<>();\r\n        list.add(Roshambo.ROCK);\r\n        list.add(Roshambo.PAPER);\r\n        String json = gson.toJson(list);\r\n        assertThat(json).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\");\r\n        Type collectionType = new TypeToken<Collection<Roshambo>>() {\r\n        }.getType();\r\n        Collection<Roshambo> actualJsonList = gson.fromJson(json, collectionType);\r\n        MoreAsserts.assertContains(actualJsonList, Roshambo.ROCK);\r\n        MoreAsserts.assertContains(actualJsonList, Roshambo.PAPER);\r\n    }\r\n\r\n    @Test\r\n    public void testEnumCaseMapping() {\r\n        assertThat(gson.fromJson(\"\\\"boy\\\"\", Gender.class)).isEqualTo(Gender.MALE);\r\n        assertThat(gson.toJson(Gender.MALE, Gender.class)).isEqualTo(\"\\\"boy\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testEnumSet() {\r\n        EnumSet<Roshambo> foo = EnumSet.of(Roshambo.ROCK, Roshambo.PAPER);\r\n        String json = gson.toJson(foo);\r\n        assertThat(json).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\");\r\n        Type type = new TypeToken<EnumSet<Roshambo>>() {\r\n        }.getType();\r\n        EnumSet<Roshambo> bar = gson.fromJson(json, type);\r\n        assertThat(bar).containsExactly(Roshambo.ROCK, Roshambo.PAPER).inOrder();\r\n        assertThat(bar).doesNotContain(Roshambo.SCISSORS);\r\n    }\r\n\r\n    @Test\r\n    public void testEnumMap() {\r\n        EnumMap<MyEnum, String> map = new EnumMap<>(MyEnum.class);\r\n        map.put(MyEnum.VALUE1, \"test\");\r\n        String json = gson.toJson(map);\r\n        assertThat(json).isEqualTo(\"{\\\"VALUE1\\\":\\\"test\\\"}\");\r\n        Type type = new TypeToken<EnumMap<MyEnum, String>>() {\r\n        }.getType();\r\n        EnumMap<?, ?> actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);\r\n        Map<?, ?> expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");\r\n        assertThat(actualMap).isEqualTo(expectedMap);\r\n    }\r\n\r\n    private enum Roshambo {\r\n\r\n        ROCK {\r\n\r\n            @Override\r\n            Roshambo defeats() {\r\n                return SCISSORS;\r\n            }\r\n        }\r\n        , PAPER {\r\n\r\n            @Override\r\n            Roshambo defeats() {\r\n                return ROCK;\r\n            }\r\n        }\r\n        , SCISSORS {\r\n\r\n            @Override\r\n            Roshambo defeats() {\r\n                return PAPER;\r\n            }\r\n        }\r\n        ;\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        abstract Roshambo defeats();\r\n    }\r\n\r\n    private static class MyEnumTypeAdapter implements JsonSerializer<Roshambo>, JsonDeserializer<Roshambo> {\r\n\r\n        @Override\r\n        public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"123\" + src.name());\r\n        }\r\n\r\n        @Override\r\n        public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return Roshambo.valueOf(json.getAsString().substring(3));\r\n        }\r\n    }\r\n\r\n    private enum Gender {\r\n\r\n        @SerializedName(\"boy\")\r\n        MALE, @SerializedName(\"girl\")\r\n        FEMALE\r\n    }\r\n\r\n    @Test\r\n    public void testEnumClassWithFields() {\r\n        assertThat(gson.toJson(Color.RED)).isEqualTo(\"\\\"RED\\\"\");\r\n        assertThat(gson.fromJson(\"RED\", Color.class).value).isEqualTo(\"red\");\r\n        assertThat(gson.fromJson(\"BLUE\", Color.class).index).isEqualTo(2);\r\n    }\r\n\r\n    private enum Color {\r\n\r\n        RED(\"red\", 1), BLUE(\"blue\", 2), GREEN(\"green\", 3);\r\n\r\n        final String value;\r\n\r\n        final int index;\r\n\r\n        private Color(String value, int index) {\r\n            this.value = value;\r\n            this.index = index;\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testEnumToStringRead() {\r\n        // Should still be able to read constant name\r\n        assertThat(gson.fromJson(\"\\\"A\\\"\", CustomToString.class)).isEqualTo(CustomToString.A);\r\n        // Should be able to read toString() value\r\n        assertThat(gson.fromJson(\"\\\"test\\\"\", CustomToString.class)).isEqualTo(CustomToString.A);\r\n        assertThat(gson.fromJson(\"\\\"other\\\"\", CustomToString.class)).isNull();\r\n    }\r\n\r\n    private enum CustomToString {\r\n\r\n        A;\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"test\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test that enum constant names have higher precedence than {@code toString()} result.\r\n     */\r\n    @Test\r\n    public void testEnumToStringReadInterchanged() {\r\n        assertThat(gson.fromJson(\"\\\"A\\\"\", InterchangedToString.class)).isEqualTo(InterchangedToString.A);\r\n        assertThat(gson.fromJson(\"\\\"B\\\"\", InterchangedToString.class)).isEqualTo(InterchangedToString.B);\r\n    }\r\n\r\n    private enum InterchangedToString {\r\n\r\n        A(\"B\"), B(\"A\");\r\n\r\n        private final String toString;\r\n\r\n        InterchangedToString(String toString) {\r\n            this.toString = toString;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return toString;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies that the enum adapter works for a public JDK enum class and no {@code\r\n     * InaccessibleObjectException} is thrown, despite using reflection internally to account for the\r\n     * constant names possibly being obfuscated.\r\n     */\r\n    @Test\r\n    public void testJdkEnum() {\r\n        assertThat(gson.toJson(Thread.State.NEW)).isEqualTo(\"\\\"NEW\\\"\");\r\n        assertThat(gson.fromJson(\"\\\"NEW\\\"\", Thread.State.class)).isEqualTo(Thread.State.NEW);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 52,
    "end_line": 52,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 54,
    "end_line": 57,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelEnumSerialization",
    "start_line": 59,
    "end_line": 63,
    "code": "@Test\r\npublic void testTopLevelEnumSerialization() {\r\n    String result = gson.toJson(MyEnum.VALUE1);\r\n    assertThat(result).isEqualTo('\"' + MyEnum.VALUE1.toString() + '\"');\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelEnumDeserialization",
    "start_line": 65,
    "end_line": 69,
    "code": "@Test\r\npublic void testTopLevelEnumDeserialization() {\r\n    MyEnum result = gson.fromJson('\"' + MyEnum.VALUE1.toString() + '\"', MyEnum.class);\r\n    assertThat(result).isEqualTo(MyEnum.VALUE1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testCollectionOfEnumsSerialization",
    "start_line": 71,
    "end_line": 82,
    "code": "@Test\r\npublic void testCollectionOfEnumsSerialization() {\r\n    Type type = new TypeToken<Collection<MyEnum>>() {\r\n    }.getType();\r\n    Collection<MyEnum> target = new ArrayList<>();\r\n    target.add(MyEnum.VALUE1);\r\n    target.add(MyEnum.VALUE2);\r\n    String expectedJson = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\r\n    String actualJson = gson.toJson(target);\r\n    assertThat(actualJson).isEqualTo(expectedJson);\r\n    actualJson = gson.toJson(target, type);\r\n    assertThat(actualJson).isEqualTo(expectedJson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testCollectionOfEnumsDeserialization",
    "start_line": 84,
    "end_line": 91,
    "code": "@Test\r\npublic void testCollectionOfEnumsDeserialization() {\r\n    Type type = new TypeToken<Collection<MyEnum>>() {\r\n    }.getType();\r\n    String json = \"[\\\"VALUE1\\\",\\\"VALUE2\\\"]\";\r\n    Collection<MyEnum> target = gson.fromJson(json, type);\r\n    MoreAsserts.assertContains(target, MyEnum.VALUE1);\r\n    MoreAsserts.assertContains(target, MyEnum.VALUE2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testClassWithEnumFieldSerialization",
    "start_line": 93,
    "end_line": 97,
    "code": "@Test\r\npublic void testClassWithEnumFieldSerialization() {\r\n    ClassWithEnumFields target = new ClassWithEnumFields();\r\n    assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testClassWithEnumFieldDeserialization",
    "start_line": 99,
    "end_line": 105,
    "code": "@Test\r\npublic void testClassWithEnumFieldDeserialization() {\r\n    String json = \"{value1:'VALUE1',value2:'VALUE2'}\";\r\n    ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);\r\n    assertThat(target.value1).isEqualTo(MyEnum.VALUE1);\r\n    assertThat(target.value2).isEqualTo(MyEnum.VALUE2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumSubclass",
    "start_line": 122,
    "end_line": 137,
    "code": "/**\r\n * Test for issue 226.\r\n */\r\n@Test\r\n@SuppressWarnings(\"GetClassOnEnum\")\r\npublic void testEnumSubclass() {\r\n    assertThat(Roshambo.ROCK.getClass()).isNotEqualTo(Roshambo.class);\r\n    assertThat(gson.toJson(Roshambo.ROCK)).isEqualTo(\"\\\"ROCK\\\"\");\r\n    assertThat(gson.toJson(EnumSet.allOf(Roshambo.class))).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\");\r\n    assertThat(gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.class)).isEqualTo(Roshambo.ROCK);\r\n    Set<Roshambo> deserialized = gson.fromJson(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", new TypeToken<>() {\r\n    });\r\n    assertThat(deserialized).isEqualTo(EnumSet.allOf(Roshambo.class));\r\n    // A bit contrived, but should also work if explicitly deserializing using anonymous enum\r\n    // subclass\r\n    assertThat(gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.ROCK.getClass())).isEqualTo(Roshambo.ROCK);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumSubclassWithRegisteredTypeAdapter",
    "start_line": 139,
    "end_line": 154,
    "code": "@Test\r\n@SuppressWarnings(\"GetClassOnEnum\")\r\npublic void testEnumSubclassWithRegisteredTypeAdapter() {\r\n    gson = new GsonBuilder().registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter()).create();\r\n    assertThat(Roshambo.ROCK.getClass()).isNotEqualTo(Roshambo.class);\r\n    assertThat(gson.toJson(Roshambo.ROCK)).isEqualTo(\"\\\"123ROCK\\\"\");\r\n    assertThat(gson.toJson(EnumSet.allOf(Roshambo.class))).isEqualTo(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\");\r\n    assertThat(gson.fromJson(\"\\\"123ROCK\\\"\", Roshambo.class)).isEqualTo(Roshambo.ROCK);\r\n    Set<Roshambo> deserialized = gson.fromJson(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", new TypeToken<>() {\r\n    });\r\n    assertThat(deserialized).isEqualTo(EnumSet.allOf(Roshambo.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumSubclassAsParameterizedType",
    "start_line": 156,
    "end_line": 169,
    "code": "@Test\r\npublic void testEnumSubclassAsParameterizedType() {\r\n    Collection<Roshambo> list = new ArrayList<>();\r\n    list.add(Roshambo.ROCK);\r\n    list.add(Roshambo.PAPER);\r\n    String json = gson.toJson(list);\r\n    assertThat(json).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\");\r\n    Type collectionType = new TypeToken<Collection<Roshambo>>() {\r\n    }.getType();\r\n    Collection<Roshambo> actualJsonList = gson.fromJson(json, collectionType);\r\n    MoreAsserts.assertContains(actualJsonList, Roshambo.ROCK);\r\n    MoreAsserts.assertContains(actualJsonList, Roshambo.PAPER);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumCaseMapping",
    "start_line": 171,
    "end_line": 175,
    "code": "@Test\r\npublic void testEnumCaseMapping() {\r\n    assertThat(gson.fromJson(\"\\\"boy\\\"\", Gender.class)).isEqualTo(Gender.MALE);\r\n    assertThat(gson.toJson(Gender.MALE, Gender.class)).isEqualTo(\"\\\"boy\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumSet",
    "start_line": 177,
    "end_line": 187,
    "code": "@Test\r\npublic void testEnumSet() {\r\n    EnumSet<Roshambo> foo = EnumSet.of(Roshambo.ROCK, Roshambo.PAPER);\r\n    String json = gson.toJson(foo);\r\n    assertThat(json).isEqualTo(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\");\r\n    Type type = new TypeToken<EnumSet<Roshambo>>() {\r\n    }.getType();\r\n    EnumSet<Roshambo> bar = gson.fromJson(json, type);\r\n    assertThat(bar).containsExactly(Roshambo.ROCK, Roshambo.PAPER).inOrder();\r\n    assertThat(bar).doesNotContain(Roshambo.SCISSORS);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumMap",
    "start_line": 189,
    "end_line": 200,
    "code": "@Test\r\npublic void testEnumMap() {\r\n    EnumMap<MyEnum, String> map = new EnumMap<>(MyEnum.class);\r\n    map.put(MyEnum.VALUE1, \"test\");\r\n    String json = gson.toJson(map);\r\n    assertThat(json).isEqualTo(\"{\\\"VALUE1\\\":\\\"test\\\"}\");\r\n    Type type = new TypeToken<EnumMap<MyEnum, String>>() {\r\n    }.getType();\r\n    EnumMap<?, ?> actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);\r\n    Map<?, ?> expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");\r\n    assertThat(actualMap).isEqualTo(expectedMap);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumClassWithFields",
    "start_line": 248,
    "end_line": 253,
    "code": "@Test\r\npublic void testEnumClassWithFields() {\r\n    assertThat(gson.toJson(Color.RED)).isEqualTo(\"\\\"RED\\\"\");\r\n    assertThat(gson.fromJson(\"RED\", Color.class).value).isEqualTo(\"red\");\r\n    assertThat(gson.fromJson(\"BLUE\", Color.class).index).isEqualTo(2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumToStringRead",
    "start_line": 268,
    "end_line": 276,
    "code": "@Test\r\npublic void testEnumToStringRead() {\r\n    // Should still be able to read constant name\r\n    assertThat(gson.fromJson(\"\\\"A\\\"\", CustomToString.class)).isEqualTo(CustomToString.A);\r\n    // Should be able to read toString() value\r\n    assertThat(gson.fromJson(\"\\\"test\\\"\", CustomToString.class)).isEqualTo(CustomToString.A);\r\n    assertThat(gson.fromJson(\"\\\"other\\\"\", CustomToString.class)).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testEnumToStringReadInterchanged",
    "start_line": 288,
    "end_line": 294,
    "code": "/**\r\n * Test that enum constant names have higher precedence than {@code toString()} result.\r\n */\r\n@Test\r\npublic void testEnumToStringReadInterchanged() {\r\n    assertThat(gson.fromJson(\"\\\"A\\\"\", InterchangedToString.class)).isEqualTo(InterchangedToString.A);\r\n    assertThat(gson.fromJson(\"\\\"B\\\"\", InterchangedToString.class)).isEqualTo(InterchangedToString.B);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  },
  {
    "type": "method",
    "name": "testJdkEnum",
    "start_line": 317,
    "end_line": 321,
    "code": "/**\r\n * Verifies that the enum adapter works for a public JDK enum class and no {@code\r\n * InaccessibleObjectException} is thrown, despite using reflection internally to account for the\r\n * constant names possibly being obfuscated.\r\n */\r\n@Test\r\npublic void testJdkEnum() {\r\n    assertThat(gson.toJson(Thread.State.NEW)).isEqualTo(\"\\\"NEW\\\"\");\r\n    assertThat(gson.fromJson(\"\\\"NEW\\\"\", Thread.State.class)).isEqualTo(Thread.State.NEW);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\EnumTest.java"
  }
]