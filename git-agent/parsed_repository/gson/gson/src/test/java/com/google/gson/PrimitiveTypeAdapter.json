[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Primitives",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.internal.Primitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Constructor",
    "start_line": 20,
    "end_line": 20,
    "code": "import java.lang.reflect.Constructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Method",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.lang.reflect.Method;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  },
  {
    "type": "class",
    "name": "PrimitiveTypeAdapter",
    "start_line": 30,
    "end_line": 63,
    "code": "/**\r\n * Handles type conversion from some object to some primitive (or primitive wrapper instance).\r\n *\r\n * <p>Used by {@link ParameterizedTypeFixtures.MyParameterizedTypeAdapter}.\r\n *\r\n * @author Joel Leitch\r\n */\r\nfinal class PrimitiveTypeAdapter {\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public <T> T adaptType(Object from, Class<T> to) {\r\n        Class<?> aClass = Primitives.wrap(to);\r\n        if (Primitives.isWrapperType(aClass)) {\r\n            if (aClass == Character.class) {\r\n                String value = from.toString();\r\n                if (value.length() == 1) {\r\n                    return (T) (Character) from.toString().charAt(0);\r\n                }\r\n                throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\r\n            }\r\n            try {\r\n                Constructor<?> constructor = aClass.getConstructor(String.class);\r\n                return (T) constructor.newInstance(from.toString());\r\n            } catch (ReflectiveOperationException e) {\r\n                throw new JsonParseException(e);\r\n            }\r\n        } else if (Enum.class.isAssignableFrom(to)) {\r\n            // Case where the type being adapted to is an Enum\r\n            // We will try to convert from.toString() to the enum\r\n            try {\r\n                Method valuesMethod = to.getMethod(\"valueOf\", String.class);\r\n                return (T) valuesMethod.invoke(null, from.toString());\r\n            } catch (ReflectiveOperationException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        } else {\r\n            throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \" + to);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "adaptType",
    "start_line": 32,
    "end_line": 62,
    "code": "@SuppressWarnings(\"unchecked\")\r\npublic <T> T adaptType(Object from, Class<T> to) {\r\n    Class<?> aClass = Primitives.wrap(to);\r\n    if (Primitives.isWrapperType(aClass)) {\r\n        if (aClass == Character.class) {\r\n            String value = from.toString();\r\n            if (value.length() == 1) {\r\n                return (T) (Character) from.toString().charAt(0);\r\n            }\r\n            throw new JsonParseException(\"The value: \" + value + \" contains more than a character.\");\r\n        }\r\n        try {\r\n            Constructor<?> constructor = aClass.getConstructor(String.class);\r\n            return (T) constructor.newInstance(from.toString());\r\n        } catch (ReflectiveOperationException e) {\r\n            throw new JsonParseException(e);\r\n        }\r\n    } else if (Enum.class.isAssignableFrom(to)) {\r\n        // Case where the type being adapted to is an Enum\r\n        // We will try to convert from.toString() to the enum\r\n        try {\r\n            Method valuesMethod = to.getMethod(\"valueOf\", String.class);\r\n            return (T) valuesMethod.invoke(null, from.toString());\r\n        } catch (ReflectiveOperationException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    } else {\r\n        throw new JsonParseException(\"Can not adapt type \" + from.getClass() + \" to \" + to);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\PrimitiveTypeAdapter.java"
  }
]