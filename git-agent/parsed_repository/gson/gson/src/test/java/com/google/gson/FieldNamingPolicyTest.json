[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertWithMessage",
    "start_line": 20,
    "end_line": 20,
    "code": "import static com.google.common.truth.Truth.assertWithMessage;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 24,
    "end_line": 24,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "class",
    "name": "FieldNamingPolicyTest",
    "start_line": 30,
    "end_line": 151,
    "code": "/**\r\n * Performs tests directly against {@link FieldNamingPolicy}; for integration tests see {@code\r\n * FieldNamingTest}.\r\n */\r\npublic class FieldNamingPolicyTest {\r\n\r\n    @Test\r\n    public void testSeparateCamelCase() {\r\n        // Map from original -> expected\r\n        String[][] argumentPairs = { { \"a\", \"a\" }, { \"ab\", \"ab\" }, { \"Ab\", \"Ab\" }, { \"aB\", \"a_B\" }, { \"AB\", \"A_B\" }, { \"A_B\", \"A__B\" }, { \"firstSecondThird\", \"first_Second_Third\" }, { \"__\", \"__\" }, { \"_123\", \"_123\" } };\r\n        for (String[] pair : argumentPairs) {\r\n            assertThat(FieldNamingPolicy.separateCamelCase(pair[0], '_')).isEqualTo(pair[1]);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testUpperCaseFirstLetter() {\r\n        // Map from original -> expected\r\n        String[][] argumentPairs = { { \"a\", \"A\" }, { \"ab\", \"Ab\" }, { \"AB\", \"AB\" }, { \"_a\", \"_A\" }, { \"_ab\", \"_Ab\" }, { \"__\", \"__\" }, { \"_1\", \"_1\" }, // Not a letter, but has uppercase variant (should not be uppercased)\r\n        // See https://github.com/google/gson/issues/1965\r\n        { \"\\u2170\", \"\\u2170\" }, { \"_\\u2170\", \"_\\u2170\" }, { \"\\u2170a\", \"\\u2170A\" } };\r\n        for (String[] pair : argumentPairs) {\r\n            assertThat(FieldNamingPolicy.upperCaseFirstLetter(pair[0])).isEqualTo(pair[1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upper-casing policies should be unaffected by default Locale.\r\n     */\r\n    @Test\r\n    public void testUpperCasingLocaleIndependent() throws Exception {\r\n        class Dummy {\r\n\r\n            @SuppressWarnings(\"unused\")\r\n            int i;\r\n        }\r\n        FieldNamingPolicy[] policies = { FieldNamingPolicy.UPPER_CAMEL_CASE, FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES, FieldNamingPolicy.UPPER_CASE_WITH_UNDERSCORES };\r\n        Field field = Dummy.class.getDeclaredField(\"i\");\r\n        String name = field.getName();\r\n        String expected = name.toUpperCase(Locale.ROOT);\r\n        Locale oldLocale = Locale.getDefault();\r\n        // Set Turkish as Locale which has special case conversion rules\r\n        Locale.setDefault(new Locale(\"tr\"));\r\n        try {\r\n            // Verify that default Locale has different case conversion rules\r\n            assertWithMessage(\"Test setup is broken\").that(name.toUpperCase(Locale.getDefault())).doesNotMatch(expected);\r\n            for (FieldNamingPolicy policy : policies) {\r\n                // Should ignore default Locale\r\n                assertWithMessage(\"Unexpected conversion for %s\", policy).that(policy.translateName(field)).matches(expected);\r\n            }\r\n        } finally {\r\n            Locale.setDefault(oldLocale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lower casing policies should be unaffected by default Locale.\r\n     */\r\n    @Test\r\n    public void testLowerCasingLocaleIndependent() throws Exception {\r\n        class Dummy {\r\n\r\n            @SuppressWarnings({ \"unused\", \"ConstantField\" })\r\n            int I;\r\n        }\r\n        FieldNamingPolicy[] policies = { FieldNamingPolicy.LOWER_CASE_WITH_DASHES, FieldNamingPolicy.LOWER_CASE_WITH_DOTS, FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES };\r\n        Field field = Dummy.class.getDeclaredField(\"I\");\r\n        String name = field.getName();\r\n        String expected = name.toLowerCase(Locale.ROOT);\r\n        Locale oldLocale = Locale.getDefault();\r\n        // Set Turkish as Locale which has special case conversion rules\r\n        Locale.setDefault(new Locale(\"tr\"));\r\n        try {\r\n            // Verify that default Locale has different case conversion rules\r\n            assertWithMessage(\"Test setup is broken\").that(name.toLowerCase(Locale.getDefault())).doesNotMatch(expected);\r\n            for (FieldNamingPolicy policy : policies) {\r\n                // Should ignore default Locale\r\n                assertWithMessage(\"Unexpected conversion for %s\", policy).that(policy.translateName(field)).matches(expected);\r\n            }\r\n        } finally {\r\n            Locale.setDefault(oldLocale);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testSeparateCamelCase",
    "start_line": 31,
    "end_line": 49,
    "code": "@Test\r\npublic void testSeparateCamelCase() {\r\n    // Map from original -> expected\r\n    String[][] argumentPairs = { { \"a\", \"a\" }, { \"ab\", \"ab\" }, { \"Ab\", \"Ab\" }, { \"aB\", \"a_B\" }, { \"AB\", \"A_B\" }, { \"A_B\", \"A__B\" }, { \"firstSecondThird\", \"first_Second_Third\" }, { \"__\", \"__\" }, { \"_123\", \"_123\" } };\r\n    for (String[] pair : argumentPairs) {\r\n        assertThat(FieldNamingPolicy.separateCamelCase(pair[0], '_')).isEqualTo(pair[1]);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testUpperCaseFirstLetter",
    "start_line": 51,
    "end_line": 72,
    "code": "@Test\r\npublic void testUpperCaseFirstLetter() {\r\n    // Map from original -> expected\r\n    String[][] argumentPairs = { { \"a\", \"A\" }, { \"ab\", \"Ab\" }, { \"AB\", \"AB\" }, { \"_a\", \"_A\" }, { \"_ab\", \"_Ab\" }, { \"__\", \"__\" }, { \"_1\", \"_1\" }, // Not a letter, but has uppercase variant (should not be uppercased)\r\n    // See https://github.com/google/gson/issues/1965\r\n    { \"\\u2170\", \"\\u2170\" }, { \"_\\u2170\", \"_\\u2170\" }, { \"\\u2170a\", \"\\u2170A\" } };\r\n    for (String[] pair : argumentPairs) {\r\n        assertThat(FieldNamingPolicy.upperCaseFirstLetter(pair[0])).isEqualTo(pair[1]);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testUpperCasingLocaleIndependent",
    "start_line": 75,
    "end_line": 111,
    "code": "/**\r\n * Upper-casing policies should be unaffected by default Locale.\r\n */\r\n@Test\r\npublic void testUpperCasingLocaleIndependent() throws Exception {\r\n    class Dummy {\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        int i;\r\n    }\r\n    FieldNamingPolicy[] policies = { FieldNamingPolicy.UPPER_CAMEL_CASE, FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES, FieldNamingPolicy.UPPER_CASE_WITH_UNDERSCORES };\r\n    Field field = Dummy.class.getDeclaredField(\"i\");\r\n    String name = field.getName();\r\n    String expected = name.toUpperCase(Locale.ROOT);\r\n    Locale oldLocale = Locale.getDefault();\r\n    // Set Turkish as Locale which has special case conversion rules\r\n    Locale.setDefault(new Locale(\"tr\"));\r\n    try {\r\n        // Verify that default Locale has different case conversion rules\r\n        assertWithMessage(\"Test setup is broken\").that(name.toUpperCase(Locale.getDefault())).doesNotMatch(expected);\r\n        for (FieldNamingPolicy policy : policies) {\r\n            // Should ignore default Locale\r\n            assertWithMessage(\"Unexpected conversion for %s\", policy).that(policy.translateName(field)).matches(expected);\r\n        }\r\n    } finally {\r\n        Locale.setDefault(oldLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  },
  {
    "type": "method",
    "name": "testLowerCasingLocaleIndependent",
    "start_line": 114,
    "end_line": 150,
    "code": "/**\r\n * Lower casing policies should be unaffected by default Locale.\r\n */\r\n@Test\r\npublic void testLowerCasingLocaleIndependent() throws Exception {\r\n    class Dummy {\r\n\r\n        @SuppressWarnings({ \"unused\", \"ConstantField\" })\r\n        int I;\r\n    }\r\n    FieldNamingPolicy[] policies = { FieldNamingPolicy.LOWER_CASE_WITH_DASHES, FieldNamingPolicy.LOWER_CASE_WITH_DOTS, FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES };\r\n    Field field = Dummy.class.getDeclaredField(\"I\");\r\n    String name = field.getName();\r\n    String expected = name.toLowerCase(Locale.ROOT);\r\n    Locale oldLocale = Locale.getDefault();\r\n    // Set Turkish as Locale which has special case conversion rules\r\n    Locale.setDefault(new Locale(\"tr\"));\r\n    try {\r\n        // Verify that default Locale has different case conversion rules\r\n        assertWithMessage(\"Test setup is broken\").that(name.toLowerCase(Locale.getDefault())).doesNotMatch(expected);\r\n        for (FieldNamingPolicy policy : policies) {\r\n            // Should ignore default Locale\r\n            assertWithMessage(\"Unexpected conversion for %s\", policy).that(policy.translateName(field)).matches(expected);\r\n        }\r\n    } finally {\r\n        Locale.setDefault(oldLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\FieldNamingPolicyTest.java"
  }
]