[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.Keep",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.errorprone.annotations.Keep;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.JsonAdapter",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.annotations.JsonAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 37,
    "end_line": 37,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "class",
    "name": "JsonAdapterSerializerDeserializerTest",
    "start_line": 43,
    "end_line": 266,
    "code": "/**\r\n * Functional tests for the {@link JsonAdapter} annotation on fields where the value is of type\r\n * {@link JsonSerializer} or {@link JsonDeserializer}.\r\n */\r\npublic final class JsonAdapterSerializerDeserializerTest {\r\n\r\n    @Test\r\n    public void testJsonSerializerDeserializerBasedJsonAdapterOnFields() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\"), null, new User(\"Jesse Wilson\")));\r\n        assertThat(json).isEqualTo(\"{\\\"user1\\\":\\\"UserSerializer\\\",\\\"user3\\\":\\\"UserSerializerDeserializer\\\"}\");\r\n        Computer computer = gson.fromJson(\"{'user2':'Jesse Wilson','user3':'Jake Wharton'}\", Computer.class);\r\n        assertThat(computer.user2.name).isEqualTo(\"UserDeserializer\");\r\n        assertThat(computer.user3.name).isEqualTo(\"UserSerializerDeserializer\");\r\n    }\r\n\r\n    private static final class Computer {\r\n\r\n        @JsonAdapter(UserSerializer.class)\r\n        @Keep\r\n        final User user1;\r\n\r\n        @JsonAdapter(UserDeserializer.class)\r\n        @Keep\r\n        final User user2;\r\n\r\n        @JsonAdapter(UserSerializerDeserializer.class)\r\n        @Keep\r\n        final User user3;\r\n\r\n        Computer(User user1, User user2, User user3) {\r\n            this.user1 = user1;\r\n            this.user2 = user2;\r\n            this.user3 = user3;\r\n        }\r\n    }\r\n\r\n    private static final class User {\r\n\r\n        public final String name;\r\n\r\n        private User(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    private static final class UserSerializer implements JsonSerializer<User> {\r\n\r\n        @Override\r\n        public JsonElement serialize(User src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"UserSerializer\");\r\n        }\r\n    }\r\n\r\n    private static final class UserDeserializer implements JsonDeserializer<User> {\r\n\r\n        @Override\r\n        public User deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return new User(\"UserDeserializer\");\r\n        }\r\n    }\r\n\r\n    private static final class UserSerializerDeserializer implements JsonSerializer<User>, JsonDeserializer<User> {\r\n\r\n        @Override\r\n        public JsonElement serialize(User src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"UserSerializerDeserializer\");\r\n        }\r\n\r\n        @Override\r\n        public User deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return new User(\"UserSerializerDeserializer\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testJsonSerializerDeserializerBasedJsonAdapterOnClass() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Computer2(new User2(\"Inderjeet Singh\")));\r\n        assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserSerializerDeserializer2\\\"}\");\r\n        Computer2 computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer2.class);\r\n        assertThat(computer.user.name).isEqualTo(\"UserSerializerDeserializer2\");\r\n    }\r\n\r\n    private static final class Computer2 {\r\n\r\n        final User2 user;\r\n\r\n        Computer2(User2 user) {\r\n            this.user = user;\r\n        }\r\n    }\r\n\r\n    @JsonAdapter(UserSerializerDeserializer2.class)\r\n    private static final class User2 {\r\n\r\n        public final String name;\r\n\r\n        private User2(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    private static final class UserSerializerDeserializer2 implements JsonSerializer<User2>, JsonDeserializer<User2> {\r\n\r\n        @Override\r\n        public JsonElement serialize(User2 src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"UserSerializerDeserializer2\");\r\n        }\r\n\r\n        @Override\r\n        public User2 deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return new User2(\"UserSerializerDeserializer2\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testDifferentJsonAdaptersForGenericFieldsOfSameRawType() {\r\n        Container c = new Container(\"Foo\", 10);\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(c);\r\n        assertThat(json).contains(\"\\\"a\\\":\\\"BaseStringAdapter\\\"\");\r\n        assertThat(json).contains(\"\\\"b\\\":\\\"BaseIntegerAdapter\\\"\");\r\n    }\r\n\r\n    private static final class Container {\r\n\r\n        @JsonAdapter(BaseStringAdapter.class)\r\n        @Keep\r\n        Base<String> a;\r\n\r\n        @JsonAdapter(BaseIntegerAdapter.class)\r\n        @Keep\r\n        Base<Integer> b;\r\n\r\n        Container(String a, int b) {\r\n            this.a = new Base<>(a);\r\n            this.b = new Base<>(b);\r\n        }\r\n    }\r\n\r\n    private static final class Base<T> {\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        T value;\r\n\r\n        Base(T value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    private static final class BaseStringAdapter implements JsonSerializer<Base<String>> {\r\n\r\n        @Override\r\n        public JsonElement serialize(Base<String> src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"BaseStringAdapter\");\r\n        }\r\n    }\r\n\r\n    private static final class BaseIntegerAdapter implements JsonSerializer<Base<Integer>> {\r\n\r\n        @Override\r\n        public JsonElement serialize(Base<Integer> src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"BaseIntegerAdapter\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testJsonAdapterNullSafe() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new TypeAdapter<User>() {\r\n\r\n            @Override\r\n            public User read(JsonReader in) throws IOException {\r\n                in.nextNull();\r\n                return new User(\"fallback-read\");\r\n            }\r\n\r\n            @Override\r\n            public void write(JsonWriter out, User value) throws IOException {\r\n                assertThat(value).isNull();\r\n                out.value(\"fallback-write\");\r\n            }\r\n        }).serializeNulls().create();\r\n        String json = gson.toJson(new WithNullSafe(null, null, null, null));\r\n        // Only nullSafe=true serializer writes null; for @JsonAdapter with deserializer nullSafe is\r\n        // ignored when serializing\r\n        assertThat(json).isEqualTo(\"{\\\"userS\\\":\\\"UserSerializer\\\",\\\"userSN\\\":null,\\\"userD\\\":\\\"fallback-write\\\",\\\"userDN\\\":\\\"fallback-write\\\"}\");\r\n        WithNullSafe deserialized = gson.fromJson(\"{\\\"userS\\\":null,\\\"userSN\\\":null,\\\"userD\\\":null,\\\"userDN\\\":null}\", WithNullSafe.class);\r\n        // For @JsonAdapter with serializer nullSafe is ignored when deserializing\r\n        assertThat(deserialized.userS.name).isEqualTo(\"fallback-read\");\r\n        assertThat(deserialized.userSN.name).isEqualTo(\"fallback-read\");\r\n        assertThat(deserialized.userD.name).isEqualTo(\"UserDeserializer\");\r\n        assertThat(deserialized.userDN).isNull();\r\n    }\r\n\r\n    @SuppressWarnings(\"MemberName\")\r\n    private static final class WithNullSafe {\r\n\r\n        // \"userS...\" uses JsonSerializer\r\n        @JsonAdapter(value = UserSerializer.class, nullSafe = false)\r\n        final User userS;\r\n\r\n        @JsonAdapter(value = UserSerializer.class, nullSafe = true)\r\n        final User userSN;\r\n\r\n        // \"userD...\" uses JsonDeserializer\r\n        @JsonAdapter(value = UserDeserializer.class, nullSafe = false)\r\n        final User userD;\r\n\r\n        @JsonAdapter(value = UserDeserializer.class, nullSafe = true)\r\n        final User userDN;\r\n\r\n        WithNullSafe(User userS, User userSN, User userD, User userDN) {\r\n            this.userS = userS;\r\n            this.userSN = userSN;\r\n            this.userD = userD;\r\n            this.userDN = userDN;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "method",
    "name": "testJsonSerializerDeserializerBasedJsonAdapterOnFields",
    "start_line": 45,
    "end_line": 56,
    "code": "@Test\r\npublic void testJsonSerializerDeserializerBasedJsonAdapterOnFields() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\"), null, new User(\"Jesse Wilson\")));\r\n    assertThat(json).isEqualTo(\"{\\\"user1\\\":\\\"UserSerializer\\\",\\\"user3\\\":\\\"UserSerializerDeserializer\\\"}\");\r\n    Computer computer = gson.fromJson(\"{'user2':'Jesse Wilson','user3':'Jake Wharton'}\", Computer.class);\r\n    assertThat(computer.user2.name).isEqualTo(\"UserDeserializer\");\r\n    assertThat(computer.user3.name).isEqualTo(\"UserSerializerDeserializer\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "method",
    "name": "testJsonSerializerDeserializerBasedJsonAdapterOnClass",
    "start_line": 115,
    "end_line": 122,
    "code": "@Test\r\npublic void testJsonSerializerDeserializerBasedJsonAdapterOnClass() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Computer2(new User2(\"Inderjeet Singh\")));\r\n    assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserSerializerDeserializer2\\\"}\");\r\n    Computer2 computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer2.class);\r\n    assertThat(computer.user.name).isEqualTo(\"UserSerializerDeserializer2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "method",
    "name": "testDifferentJsonAdaptersForGenericFieldsOfSameRawType",
    "start_line": 155,
    "end_line": 162,
    "code": "@Test\r\npublic void testDifferentJsonAdaptersForGenericFieldsOfSameRawType() {\r\n    Container c = new Container(\"Foo\", 10);\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(c);\r\n    assertThat(json).contains(\"\\\"a\\\":\\\"BaseStringAdapter\\\"\");\r\n    assertThat(json).contains(\"\\\"b\\\":\\\"BaseIntegerAdapter\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  },
  {
    "type": "method",
    "name": "testJsonAdapterNullSafe",
    "start_line": 204,
    "end_line": 241,
    "code": "@Test\r\npublic void testJsonAdapterNullSafe() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new TypeAdapter<User>() {\r\n\r\n        @Override\r\n        public User read(JsonReader in) throws IOException {\r\n            in.nextNull();\r\n            return new User(\"fallback-read\");\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, User value) throws IOException {\r\n            assertThat(value).isNull();\r\n            out.value(\"fallback-write\");\r\n        }\r\n    }).serializeNulls().create();\r\n    String json = gson.toJson(new WithNullSafe(null, null, null, null));\r\n    // Only nullSafe=true serializer writes null; for @JsonAdapter with deserializer nullSafe is\r\n    // ignored when serializing\r\n    assertThat(json).isEqualTo(\"{\\\"userS\\\":\\\"UserSerializer\\\",\\\"userSN\\\":null,\\\"userD\\\":\\\"fallback-write\\\",\\\"userDN\\\":\\\"fallback-write\\\"}\");\r\n    WithNullSafe deserialized = gson.fromJson(\"{\\\"userS\\\":null,\\\"userSN\\\":null,\\\"userD\\\":null,\\\"userDN\\\":null}\", WithNullSafe.class);\r\n    // For @JsonAdapter with serializer nullSafe is ignored when deserializing\r\n    assertThat(deserialized.userS.name).isEqualTo(\"fallback-read\");\r\n    assertThat(deserialized.userSN.name).isEqualTo(\"fallback-read\");\r\n    assertThat(deserialized.userD.name).isEqualTo(\"UserDeserializer\");\r\n    assertThat(deserialized.userDN).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterSerializerDeserializerTest.java"
  }
]