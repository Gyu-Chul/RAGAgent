[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashMap",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.HashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 28,
    "end_line": 28,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 29,
    "end_line": 29,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "class",
    "name": "MoreSpecificTypeSerializationTest",
    "start_line": 36,
    "end_line": 192,
    "code": "/**\r\n * Tests for Gson serialization of a sub-class object while encountering a base-class type\r\n *\r\n * @author Inderjeet Singh\r\n */\r\n@SuppressWarnings(\"unused\")\r\npublic class MoreSpecificTypeSerializationTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testSubclassFields() {\r\n        ClassWithBaseFields target = new ClassWithBaseFields(new Sub(1, 2));\r\n        String json = gson.toJson(target);\r\n        assertThat(json).contains(\"\\\"b\\\":1\");\r\n        assertThat(json).contains(\"\\\"s\\\":2\");\r\n    }\r\n\r\n    @Test\r\n    public void testListOfSubclassFields() {\r\n        List<Base> list = new ArrayList<>();\r\n        list.add(new Base(1));\r\n        list.add(new Sub(2, 3));\r\n        ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(list, null);\r\n        String json = gson.toJson(target);\r\n        assertThat(json).contains(\"{\\\"b\\\":1}\");\r\n        assertThat(json).contains(\"{\\\"s\\\":3,\\\"b\\\":2}\");\r\n    }\r\n\r\n    @Test\r\n    public void testMapOfSubclassFields() {\r\n        Map<String, Base> map = new HashMap<>();\r\n        map.put(\"base\", new Base(1));\r\n        map.put(\"sub\", new Sub(2, 3));\r\n        ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(null, map);\r\n        JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\r\n        assertThat(json.get(\"base\").getAsJsonObject().get(\"b\").getAsInt()).isEqualTo(1);\r\n        JsonObject sub = json.get(\"sub\").getAsJsonObject();\r\n        assertThat(sub.get(\"b\").getAsInt()).isEqualTo(2);\r\n        assertThat(sub.get(\"s\").getAsInt()).isEqualTo(3);\r\n    }\r\n\r\n    /**\r\n     * For parameterized type, Gson ignores the more-specific type and sticks to the declared type\r\n     */\r\n    @Test\r\n    public void testParameterizedSubclassFields() {\r\n        ClassWithParameterizedBaseFields target = new ClassWithParameterizedBaseFields(new ParameterizedSub<>(\"one\", \"two\"));\r\n        String json = gson.toJson(target);\r\n        assertThat(json).contains(\"\\\"t\\\":\\\"one\\\"\");\r\n        assertThat(json).doesNotContain(\"\\\"s\\\"\");\r\n    }\r\n\r\n    /**\r\n     * For parameterized type in a List, Gson ignores the more-specific type and sticks to the\r\n     * declared type\r\n     */\r\n    @Test\r\n    public void testListOfParameterizedSubclassFields() {\r\n        List<ParameterizedBase<String>> list = new ArrayList<>();\r\n        list.add(new ParameterizedBase<>(\"one\"));\r\n        list.add(new ParameterizedSub<>(\"two\", \"three\"));\r\n        ClassWithContainersOfParameterizedBaseFields target = new ClassWithContainersOfParameterizedBaseFields(list, null);\r\n        String json = gson.toJson(target);\r\n        assertThat(json).contains(\"{\\\"t\\\":\\\"one\\\"}\");\r\n        assertThat(json).doesNotContain(\"\\\"s\\\":\");\r\n    }\r\n\r\n    /**\r\n     * For parameterized type in a map, Gson ignores the more-specific type and sticks to the declared\r\n     * type\r\n     */\r\n    @Test\r\n    public void testMapOfParameterizedSubclassFields() {\r\n        Map<String, ParameterizedBase<String>> map = new HashMap<>();\r\n        map.put(\"base\", new ParameterizedBase<>(\"one\"));\r\n        map.put(\"sub\", new ParameterizedSub<>(\"two\", \"three\"));\r\n        ClassWithContainersOfParameterizedBaseFields target = new ClassWithContainersOfParameterizedBaseFields(null, map);\r\n        JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\r\n        assertThat(json.get(\"base\").getAsJsonObject().get(\"t\").getAsString()).isEqualTo(\"one\");\r\n        JsonObject sub = json.get(\"sub\").getAsJsonObject();\r\n        assertThat(sub.get(\"t\").getAsString()).isEqualTo(\"two\");\r\n        assertThat(sub.get(\"s\")).isNull();\r\n    }\r\n\r\n    private static class Base {\r\n\r\n        int b;\r\n\r\n        Base(int b) {\r\n            this.b = b;\r\n        }\r\n    }\r\n\r\n    private static class Sub extends Base {\r\n\r\n        int s;\r\n\r\n        Sub(int b, int s) {\r\n            super(b);\r\n            this.s = s;\r\n        }\r\n    }\r\n\r\n    private static class ClassWithBaseFields {\r\n\r\n        Base b;\r\n\r\n        ClassWithBaseFields(Base b) {\r\n            this.b = b;\r\n        }\r\n    }\r\n\r\n    private static class ClassWithContainersOfBaseFields {\r\n\r\n        Collection<Base> collection;\r\n\r\n        Map<String, Base> map;\r\n\r\n        ClassWithContainersOfBaseFields(Collection<Base> collection, Map<String, Base> map) {\r\n            this.collection = collection;\r\n            this.map = map;\r\n        }\r\n    }\r\n\r\n    private static class ParameterizedBase<T> {\r\n\r\n        T t;\r\n\r\n        ParameterizedBase(T t) {\r\n            this.t = t;\r\n        }\r\n    }\r\n\r\n    private static class ParameterizedSub<T> extends ParameterizedBase<T> {\r\n\r\n        T s;\r\n\r\n        ParameterizedSub(T t, T s) {\r\n            super(t);\r\n            this.s = s;\r\n        }\r\n    }\r\n\r\n    private static class ClassWithParameterizedBaseFields {\r\n\r\n        ParameterizedBase<String> b;\r\n\r\n        ClassWithParameterizedBaseFields(ParameterizedBase<String> b) {\r\n            this.b = b;\r\n        }\r\n    }\r\n\r\n    private static class ClassWithContainersOfParameterizedBaseFields {\r\n\r\n        Collection<ParameterizedBase<String>> collection;\r\n\r\n        Map<String, ParameterizedBase<String>> map;\r\n\r\n        ClassWithContainersOfParameterizedBaseFields(Collection<ParameterizedBase<String>> collection, Map<String, ParameterizedBase<String>> map) {\r\n            this.collection = collection;\r\n            this.map = map;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 38,
    "end_line": 38,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 40,
    "end_line": 43,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testSubclassFields",
    "start_line": 45,
    "end_line": 51,
    "code": "@Test\r\npublic void testSubclassFields() {\r\n    ClassWithBaseFields target = new ClassWithBaseFields(new Sub(1, 2));\r\n    String json = gson.toJson(target);\r\n    assertThat(json).contains(\"\\\"b\\\":1\");\r\n    assertThat(json).contains(\"\\\"s\\\":2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testListOfSubclassFields",
    "start_line": 53,
    "end_line": 62,
    "code": "@Test\r\npublic void testListOfSubclassFields() {\r\n    List<Base> list = new ArrayList<>();\r\n    list.add(new Base(1));\r\n    list.add(new Sub(2, 3));\r\n    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(list, null);\r\n    String json = gson.toJson(target);\r\n    assertThat(json).contains(\"{\\\"b\\\":1}\");\r\n    assertThat(json).contains(\"{\\\"s\\\":3,\\\"b\\\":2}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testMapOfSubclassFields",
    "start_line": 64,
    "end_line": 75,
    "code": "@Test\r\npublic void testMapOfSubclassFields() {\r\n    Map<String, Base> map = new HashMap<>();\r\n    map.put(\"base\", new Base(1));\r\n    map.put(\"sub\", new Sub(2, 3));\r\n    ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(null, map);\r\n    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\r\n    assertThat(json.get(\"base\").getAsJsonObject().get(\"b\").getAsInt()).isEqualTo(1);\r\n    JsonObject sub = json.get(\"sub\").getAsJsonObject();\r\n    assertThat(sub.get(\"b\").getAsInt()).isEqualTo(2);\r\n    assertThat(sub.get(\"s\").getAsInt()).isEqualTo(3);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testParameterizedSubclassFields",
    "start_line": 78,
    "end_line": 85,
    "code": "/**\r\n * For parameterized type, Gson ignores the more-specific type and sticks to the declared type\r\n */\r\n@Test\r\npublic void testParameterizedSubclassFields() {\r\n    ClassWithParameterizedBaseFields target = new ClassWithParameterizedBaseFields(new ParameterizedSub<>(\"one\", \"two\"));\r\n    String json = gson.toJson(target);\r\n    assertThat(json).contains(\"\\\"t\\\":\\\"one\\\"\");\r\n    assertThat(json).doesNotContain(\"\\\"s\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testListOfParameterizedSubclassFields",
    "start_line": 91,
    "end_line": 101,
    "code": "/**\r\n * For parameterized type in a List, Gson ignores the more-specific type and sticks to the\r\n * declared type\r\n */\r\n@Test\r\npublic void testListOfParameterizedSubclassFields() {\r\n    List<ParameterizedBase<String>> list = new ArrayList<>();\r\n    list.add(new ParameterizedBase<>(\"one\"));\r\n    list.add(new ParameterizedSub<>(\"two\", \"three\"));\r\n    ClassWithContainersOfParameterizedBaseFields target = new ClassWithContainersOfParameterizedBaseFields(list, null);\r\n    String json = gson.toJson(target);\r\n    assertThat(json).contains(\"{\\\"t\\\":\\\"one\\\"}\");\r\n    assertThat(json).doesNotContain(\"\\\"s\\\":\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testMapOfParameterizedSubclassFields",
    "start_line": 107,
    "end_line": 119,
    "code": "/**\r\n * For parameterized type in a map, Gson ignores the more-specific type and sticks to the declared\r\n * type\r\n */\r\n@Test\r\npublic void testMapOfParameterizedSubclassFields() {\r\n    Map<String, ParameterizedBase<String>> map = new HashMap<>();\r\n    map.put(\"base\", new ParameterizedBase<>(\"one\"));\r\n    map.put(\"sub\", new ParameterizedSub<>(\"two\", \"three\"));\r\n    ClassWithContainersOfParameterizedBaseFields target = new ClassWithContainersOfParameterizedBaseFields(null, map);\r\n    JsonObject json = gson.toJsonTree(target).getAsJsonObject().get(\"map\").getAsJsonObject();\r\n    assertThat(json.get(\"base\").getAsJsonObject().get(\"t\").getAsString()).isEqualTo(\"one\");\r\n    JsonObject sub = json.get(\"sub\").getAsJsonObject();\r\n    assertThat(sub.get(\"t\").getAsString()).isEqualTo(\"two\");\r\n    assertThat(sub.get(\"s\")).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\MoreSpecificTypeSerializationTest.java"
  }
]