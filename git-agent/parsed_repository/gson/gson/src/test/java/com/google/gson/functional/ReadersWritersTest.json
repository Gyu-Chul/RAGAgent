[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 19,
    "end_line": 19,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.CanIgnoreReturnValue",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonStreamParser",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonStreamParser;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.CharArrayReader",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.io.CharArrayReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.CharArrayWriter",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.CharArrayWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringWriter",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.io.StringWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.Writer",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.io.Writer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 38,
    "end_line": 38,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 39,
    "end_line": 39,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "class",
    "name": "ReadersWritersTest",
    "start_line": 47,
    "end_line": 203,
    "code": "/**\r\n * Functional tests for the support of {@link Reader}s and {@link Writer}s.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class ReadersWritersTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testWriterForSerialization() {\r\n        Writer writer = new StringWriter();\r\n        BagOfPrimitives src = new BagOfPrimitives();\r\n        gson.toJson(src, writer);\r\n        assertThat(writer.toString()).isEqualTo(src.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testReaderForDeserialization() {\r\n        BagOfPrimitives expected = new BagOfPrimitives();\r\n        Reader json = new StringReader(expected.getExpectedJson());\r\n        BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelNullObjectSerializationWithWriter() {\r\n        StringWriter writer = new StringWriter();\r\n        gson.toJson(null, writer);\r\n        assertThat(writer.toString()).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelNullObjectDeserializationWithReader() {\r\n        StringReader reader = new StringReader(\"null\");\r\n        Integer nullIntObject = gson.fromJson(reader, Integer.class);\r\n        assertThat(nullIntObject).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls() {\r\n        Gson gson = new GsonBuilder().serializeNulls().create();\r\n        StringWriter writer = new StringWriter();\r\n        gson.toJson(null, writer);\r\n        assertThat(writer.toString()).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {\r\n        Gson gson = new GsonBuilder().serializeNulls().create();\r\n        StringReader reader = new StringReader(\"null\");\r\n        Integer nullIntObject = gson.fromJson(reader, Integer.class);\r\n        assertThat(nullIntObject).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testReadWriteTwoStrings() throws IOException {\r\n        Gson gson = new Gson();\r\n        CharArrayWriter writer = new CharArrayWriter();\r\n        writer.write(gson.toJson(\"one\").toCharArray());\r\n        writer.write(gson.toJson(\"two\").toCharArray());\r\n        CharArrayReader reader = new CharArrayReader(writer.toCharArray());\r\n        JsonStreamParser parser = new JsonStreamParser(reader);\r\n        String actualOne = gson.fromJson(parser.next(), String.class);\r\n        assertThat(actualOne).isEqualTo(\"one\");\r\n        String actualTwo = gson.fromJson(parser.next(), String.class);\r\n        assertThat(actualTwo).isEqualTo(\"two\");\r\n    }\r\n\r\n    @Test\r\n    public void testReadWriteTwoObjects() throws IOException {\r\n        Gson gson = new Gson();\r\n        CharArrayWriter writer = new CharArrayWriter();\r\n        BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\r\n        writer.write(gson.toJson(expectedOne).toCharArray());\r\n        BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\r\n        writer.write(gson.toJson(expectedTwo).toCharArray());\r\n        CharArrayReader reader = new CharArrayReader(writer.toCharArray());\r\n        JsonStreamParser parser = new JsonStreamParser(reader);\r\n        BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);\r\n        assertThat(actualOne.stringValue).isEqualTo(\"one\");\r\n        BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);\r\n        assertThat(actualTwo.stringValue).isEqualTo(\"two\");\r\n        assertThat(parser.hasNext()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testTypeMismatchThrowsJsonSyntaxExceptionForStrings() {\r\n        Type type = new TypeToken<Map<String, String>>() {\r\n        }.getType();\r\n        var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"true\", type));\r\n        assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected BEGIN_OBJECT but was BOOLEAN\");\r\n    }\r\n\r\n    @Test\r\n    public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {\r\n        Type type = new TypeToken<Map<String, String>>() {\r\n        }.getType();\r\n        var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(new StringReader(\"true\"), type));\r\n        assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected BEGIN_OBJECT but was BOOLEAN\");\r\n    }\r\n\r\n    /**\r\n     * Verifies that passing an {@link Appendable} which is not an instance of {@link Writer} to\r\n     * {@code Gson.toJson} works correctly.\r\n     */\r\n    @Test\r\n    public void testToJsonAppendable() {\r\n        class CustomAppendable implements Appendable {\r\n\r\n            final StringBuilder stringBuilder = new StringBuilder();\r\n\r\n            int toStringCallCount = 0;\r\n\r\n            @CanIgnoreReturnValue\r\n            @Override\r\n            public Appendable append(char c) throws IOException {\r\n                stringBuilder.append(c);\r\n                return this;\r\n            }\r\n\r\n            @CanIgnoreReturnValue\r\n            @Override\r\n            public Appendable append(CharSequence csq) throws IOException {\r\n                if (csq == null) {\r\n                    // Requirement by Writer.append\r\n                    csq = \"null\";\r\n                }\r\n                append(csq, 0, csq.length());\r\n                return this;\r\n            }\r\n\r\n            @CanIgnoreReturnValue\r\n            @Override\r\n            public Appendable append(CharSequence csq, int start, int end) throws IOException {\r\n                if (csq == null) {\r\n                    // Requirement by Writer.append\r\n                    csq = \"null\";\r\n                }\r\n                // According to doc, toString() must return string representation\r\n                String s = csq.toString();\r\n                toStringCallCount++;\r\n                stringBuilder.append(s, start, end);\r\n                return this;\r\n            }\r\n        }\r\n        CustomAppendable appendable = new CustomAppendable();\r\n        gson.toJson(Arrays.asList(\"test\", 123, true), appendable);\r\n        // Make sure CharSequence.toString() was called at least two times to verify that\r\n        // CurrentWrite.cachedString is properly overwritten when char array changes\r\n        assertThat(appendable.toStringCallCount).isAtLeast(2);\r\n        assertThat(appendable.stringBuilder.toString()).isEqualTo(\"[\\\"test\\\",123,true]\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 48,
    "end_line": 48,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 50,
    "end_line": 53,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testWriterForSerialization",
    "start_line": 55,
    "end_line": 61,
    "code": "@Test\r\npublic void testWriterForSerialization() {\r\n    Writer writer = new StringWriter();\r\n    BagOfPrimitives src = new BagOfPrimitives();\r\n    gson.toJson(src, writer);\r\n    assertThat(writer.toString()).isEqualTo(src.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testReaderForDeserialization",
    "start_line": 63,
    "end_line": 69,
    "code": "@Test\r\npublic void testReaderForDeserialization() {\r\n    BagOfPrimitives expected = new BagOfPrimitives();\r\n    Reader json = new StringReader(expected.getExpectedJson());\r\n    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelNullObjectSerializationWithWriter",
    "start_line": 71,
    "end_line": 76,
    "code": "@Test\r\npublic void testTopLevelNullObjectSerializationWithWriter() {\r\n    StringWriter writer = new StringWriter();\r\n    gson.toJson(null, writer);\r\n    assertThat(writer.toString()).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelNullObjectDeserializationWithReader",
    "start_line": 78,
    "end_line": 83,
    "code": "@Test\r\npublic void testTopLevelNullObjectDeserializationWithReader() {\r\n    StringReader reader = new StringReader(\"null\");\r\n    Integer nullIntObject = gson.fromJson(reader, Integer.class);\r\n    assertThat(nullIntObject).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelNullObjectSerializationWithWriterAndSerializeNulls",
    "start_line": 85,
    "end_line": 91,
    "code": "@Test\r\npublic void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls() {\r\n    Gson gson = new GsonBuilder().serializeNulls().create();\r\n    StringWriter writer = new StringWriter();\r\n    gson.toJson(null, writer);\r\n    assertThat(writer.toString()).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls",
    "start_line": 93,
    "end_line": 99,
    "code": "@Test\r\npublic void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {\r\n    Gson gson = new GsonBuilder().serializeNulls().create();\r\n    StringReader reader = new StringReader(\"null\");\r\n    Integer nullIntObject = gson.fromJson(reader, Integer.class);\r\n    assertThat(nullIntObject).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testReadWriteTwoStrings",
    "start_line": 101,
    "end_line": 113,
    "code": "@Test\r\npublic void testReadWriteTwoStrings() throws IOException {\r\n    Gson gson = new Gson();\r\n    CharArrayWriter writer = new CharArrayWriter();\r\n    writer.write(gson.toJson(\"one\").toCharArray());\r\n    writer.write(gson.toJson(\"two\").toCharArray());\r\n    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\r\n    JsonStreamParser parser = new JsonStreamParser(reader);\r\n    String actualOne = gson.fromJson(parser.next(), String.class);\r\n    assertThat(actualOne).isEqualTo(\"one\");\r\n    String actualTwo = gson.fromJson(parser.next(), String.class);\r\n    assertThat(actualTwo).isEqualTo(\"two\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testReadWriteTwoObjects",
    "start_line": 115,
    "end_line": 130,
    "code": "@Test\r\npublic void testReadWriteTwoObjects() throws IOException {\r\n    Gson gson = new Gson();\r\n    CharArrayWriter writer = new CharArrayWriter();\r\n    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\r\n    writer.write(gson.toJson(expectedOne).toCharArray());\r\n    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\r\n    writer.write(gson.toJson(expectedTwo).toCharArray());\r\n    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\r\n    JsonStreamParser parser = new JsonStreamParser(reader);\r\n    BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);\r\n    assertThat(actualOne.stringValue).isEqualTo(\"one\");\r\n    BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);\r\n    assertThat(actualTwo.stringValue).isEqualTo(\"two\");\r\n    assertThat(parser.hasNext()).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTypeMismatchThrowsJsonSyntaxExceptionForStrings",
    "start_line": 132,
    "end_line": 140,
    "code": "@Test\r\npublic void testTypeMismatchThrowsJsonSyntaxExceptionForStrings() {\r\n    Type type = new TypeToken<Map<String, String>>() {\r\n    }.getType();\r\n    var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"true\", type));\r\n    assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected BEGIN_OBJECT but was BOOLEAN\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testTypeMismatchThrowsJsonSyntaxExceptionForReaders",
    "start_line": 142,
    "end_line": 152,
    "code": "@Test\r\npublic void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {\r\n    Type type = new TypeToken<Map<String, String>>() {\r\n    }.getType();\r\n    var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(new StringReader(\"true\"), type));\r\n    assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected BEGIN_OBJECT but was BOOLEAN\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  },
  {
    "type": "method",
    "name": "testToJsonAppendable",
    "start_line": 158,
    "end_line": 202,
    "code": "/**\r\n * Verifies that passing an {@link Appendable} which is not an instance of {@link Writer} to\r\n * {@code Gson.toJson} works correctly.\r\n */\r\n@Test\r\npublic void testToJsonAppendable() {\r\n    class CustomAppendable implements Appendable {\r\n\r\n        final StringBuilder stringBuilder = new StringBuilder();\r\n\r\n        int toStringCallCount = 0;\r\n\r\n        @CanIgnoreReturnValue\r\n        @Override\r\n        public Appendable append(char c) throws IOException {\r\n            stringBuilder.append(c);\r\n            return this;\r\n        }\r\n\r\n        @CanIgnoreReturnValue\r\n        @Override\r\n        public Appendable append(CharSequence csq) throws IOException {\r\n            if (csq == null) {\r\n                // Requirement by Writer.append\r\n                csq = \"null\";\r\n            }\r\n            append(csq, 0, csq.length());\r\n            return this;\r\n        }\r\n\r\n        @CanIgnoreReturnValue\r\n        @Override\r\n        public Appendable append(CharSequence csq, int start, int end) throws IOException {\r\n            if (csq == null) {\r\n                // Requirement by Writer.append\r\n                csq = \"null\";\r\n            }\r\n            // According to doc, toString() must return string representation\r\n            String s = csq.toString();\r\n            toStringCallCount++;\r\n            stringBuilder.append(s, start, end);\r\n            return this;\r\n        }\r\n    }\r\n    CustomAppendable appendable = new CustomAppendable();\r\n    gson.toJson(Arrays.asList(\"test\", 123, true), appendable);\r\n    // Make sure CharSequence.toString() was called at least two times to verify that\r\n    // CurrentWrite.cachedString is properly overwritten when char array changes\r\n    assertThat(appendable.toStringCallCount).isAtLeast(2);\r\n    assertThat(appendable.stringBuilder.toString()).isEqualTo(\"[\\\"test\\\",123,true]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReadersWritersTest.java"
  }
]