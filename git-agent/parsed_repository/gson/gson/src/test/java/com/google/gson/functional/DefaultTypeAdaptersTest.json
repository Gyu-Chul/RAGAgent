[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertWithMessage",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertWithMessage;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonArray",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonNull",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonNull;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 35,
    "end_line": 35,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Constructor",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.lang.reflect.Constructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 40,
    "end_line": 40,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.net.InetAddress",
    "start_line": 41,
    "end_line": 41,
    "code": "import java.net.InetAddress;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.net.URI",
    "start_line": 42,
    "end_line": 42,
    "code": "import java.net.URI;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.net.URL",
    "start_line": 43,
    "end_line": 43,
    "code": "import java.net.URL;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.text.DateFormat",
    "start_line": 44,
    "end_line": 44,
    "code": "import java.text.DateFormat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 45,
    "end_line": 45,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 46,
    "end_line": 46,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.BitSet",
    "start_line": 47,
    "end_line": 47,
    "code": "import java.util.BitSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Calendar",
    "start_line": 48,
    "end_line": 48,
    "code": "import java.util.Calendar;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Date",
    "start_line": 49,
    "end_line": 49,
    "code": "import java.util.Date;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.GregorianCalendar",
    "start_line": 50,
    "end_line": 50,
    "code": "import java.util.GregorianCalendar;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashSet",
    "start_line": 51,
    "end_line": 51,
    "code": "import java.util.HashSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 52,
    "end_line": 52,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 53,
    "end_line": 53,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Properties",
    "start_line": 54,
    "end_line": 54,
    "code": "import java.util.Properties;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Set",
    "start_line": 55,
    "end_line": 55,
    "code": "import java.util.Set;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.TimeZone",
    "start_line": 56,
    "end_line": 56,
    "code": "import java.util.TimeZone;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.TreeSet",
    "start_line": 57,
    "end_line": 57,
    "code": "import java.util.TreeSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "java.util.UUID",
    "start_line": 58,
    "end_line": 58,
    "code": "import java.util.UUID;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.After",
    "start_line": 59,
    "end_line": 59,
    "code": "import org.junit.After;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 60,
    "end_line": 60,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 61,
    "end_line": 61,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "class",
    "name": "DefaultTypeAdaptersTest",
    "start_line": 70,
    "end_line": 853,
    "code": "/**\r\n * Functional test for Json serialization and deserialization for common classes for which default\r\n * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\n@SuppressWarnings(\"JavaUtilDate\")\r\npublic class DefaultTypeAdaptersTest {\r\n\r\n    private Gson gson;\r\n\r\n    private TimeZone oldTimeZone;\r\n\r\n    private Locale oldLocale;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        this.oldTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n        this.oldLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        gson = new Gson();\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        TimeZone.setDefault(oldTimeZone);\r\n        Locale.setDefault(oldLocale);\r\n    }\r\n\r\n    @Test\r\n    public void testClassSerialization() {\r\n        var exception = assertThrows(UnsupportedOperationException.class, () -> gson.toJson(String.class));\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type\" + \" adapter?\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#java-lang-class-unsupported\");\r\n        // Override with a custom type adapter for class.\r\n        gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\r\n        assertThat(gson.toJson(String.class)).isEqualTo(\"\\\"java.lang.String\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testClassDeserialization() {\r\n        var exception = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"String.class\", Class.class));\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#java-lang-class-unsupported\");\r\n        // Override with a custom type adapter for class.\r\n        gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\r\n        assertThat(gson.fromJson(\"java.lang.String\", Class.class)).isAssignableTo(String.class);\r\n    }\r\n\r\n    @Test\r\n    public void testUrlSerialization() throws Exception {\r\n        String urlValue = \"http://google.com/\";\r\n        URL url = new URL(urlValue);\r\n        assertThat(gson.toJson(url)).isEqualTo(\"\\\"http://google.com/\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testUrlDeserialization() {\r\n        String urlValue = \"http://google.com/\";\r\n        String json = \"'http:\\\\/\\\\/google.com\\\\/'\";\r\n        URL target1 = gson.fromJson(json, URL.class);\r\n        assertThat(target1.toExternalForm()).isEqualTo(urlValue);\r\n        URL target2 = gson.fromJson('\"' + urlValue + '\"', URL.class);\r\n        assertThat(target2.toExternalForm()).isEqualTo(urlValue);\r\n    }\r\n\r\n    @Test\r\n    public void testUrlNullSerialization() {\r\n        ClassWithUrlField target = new ClassWithUrlField();\r\n        assertThat(gson.toJson(target)).isEqualTo(\"{}\");\r\n    }\r\n\r\n    @Test\r\n    public void testUrlNullDeserialization() {\r\n        String json = \"{}\";\r\n        ClassWithUrlField target = gson.fromJson(json, ClassWithUrlField.class);\r\n        assertThat(target.url).isNull();\r\n    }\r\n\r\n    private static class ClassWithUrlField {\r\n\r\n        URL url;\r\n    }\r\n\r\n    @Test\r\n    public void testUriSerialization() throws Exception {\r\n        String uriValue = \"http://google.com/\";\r\n        URI uri = new URI(uriValue);\r\n        assertThat(gson.toJson(uri)).isEqualTo(\"\\\"http://google.com/\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testUriDeserialization() {\r\n        String uriValue = \"http://google.com/\";\r\n        String json = '\"' + uriValue + '\"';\r\n        URI target = gson.fromJson(json, URI.class);\r\n        assertThat(target.toASCIIString()).isEqualTo(uriValue);\r\n    }\r\n\r\n    @Test\r\n    public void testNullSerialization() {\r\n        testNullSerializationAndDeserialization(Boolean.class);\r\n        testNullSerializationAndDeserialization(Byte.class);\r\n        testNullSerializationAndDeserialization(Short.class);\r\n        testNullSerializationAndDeserialization(Integer.class);\r\n        testNullSerializationAndDeserialization(Long.class);\r\n        testNullSerializationAndDeserialization(Double.class);\r\n        testNullSerializationAndDeserialization(Float.class);\r\n        testNullSerializationAndDeserialization(Number.class);\r\n        testNullSerializationAndDeserialization(Character.class);\r\n        testNullSerializationAndDeserialization(String.class);\r\n        testNullSerializationAndDeserialization(StringBuilder.class);\r\n        testNullSerializationAndDeserialization(StringBuffer.class);\r\n        testNullSerializationAndDeserialization(BigDecimal.class);\r\n        testNullSerializationAndDeserialization(BigInteger.class);\r\n        testNullSerializationAndDeserialization(TreeSet.class);\r\n        testNullSerializationAndDeserialization(ArrayList.class);\r\n        testNullSerializationAndDeserialization(HashSet.class);\r\n        testNullSerializationAndDeserialization(Properties.class);\r\n        testNullSerializationAndDeserialization(URL.class);\r\n        testNullSerializationAndDeserialization(URI.class);\r\n        testNullSerializationAndDeserialization(UUID.class);\r\n        testNullSerializationAndDeserialization(Locale.class);\r\n        testNullSerializationAndDeserialization(InetAddress.class);\r\n        testNullSerializationAndDeserialization(BitSet.class);\r\n        testNullSerializationAndDeserialization(Date.class);\r\n        testNullSerializationAndDeserialization(GregorianCalendar.class);\r\n        testNullSerializationAndDeserialization(Calendar.class);\r\n        testNullSerializationAndDeserialization(Class.class);\r\n    }\r\n\r\n    private void testNullSerializationAndDeserialization(Class<?> c) {\r\n        testNullSerializationAndDeserialization(gson, c);\r\n    }\r\n\r\n    public static void testNullSerializationAndDeserialization(Gson gson, Class<?> c) {\r\n        assertThat(gson.toJson(null, c)).isEqualTo(\"null\");\r\n        assertThat(gson.fromJson(\"null\", c)).isEqualTo(null);\r\n    }\r\n\r\n    @Test\r\n    public void testUuidSerialization() {\r\n        String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\r\n        UUID uuid = UUID.fromString(uuidValue);\r\n        assertThat(gson.toJson(uuid)).isEqualTo('\"' + uuidValue + '\"');\r\n    }\r\n\r\n    @Test\r\n    public void testUuidDeserialization() {\r\n        String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\r\n        String json = '\"' + uuidValue + '\"';\r\n        UUID target = gson.fromJson(json, UUID.class);\r\n        assertThat(target.toString()).isEqualTo(uuidValue);\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleSerializationWithLanguage() {\r\n        Locale target = new Locale(\"en\");\r\n        assertThat(gson.toJson(target)).isEqualTo(\"\\\"en\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleDeserializationWithLanguage() {\r\n        String json = \"\\\"en\\\"\";\r\n        Locale locale = gson.fromJson(json, Locale.class);\r\n        assertThat(locale.getLanguage()).isEqualTo(\"en\");\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleSerializationWithLanguageCountry() {\r\n        Locale target = Locale.CANADA_FRENCH;\r\n        assertThat(gson.toJson(target)).isEqualTo(\"\\\"fr_CA\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleDeserializationWithLanguageCountry() {\r\n        String json = \"\\\"fr_CA\\\"\";\r\n        Locale locale = gson.fromJson(json, Locale.class);\r\n        assertThat(locale).isEqualTo(Locale.CANADA_FRENCH);\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleSerializationWithLanguageCountryVariant() {\r\n        Locale target = new Locale(\"de\", \"DE\", \"EURO\");\r\n        String json = gson.toJson(target);\r\n        assertThat(json).isEqualTo(\"\\\"de_DE_EURO\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testLocaleDeserializationWithLanguageCountryVariant() {\r\n        String json = \"\\\"de_DE_EURO\\\"\";\r\n        Locale locale = gson.fromJson(json, Locale.class);\r\n        assertThat(locale.getLanguage()).isEqualTo(\"de\");\r\n        assertThat(locale.getCountry()).isEqualTo(\"DE\");\r\n        assertThat(locale.getVariant()).isEqualTo(\"EURO\");\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalFieldSerialization() {\r\n        ClassWithBigDecimal target = new ClassWithBigDecimal(\"-122.01e-21\");\r\n        String json = gson.toJson(target);\r\n        String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}'));\r\n        assertThat(new BigDecimal(actual)).isEqualTo(target.value);\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalFieldDeserialization() {\r\n        ClassWithBigDecimal expected = new ClassWithBigDecimal(\"-122.01e-21\");\r\n        String json = expected.getExpectedJson();\r\n        ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class);\r\n        assertThat(actual.value).isEqualTo(expected.value);\r\n    }\r\n\r\n    @Test\r\n    public void testBadValueForBigDecimalDeserialization() {\r\n        // Exponent of a BigDecimal must be an integer value\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(\"{\\\"value\\\": 1.5e-1.0031}\", ClassWithBigDecimal.class));\r\n    }\r\n\r\n    @Test\r\n    public void testBigIntegerFieldSerialization() {\r\n        ClassWithBigInteger target = new ClassWithBigInteger(\"23232323215323234234324324324324324324\");\r\n        String json = gson.toJson(target);\r\n        assertThat(json).isEqualTo(target.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testBigIntegerFieldDeserialization() {\r\n        ClassWithBigInteger expected = new ClassWithBigInteger(\"879697697697697697697697697697697697\");\r\n        String json = expected.getExpectedJson();\r\n        ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);\r\n        assertThat(actual.value).isEqualTo(expected.value);\r\n    }\r\n\r\n    @Test\r\n    public void testOverrideBigIntegerTypeAdapter() throws Exception {\r\n        gson = new GsonBuilder().registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class)).create();\r\n        assertThat(gson.toJson(new BigInteger(\"123\"), BigInteger.class)).isEqualTo(\"\\\"123\\\"\");\r\n        assertThat(gson.fromJson(\"\\\"123\\\"\", BigInteger.class)).isEqualTo(new BigInteger(\"123\"));\r\n    }\r\n\r\n    @Test\r\n    public void testOverrideBigDecimalTypeAdapter() throws Exception {\r\n        gson = new GsonBuilder().registerTypeAdapter(BigDecimal.class, new NumberAsStringAdapter(BigDecimal.class)).create();\r\n        assertThat(gson.toJson(new BigDecimal(\"1.1\"), BigDecimal.class)).isEqualTo(\"\\\"1.1\\\"\");\r\n        assertThat(gson.fromJson(\"\\\"1.1\\\"\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.1\"));\r\n    }\r\n\r\n    @Test\r\n    public void testSetSerialization() {\r\n        Gson gson = new Gson();\r\n        HashSet<String> s = new HashSet<>();\r\n        s.add(\"blah\");\r\n        String json = gson.toJson(s);\r\n        assertThat(json).isEqualTo(\"[\\\"blah\\\"]\");\r\n        json = gson.toJson(s, Set.class);\r\n        assertThat(json).isEqualTo(\"[\\\"blah\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testBitSetSerialization() {\r\n        Gson gson = new Gson();\r\n        BitSet bits = new BitSet();\r\n        bits.set(1);\r\n        bits.set(3, 6);\r\n        bits.set(9);\r\n        String json = gson.toJson(bits);\r\n        assertThat(json).isEqualTo(\"[0,1,0,1,1,1,0,0,0,1]\");\r\n    }\r\n\r\n    @Test\r\n    public void testBitSetDeserialization() {\r\n        BitSet expected = new BitSet();\r\n        expected.set(0);\r\n        expected.set(2, 6);\r\n        expected.set(8);\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(expected);\r\n        assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n        json = \"[1,0,1,1,1,1,0,0,1,0,0,0]\";\r\n        assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n        json = \"[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\"]\";\r\n        assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n        json = \"[true,false,true,true,true,true,false,false,true,false,false]\";\r\n        assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n        var exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, []]\", BitSet.class));\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Invalid bitset value type: BEGIN_ARRAY; at path $[1]\");\r\n        exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, 2]\", BitSet.class));\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Invalid bitset value 2, expected 0 or 1; at path $[1]\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultDateSerialization() {\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        assertThat(json).matches(\"\\\"Sep 11, 2011,? 10:55:03\\\\hPM\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultDateDeserialization() {\r\n        String json = \"'Dec 13, 2009 07:18:02 AM'\";\r\n        Date extracted = gson.fromJson(json, Date.class);\r\n        assertEqualsDate(extracted, 2009, 11, 13);\r\n        assertEqualsTime(extracted, 7, 18, 2);\r\n    }\r\n\r\n    // Date can not directly be compared with another instance since the deserialization loses the\r\n    // millisecond portion.\r\n    @SuppressWarnings(\"deprecation\")\r\n    public static void assertEqualsDate(Date date, int year, int month, int day) {\r\n        assertThat(date.getYear()).isEqualTo(year - 1900);\r\n        assertThat(date.getMonth()).isEqualTo(month);\r\n        assertThat(date.getDate()).isEqualTo(day);\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    public static void assertEqualsTime(Date date, int hours, int minutes, int seconds) {\r\n        assertThat(date.getHours()).isEqualTo(hours);\r\n        assertThat(date.getMinutes()).isEqualTo(minutes);\r\n        assertThat(date.getSeconds()).isEqualTo(seconds);\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultDateSerializationUsingBuilder() {\r\n        Gson gson = new GsonBuilder().create();\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        assertThat(json).matches(\"\\\"Sep 11, 2011,? 10:55:03\\\\hPM\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultDateDeserializationUsingBuilder() {\r\n        Gson gson = new GsonBuilder().create();\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        Date extracted = gson.fromJson(json, Date.class);\r\n        assertThat(extracted.toString()).isEqualTo(now.toString());\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultCalendarSerialization() {\r\n        Gson gson = new GsonBuilder().create();\r\n        String json = gson.toJson(Calendar.getInstance());\r\n        assertThat(json).contains(\"year\");\r\n        assertThat(json).contains(\"month\");\r\n        assertThat(json).contains(\"dayOfMonth\");\r\n        assertThat(json).contains(\"hourOfDay\");\r\n        assertThat(json).contains(\"minute\");\r\n        assertThat(json).contains(\"second\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultCalendarDeserialization() {\r\n        Gson gson = new GsonBuilder().create();\r\n        String json = \"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}\";\r\n        Calendar cal = gson.fromJson(json, Calendar.class);\r\n        assertThat(cal.get(Calendar.YEAR)).isEqualTo(2009);\r\n        assertThat(cal.get(Calendar.MONTH)).isEqualTo(2);\r\n        assertThat(cal.get(Calendar.DAY_OF_MONTH)).isEqualTo(11);\r\n        assertThat(cal.get(Calendar.HOUR_OF_DAY)).isEqualTo(14);\r\n        assertThat(cal.get(Calendar.MINUTE)).isEqualTo(29);\r\n        assertThat(cal.get(Calendar.SECOND)).isEqualTo(23);\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultGregorianCalendarSerialization() {\r\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"), Locale.US);\r\n        // Calendar was created with current time, must clear it\r\n        cal.clear();\r\n        cal.set(2018, Calendar.JUNE, 25, 10, 20, 30);\r\n        Gson gson = new GsonBuilder().create();\r\n        String json = gson.toJson(cal);\r\n        assertThat(json).isEqualTo(\"{\\\"year\\\":2018,\\\"month\\\":5,\\\"dayOfMonth\\\":25,\\\"hourOfDay\\\":10,\\\"minute\\\":20,\\\"second\\\":30}\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultGregorianCalendarDeserialization() {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        Locale defaultLocale = Locale.getDefault();\r\n        try {\r\n            // Calendar deserialization uses default TimeZone and Locale; set them here to make the test\r\n            // deterministic\r\n            TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n            Locale.setDefault(Locale.US);\r\n            Gson gson = new GsonBuilder().create();\r\n            String json = \"{\\\"year\\\":2009,\\\"month\\\":2,\\\"dayOfMonth\\\":11,\\\"hourOfDay\\\":14,\\\"minute\\\":29,\\\"second\\\":23}\";\r\n            GregorianCalendar cal = gson.fromJson(json, GregorianCalendar.class);\r\n            assertThat(cal.get(Calendar.YEAR)).isEqualTo(2009);\r\n            assertThat(cal.get(Calendar.MONTH)).isEqualTo(2);\r\n            assertThat(cal.get(Calendar.DAY_OF_MONTH)).isEqualTo(11);\r\n            assertThat(cal.get(Calendar.HOUR_OF_DAY)).isEqualTo(14);\r\n            assertThat(cal.get(Calendar.MINUTE)).isEqualTo(29);\r\n            assertThat(cal.get(Calendar.SECOND)).isEqualTo(23);\r\n            assertThat(cal.getTimeInMillis()).isEqualTo(1236781763000L);\r\n            // Serializing value again should be equivalent to original JSON\r\n            assertThat(gson.toJson(cal)).isEqualTo(json);\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses {@link GsonBuilder#setDateFormat(int, int)}\r\n     */\r\n    @Test\r\n    public void testDateSerializationWithStyle() {\r\n        Date date = new Date(0);\r\n        int[] styles = { DateFormat.FULL, DateFormat.LONG, DateFormat.MEDIUM, DateFormat.SHORT };\r\n        for (int dateStyle : styles) {\r\n            for (int timeStyle : styles) {\r\n                String expectedFormatted = DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US).format(date);\r\n                Gson gson = new GsonBuilder().setDateFormat(dateStyle, timeStyle).create();\r\n                String json = gson.toJson(date);\r\n                assertWithMessage(\"dateStyle=\" + dateStyle + \", timeStyle=\" + timeStyle).that(json).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n                assertWithMessage(\"dateStyle=\" + dateStyle + \", timeStyle=\" + timeStyle).that(gson.fromJson(json, Date.class).getTime()).isEqualTo(date.getTime());\r\n            }\r\n        }\r\n        // `new Gson()` should use dateStyle=DEFAULT, timeStyle=DEFAULT\r\n        String expectedFormatted = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US).format(date);\r\n        assertThat(new Gson().toJson(date)).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n    }\r\n\r\n    /**\r\n     * Uses {@link GsonBuilder#setDateFormat(int)}\r\n     */\r\n    // for GsonBuilder.setDateFormat(int)\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testDateSerializationWithDateStyle() {\r\n        Date date = new Date(0);\r\n        int[] styles = { DateFormat.FULL, DateFormat.LONG, DateFormat.MEDIUM, DateFormat.SHORT };\r\n        for (int dateStyle : styles) {\r\n            String expectedFormatted = DateFormat.getDateTimeInstance(dateStyle, DateFormat.DEFAULT, Locale.US).format(date);\r\n            Gson gson = new GsonBuilder().setDateFormat(dateStyle).create();\r\n            String json = gson.toJson(date);\r\n            assertWithMessage(\"dateStyle=\" + dateStyle).that(json).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n            assertWithMessage(\"dateStyle=\" + dateStyle).that(gson.fromJson(json, Date.class).getTime()).isEqualTo(date.getTime());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Using {@link GsonBuilder#setDateFormat(int, int)} should overwrite previous patterns set with\r\n     * {@link GsonBuilder#setDateFormat(String)}\r\n     */\r\n    @Test\r\n    public void testDateStyleOverwritesPattern() {\r\n        String pattern = \"yyyy-MM-dd\";\r\n        Date date = new Date(0);\r\n        GsonBuilder gsonBuilder = new GsonBuilder().setDateFormat(pattern);\r\n        String patternJson = gsonBuilder.create().toJson(date);\r\n        int style = DateFormat.SHORT;\r\n        String styleJson = gsonBuilder.setDateFormat(style, style).create().toJson(date);\r\n        String expectedFormatted = DateFormat.getDateTimeInstance(style, style, Locale.US).format(date);\r\n        assertThat(styleJson).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n        // Should not be equal to pattern JSON output\r\n        assertThat(styleJson).isNotEqualTo(patternJson);\r\n    }\r\n\r\n    // for GsonBuilder.setDateFormat(int)\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testDateSerializationWithPattern() {\r\n        String pattern = \"yyyy-MM-dd\";\r\n        // This also verifies that a custom pattern overwrites a custom style\r\n        Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        assertThat(json).isEqualTo(\"\\\"2011-09-11\\\"\");\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testDateDeserializationWithPattern() {\r\n        String pattern = \"yyyy-MM-dd\";\r\n        // This also verifies that a custom pattern overwrites a custom style\r\n        Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        Date extracted = gson.fromJson(json, Date.class);\r\n        assertThat(extracted.getYear()).isEqualTo(now.getYear());\r\n        assertThat(extracted.getMonth()).isEqualTo(now.getMonth());\r\n        assertThat(extracted.getDay()).isEqualTo(now.getDay());\r\n    }\r\n\r\n    @Test\r\n    public void testDateSerializationWithPatternNotOverridenByTypeAdapter() {\r\n        String pattern = \"yyyy-MM-dd\";\r\n        Gson gson = new GsonBuilder().setDateFormat(pattern).registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> new Date(1315806903103L)).create();\r\n        Date now = new Date(1315806903103L);\r\n        String json = gson.toJson(now);\r\n        assertThat(json).isEqualTo(\"\\\"2011-09-11\\\"\");\r\n    }\r\n\r\n    // http://code.google.com/p/google-gson/issues/detail?id=230\r\n    @Test\r\n    public void testDateSerializationInCollection() {\r\n        Type listOfDates = new TypeToken<List<Date>>() {\r\n        }.getType();\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        try {\r\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n            List<Date> dates = Arrays.asList(new Date(0));\r\n            String json = gson.toJson(dates, listOfDates);\r\n            assertThat(json).isEqualTo(\"[\\\"1970-01-01\\\"]\");\r\n            assertThat(gson.<List<Date>>fromJson(\"[\\\"1970-01-01\\\"]\", listOfDates).get(0).getTime()).isEqualTo(0L);\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testJsonPrimitiveSerialization() {\r\n        assertThat(gson.toJson(new JsonPrimitive(5), JsonElement.class)).isEqualTo(\"5\");\r\n        assertThat(gson.toJson(new JsonPrimitive(true), JsonElement.class)).isEqualTo(\"true\");\r\n        assertThat(gson.toJson(new JsonPrimitive(\"foo\"), JsonElement.class)).isEqualTo(\"\\\"foo\\\"\");\r\n        assertThat(gson.toJson(new JsonPrimitive('a'), JsonElement.class)).isEqualTo(\"\\\"a\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonPrimitiveDeserialization() {\r\n        assertThat(gson.fromJson(\"5\", JsonElement.class)).isEqualTo(new JsonPrimitive(5));\r\n        assertThat(gson.fromJson(\"5\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(5));\r\n        assertThat(gson.fromJson(\"true\", JsonElement.class)).isEqualTo(new JsonPrimitive(true));\r\n        assertThat(gson.fromJson(\"true\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(true));\r\n        assertThat(gson.fromJson(\"\\\"foo\\\"\", JsonElement.class)).isEqualTo(new JsonPrimitive(\"foo\"));\r\n        assertThat(gson.fromJson(\"\\\"foo\\\"\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(\"foo\"));\r\n        assertThat(gson.fromJson(\"\\\"a\\\"\", JsonElement.class)).isEqualTo(new JsonPrimitive('a'));\r\n        assertThat(gson.fromJson(\"\\\"a\\\"\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive('a'));\r\n    }\r\n\r\n    @Test\r\n    public void testJsonNullSerialization() {\r\n        assertThat(gson.toJson(JsonNull.INSTANCE, JsonElement.class)).isEqualTo(\"null\");\r\n        assertThat(gson.toJson(JsonNull.INSTANCE, JsonNull.class)).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullJsonElementSerialization() {\r\n        assertThat(gson.toJson(null, JsonElement.class)).isEqualTo(\"null\");\r\n        assertThat(gson.toJson(null, JsonNull.class)).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonArraySerialization() {\r\n        JsonArray array = new JsonArray();\r\n        array.add(new JsonPrimitive(1));\r\n        array.add(new JsonPrimitive(2));\r\n        array.add(new JsonPrimitive(3));\r\n        assertThat(gson.toJson(array, JsonElement.class)).isEqualTo(\"[1,2,3]\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonArrayDeserialization() {\r\n        JsonArray array = new JsonArray();\r\n        array.add(new JsonPrimitive(1));\r\n        array.add(new JsonPrimitive(2));\r\n        array.add(new JsonPrimitive(3));\r\n        String json = \"[1,2,3]\";\r\n        assertThat(gson.fromJson(json, JsonElement.class)).isEqualTo(array);\r\n        assertThat(gson.fromJson(json, JsonArray.class)).isEqualTo(array);\r\n    }\r\n\r\n    @Test\r\n    public void testJsonObjectSerialization() {\r\n        JsonObject object = new JsonObject();\r\n        object.add(\"foo\", new JsonPrimitive(1));\r\n        object.add(\"bar\", new JsonPrimitive(2));\r\n        assertThat(gson.toJson(object, JsonElement.class)).isEqualTo(\"{\\\"foo\\\":1,\\\"bar\\\":2}\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonObjectDeserialization() {\r\n        JsonObject object = new JsonObject();\r\n        object.add(\"foo\", new JsonPrimitive(1));\r\n        object.add(\"bar\", new JsonPrimitive(2));\r\n        String json = \"{\\\"foo\\\":1,\\\"bar\\\":2}\";\r\n        JsonElement actual = gson.fromJson(json, JsonElement.class);\r\n        assertThat(actual).isEqualTo(object);\r\n        JsonObject actualObj = gson.fromJson(json, JsonObject.class);\r\n        assertThat(actualObj).isEqualTo(object);\r\n    }\r\n\r\n    @Test\r\n    public void testJsonNullDeserialization() {\r\n        assertThat(gson.fromJson(\"null\", JsonElement.class)).isEqualTo(JsonNull.INSTANCE);\r\n        assertThat(gson.fromJson(\"null\", JsonNull.class)).isEqualTo(JsonNull.INSTANCE);\r\n    }\r\n\r\n    @Test\r\n    public void testJsonElementTypeMismatch() {\r\n        var exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"\\\"abc\\\"\", JsonObject.class));\r\n        assertThat(exception).hasMessageThat().isEqualTo(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive;\" + \" at path $\");\r\n    }\r\n\r\n    private static class ClassWithBigDecimal {\r\n\r\n        BigDecimal value;\r\n\r\n        ClassWithBigDecimal(String value) {\r\n            this.value = new BigDecimal(value);\r\n        }\r\n\r\n        String getExpectedJson() {\r\n            return \"{\\\"value\\\":\" + value.toEngineeringString() + \"}\";\r\n        }\r\n    }\r\n\r\n    private static class ClassWithBigInteger {\r\n\r\n        BigInteger value;\r\n\r\n        ClassWithBigInteger(String value) {\r\n            this.value = new BigInteger(value);\r\n        }\r\n\r\n        String getExpectedJson() {\r\n            return \"{\\\"value\\\":\" + value + \"}\";\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testPropertiesSerialization() {\r\n        Properties props = new Properties();\r\n        props.setProperty(\"foo\", \"bar\");\r\n        String json = gson.toJson(props);\r\n        String expected = \"{\\\"foo\\\":\\\"bar\\\"}\";\r\n        assertThat(json).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testPropertiesDeserialization() {\r\n        String json = \"{foo:'bar'}\";\r\n        Properties props = gson.fromJson(json, Properties.class);\r\n        assertThat(props.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n    }\r\n\r\n    @Test\r\n    public void testTreeSetSerialization() {\r\n        TreeSet<String> treeSet = new TreeSet<>();\r\n        treeSet.add(\"Value1\");\r\n        String json = gson.toJson(treeSet);\r\n        assertThat(json).isEqualTo(\"[\\\"Value1\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testTreeSetDeserialization() {\r\n        String json = \"['Value1']\";\r\n        Type type = new TypeToken<TreeSet<String>>() {\r\n        }.getType();\r\n        TreeSet<String> treeSet = gson.fromJson(json, type);\r\n        assertThat(treeSet).contains(\"Value1\");\r\n    }\r\n\r\n    // TODO: b/287969247 - remove when EP bug fixed\r\n    @SuppressWarnings(\"UnnecessaryStringBuilder\")\r\n    @Test\r\n    public void testStringBuilderSerialization() {\r\n        StringBuilder sb = new StringBuilder(\"abc\");\r\n        String json = gson.toJson(sb);\r\n        assertThat(json).isEqualTo(\"\\\"abc\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringBuilderDeserialization() {\r\n        StringBuilder sb = gson.fromJson(\"'abc'\", StringBuilder.class);\r\n        assertThat(sb.toString()).isEqualTo(\"abc\");\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"JdkObsolete\")\r\n    public void testStringBufferSerialization() {\r\n        StringBuffer sb = new StringBuffer(\"abc\");\r\n        String json = gson.toJson(sb);\r\n        assertThat(json).isEqualTo(\"\\\"abc\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringBufferDeserialization() {\r\n        StringBuffer sb = gson.fromJson(\"'abc'\", StringBuffer.class);\r\n        assertThat(sb.toString()).isEqualTo(\"abc\");\r\n    }\r\n\r\n    private static class MyClassTypeAdapter extends TypeAdapter<Class<?>> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Class<?> value) throws IOException {\r\n            out.value(value.getName());\r\n        }\r\n\r\n        @Override\r\n        public Class<?> read(JsonReader in) throws IOException {\r\n            String className = in.nextString();\r\n            try {\r\n                return Class.forName(className);\r\n            } catch (ClassNotFoundException e) {\r\n                throw new IOException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    static class NumberAsStringAdapter extends TypeAdapter<Number> {\r\n\r\n        private final Constructor<? extends Number> constructor;\r\n\r\n        NumberAsStringAdapter(Class<? extends Number> type) throws Exception {\r\n            this.constructor = type.getConstructor(String.class);\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Number value) throws IOException {\r\n            out.value(value.toString());\r\n        }\r\n\r\n        @Override\r\n        public Number read(JsonReader in) throws IOException {\r\n            try {\r\n                return constructor.newInstance(in.nextString());\r\n            } catch (Exception e) {\r\n                throw new AssertionError(e);\r\n            }\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 72,
    "end_line": 72,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "field",
    "name": "oldTimeZone",
    "start_line": 73,
    "end_line": 73,
    "code": "private TimeZone oldTimeZone;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "field",
    "name": "oldLocale",
    "start_line": 74,
    "end_line": 74,
    "code": "private Locale oldLocale;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 76,
    "end_line": 83,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    this.oldTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n    this.oldLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "tearDown",
    "start_line": 85,
    "end_line": 89,
    "code": "@After\r\npublic void tearDown() {\r\n    TimeZone.setDefault(oldTimeZone);\r\n    Locale.setDefault(oldLocale);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testClassSerialization",
    "start_line": 91,
    "end_line": 105,
    "code": "@Test\r\npublic void testClassSerialization() {\r\n    var exception = assertThrows(UnsupportedOperationException.class, () -> gson.toJson(String.class));\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type\" + \" adapter?\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#java-lang-class-unsupported\");\r\n    // Override with a custom type adapter for class.\r\n    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\r\n    assertThat(gson.toJson(String.class)).isEqualTo(\"\\\"java.lang.String\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testClassDeserialization",
    "start_line": 107,
    "end_line": 121,
    "code": "@Test\r\npublic void testClassDeserialization() {\r\n    var exception = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"String.class\", Class.class));\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#java-lang-class-unsupported\");\r\n    // Override with a custom type adapter for class.\r\n    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\r\n    assertThat(gson.fromJson(\"java.lang.String\", Class.class)).isAssignableTo(String.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUrlSerialization",
    "start_line": 123,
    "end_line": 128,
    "code": "@Test\r\npublic void testUrlSerialization() throws Exception {\r\n    String urlValue = \"http://google.com/\";\r\n    URL url = new URL(urlValue);\r\n    assertThat(gson.toJson(url)).isEqualTo(\"\\\"http://google.com/\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUrlDeserialization",
    "start_line": 130,
    "end_line": 139,
    "code": "@Test\r\npublic void testUrlDeserialization() {\r\n    String urlValue = \"http://google.com/\";\r\n    String json = \"'http:\\\\/\\\\/google.com\\\\/'\";\r\n    URL target1 = gson.fromJson(json, URL.class);\r\n    assertThat(target1.toExternalForm()).isEqualTo(urlValue);\r\n    URL target2 = gson.fromJson('\"' + urlValue + '\"', URL.class);\r\n    assertThat(target2.toExternalForm()).isEqualTo(urlValue);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUrlNullSerialization",
    "start_line": 141,
    "end_line": 145,
    "code": "@Test\r\npublic void testUrlNullSerialization() {\r\n    ClassWithUrlField target = new ClassWithUrlField();\r\n    assertThat(gson.toJson(target)).isEqualTo(\"{}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUrlNullDeserialization",
    "start_line": 147,
    "end_line": 152,
    "code": "@Test\r\npublic void testUrlNullDeserialization() {\r\n    String json = \"{}\";\r\n    ClassWithUrlField target = gson.fromJson(json, ClassWithUrlField.class);\r\n    assertThat(target.url).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUriSerialization",
    "start_line": 158,
    "end_line": 163,
    "code": "@Test\r\npublic void testUriSerialization() throws Exception {\r\n    String uriValue = \"http://google.com/\";\r\n    URI uri = new URI(uriValue);\r\n    assertThat(gson.toJson(uri)).isEqualTo(\"\\\"http://google.com/\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUriDeserialization",
    "start_line": 165,
    "end_line": 171,
    "code": "@Test\r\npublic void testUriDeserialization() {\r\n    String uriValue = \"http://google.com/\";\r\n    String json = '\"' + uriValue + '\"';\r\n    URI target = gson.fromJson(json, URI.class);\r\n    assertThat(target.toASCIIString()).isEqualTo(uriValue);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testNullSerialization",
    "start_line": 173,
    "end_line": 203,
    "code": "@Test\r\npublic void testNullSerialization() {\r\n    testNullSerializationAndDeserialization(Boolean.class);\r\n    testNullSerializationAndDeserialization(Byte.class);\r\n    testNullSerializationAndDeserialization(Short.class);\r\n    testNullSerializationAndDeserialization(Integer.class);\r\n    testNullSerializationAndDeserialization(Long.class);\r\n    testNullSerializationAndDeserialization(Double.class);\r\n    testNullSerializationAndDeserialization(Float.class);\r\n    testNullSerializationAndDeserialization(Number.class);\r\n    testNullSerializationAndDeserialization(Character.class);\r\n    testNullSerializationAndDeserialization(String.class);\r\n    testNullSerializationAndDeserialization(StringBuilder.class);\r\n    testNullSerializationAndDeserialization(StringBuffer.class);\r\n    testNullSerializationAndDeserialization(BigDecimal.class);\r\n    testNullSerializationAndDeserialization(BigInteger.class);\r\n    testNullSerializationAndDeserialization(TreeSet.class);\r\n    testNullSerializationAndDeserialization(ArrayList.class);\r\n    testNullSerializationAndDeserialization(HashSet.class);\r\n    testNullSerializationAndDeserialization(Properties.class);\r\n    testNullSerializationAndDeserialization(URL.class);\r\n    testNullSerializationAndDeserialization(URI.class);\r\n    testNullSerializationAndDeserialization(UUID.class);\r\n    testNullSerializationAndDeserialization(Locale.class);\r\n    testNullSerializationAndDeserialization(InetAddress.class);\r\n    testNullSerializationAndDeserialization(BitSet.class);\r\n    testNullSerializationAndDeserialization(Date.class);\r\n    testNullSerializationAndDeserialization(GregorianCalendar.class);\r\n    testNullSerializationAndDeserialization(Calendar.class);\r\n    testNullSerializationAndDeserialization(Class.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testNullSerializationAndDeserialization",
    "start_line": 205,
    "end_line": 207,
    "code": "private void testNullSerializationAndDeserialization(Class<?> c) {\r\n    testNullSerializationAndDeserialization(gson, c);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testNullSerializationAndDeserialization",
    "start_line": 209,
    "end_line": 212,
    "code": "public static void testNullSerializationAndDeserialization(Gson gson, Class<?> c) {\r\n    assertThat(gson.toJson(null, c)).isEqualTo(\"null\");\r\n    assertThat(gson.fromJson(\"null\", c)).isEqualTo(null);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUuidSerialization",
    "start_line": 214,
    "end_line": 219,
    "code": "@Test\r\npublic void testUuidSerialization() {\r\n    String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\r\n    UUID uuid = UUID.fromString(uuidValue);\r\n    assertThat(gson.toJson(uuid)).isEqualTo('\"' + uuidValue + '\"');\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testUuidDeserialization",
    "start_line": 221,
    "end_line": 227,
    "code": "@Test\r\npublic void testUuidDeserialization() {\r\n    String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\r\n    String json = '\"' + uuidValue + '\"';\r\n    UUID target = gson.fromJson(json, UUID.class);\r\n    assertThat(target.toString()).isEqualTo(uuidValue);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleSerializationWithLanguage",
    "start_line": 229,
    "end_line": 233,
    "code": "@Test\r\npublic void testLocaleSerializationWithLanguage() {\r\n    Locale target = new Locale(\"en\");\r\n    assertThat(gson.toJson(target)).isEqualTo(\"\\\"en\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleDeserializationWithLanguage",
    "start_line": 235,
    "end_line": 240,
    "code": "@Test\r\npublic void testLocaleDeserializationWithLanguage() {\r\n    String json = \"\\\"en\\\"\";\r\n    Locale locale = gson.fromJson(json, Locale.class);\r\n    assertThat(locale.getLanguage()).isEqualTo(\"en\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleSerializationWithLanguageCountry",
    "start_line": 242,
    "end_line": 246,
    "code": "@Test\r\npublic void testLocaleSerializationWithLanguageCountry() {\r\n    Locale target = Locale.CANADA_FRENCH;\r\n    assertThat(gson.toJson(target)).isEqualTo(\"\\\"fr_CA\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleDeserializationWithLanguageCountry",
    "start_line": 248,
    "end_line": 253,
    "code": "@Test\r\npublic void testLocaleDeserializationWithLanguageCountry() {\r\n    String json = \"\\\"fr_CA\\\"\";\r\n    Locale locale = gson.fromJson(json, Locale.class);\r\n    assertThat(locale).isEqualTo(Locale.CANADA_FRENCH);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleSerializationWithLanguageCountryVariant",
    "start_line": 255,
    "end_line": 260,
    "code": "@Test\r\npublic void testLocaleSerializationWithLanguageCountryVariant() {\r\n    Locale target = new Locale(\"de\", \"DE\", \"EURO\");\r\n    String json = gson.toJson(target);\r\n    assertThat(json).isEqualTo(\"\\\"de_DE_EURO\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testLocaleDeserializationWithLanguageCountryVariant",
    "start_line": 262,
    "end_line": 269,
    "code": "@Test\r\npublic void testLocaleDeserializationWithLanguageCountryVariant() {\r\n    String json = \"\\\"de_DE_EURO\\\"\";\r\n    Locale locale = gson.fromJson(json, Locale.class);\r\n    assertThat(locale.getLanguage()).isEqualTo(\"de\");\r\n    assertThat(locale.getCountry()).isEqualTo(\"DE\");\r\n    assertThat(locale.getVariant()).isEqualTo(\"EURO\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalFieldSerialization",
    "start_line": 271,
    "end_line": 277,
    "code": "@Test\r\npublic void testBigDecimalFieldSerialization() {\r\n    ClassWithBigDecimal target = new ClassWithBigDecimal(\"-122.01e-21\");\r\n    String json = gson.toJson(target);\r\n    String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}'));\r\n    assertThat(new BigDecimal(actual)).isEqualTo(target.value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalFieldDeserialization",
    "start_line": 279,
    "end_line": 285,
    "code": "@Test\r\npublic void testBigDecimalFieldDeserialization() {\r\n    ClassWithBigDecimal expected = new ClassWithBigDecimal(\"-122.01e-21\");\r\n    String json = expected.getExpectedJson();\r\n    ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class);\r\n    assertThat(actual.value).isEqualTo(expected.value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBadValueForBigDecimalDeserialization",
    "start_line": 287,
    "end_line": 293,
    "code": "@Test\r\npublic void testBadValueForBigDecimalDeserialization() {\r\n    // Exponent of a BigDecimal must be an integer value\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(\"{\\\"value\\\": 1.5e-1.0031}\", ClassWithBigDecimal.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBigIntegerFieldSerialization",
    "start_line": 295,
    "end_line": 300,
    "code": "@Test\r\npublic void testBigIntegerFieldSerialization() {\r\n    ClassWithBigInteger target = new ClassWithBigInteger(\"23232323215323234234324324324324324324\");\r\n    String json = gson.toJson(target);\r\n    assertThat(json).isEqualTo(target.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBigIntegerFieldDeserialization",
    "start_line": 302,
    "end_line": 308,
    "code": "@Test\r\npublic void testBigIntegerFieldDeserialization() {\r\n    ClassWithBigInteger expected = new ClassWithBigInteger(\"879697697697697697697697697697697697\");\r\n    String json = expected.getExpectedJson();\r\n    ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);\r\n    assertThat(actual.value).isEqualTo(expected.value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testOverrideBigIntegerTypeAdapter",
    "start_line": 310,
    "end_line": 318,
    "code": "@Test\r\npublic void testOverrideBigIntegerTypeAdapter() throws Exception {\r\n    gson = new GsonBuilder().registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class)).create();\r\n    assertThat(gson.toJson(new BigInteger(\"123\"), BigInteger.class)).isEqualTo(\"\\\"123\\\"\");\r\n    assertThat(gson.fromJson(\"\\\"123\\\"\", BigInteger.class)).isEqualTo(new BigInteger(\"123\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testOverrideBigDecimalTypeAdapter",
    "start_line": 320,
    "end_line": 328,
    "code": "@Test\r\npublic void testOverrideBigDecimalTypeAdapter() throws Exception {\r\n    gson = new GsonBuilder().registerTypeAdapter(BigDecimal.class, new NumberAsStringAdapter(BigDecimal.class)).create();\r\n    assertThat(gson.toJson(new BigDecimal(\"1.1\"), BigDecimal.class)).isEqualTo(\"\\\"1.1\\\"\");\r\n    assertThat(gson.fromJson(\"\\\"1.1\\\"\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.1\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testSetSerialization",
    "start_line": 330,
    "end_line": 340,
    "code": "@Test\r\npublic void testSetSerialization() {\r\n    Gson gson = new Gson();\r\n    HashSet<String> s = new HashSet<>();\r\n    s.add(\"blah\");\r\n    String json = gson.toJson(s);\r\n    assertThat(json).isEqualTo(\"[\\\"blah\\\"]\");\r\n    json = gson.toJson(s, Set.class);\r\n    assertThat(json).isEqualTo(\"[\\\"blah\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBitSetSerialization",
    "start_line": 342,
    "end_line": 351,
    "code": "@Test\r\npublic void testBitSetSerialization() {\r\n    Gson gson = new Gson();\r\n    BitSet bits = new BitSet();\r\n    bits.set(1);\r\n    bits.set(3, 6);\r\n    bits.set(9);\r\n    String json = gson.toJson(bits);\r\n    assertThat(json).isEqualTo(\"[0,1,0,1,1,1,0,0,0,1]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testBitSetDeserialization",
    "start_line": 353,
    "end_line": 384,
    "code": "@Test\r\npublic void testBitSetDeserialization() {\r\n    BitSet expected = new BitSet();\r\n    expected.set(0);\r\n    expected.set(2, 6);\r\n    expected.set(8);\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(expected);\r\n    assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n    json = \"[1,0,1,1,1,1,0,0,1,0,0,0]\";\r\n    assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n    json = \"[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\"]\";\r\n    assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n    json = \"[true,false,true,true,true,true,false,false,true,false,false]\";\r\n    assertThat(gson.fromJson(json, BitSet.class)).isEqualTo(expected);\r\n    var exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, []]\", BitSet.class));\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Invalid bitset value type: BEGIN_ARRAY; at path $[1]\");\r\n    exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[1, 2]\", BitSet.class));\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Invalid bitset value 2, expected 0 or 1; at path $[1]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultDateSerialization",
    "start_line": 386,
    "end_line": 391,
    "code": "@Test\r\npublic void testDefaultDateSerialization() {\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    assertThat(json).matches(\"\\\"Sep 11, 2011,? 10:55:03\\\\hPM\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultDateDeserialization",
    "start_line": 393,
    "end_line": 399,
    "code": "@Test\r\npublic void testDefaultDateDeserialization() {\r\n    String json = \"'Dec 13, 2009 07:18:02 AM'\";\r\n    Date extracted = gson.fromJson(json, Date.class);\r\n    assertEqualsDate(extracted, 2009, 11, 13);\r\n    assertEqualsTime(extracted, 7, 18, 2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "assertEqualsDate",
    "start_line": 403,
    "end_line": 408,
    "code": "// Date can not directly be compared with another instance since the deserialization loses the\r\n// millisecond portion.\r\n@SuppressWarnings(\"deprecation\")\r\npublic static void assertEqualsDate(Date date, int year, int month, int day) {\r\n    assertThat(date.getYear()).isEqualTo(year - 1900);\r\n    assertThat(date.getMonth()).isEqualTo(month);\r\n    assertThat(date.getDate()).isEqualTo(day);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "assertEqualsTime",
    "start_line": 410,
    "end_line": 415,
    "code": "@SuppressWarnings(\"deprecation\")\r\npublic static void assertEqualsTime(Date date, int hours, int minutes, int seconds) {\r\n    assertThat(date.getHours()).isEqualTo(hours);\r\n    assertThat(date.getMinutes()).isEqualTo(minutes);\r\n    assertThat(date.getSeconds()).isEqualTo(seconds);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultDateSerializationUsingBuilder",
    "start_line": 417,
    "end_line": 423,
    "code": "@Test\r\npublic void testDefaultDateSerializationUsingBuilder() {\r\n    Gson gson = new GsonBuilder().create();\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    assertThat(json).matches(\"\\\"Sep 11, 2011,? 10:55:03\\\\hPM\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultDateDeserializationUsingBuilder",
    "start_line": 425,
    "end_line": 432,
    "code": "@Test\r\npublic void testDefaultDateDeserializationUsingBuilder() {\r\n    Gson gson = new GsonBuilder().create();\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    Date extracted = gson.fromJson(json, Date.class);\r\n    assertThat(extracted.toString()).isEqualTo(now.toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultCalendarSerialization",
    "start_line": 434,
    "end_line": 444,
    "code": "@Test\r\npublic void testDefaultCalendarSerialization() {\r\n    Gson gson = new GsonBuilder().create();\r\n    String json = gson.toJson(Calendar.getInstance());\r\n    assertThat(json).contains(\"year\");\r\n    assertThat(json).contains(\"month\");\r\n    assertThat(json).contains(\"dayOfMonth\");\r\n    assertThat(json).contains(\"hourOfDay\");\r\n    assertThat(json).contains(\"minute\");\r\n    assertThat(json).contains(\"second\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultCalendarDeserialization",
    "start_line": 446,
    "end_line": 457,
    "code": "@Test\r\npublic void testDefaultCalendarDeserialization() {\r\n    Gson gson = new GsonBuilder().create();\r\n    String json = \"{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}\";\r\n    Calendar cal = gson.fromJson(json, Calendar.class);\r\n    assertThat(cal.get(Calendar.YEAR)).isEqualTo(2009);\r\n    assertThat(cal.get(Calendar.MONTH)).isEqualTo(2);\r\n    assertThat(cal.get(Calendar.DAY_OF_MONTH)).isEqualTo(11);\r\n    assertThat(cal.get(Calendar.HOUR_OF_DAY)).isEqualTo(14);\r\n    assertThat(cal.get(Calendar.MINUTE)).isEqualTo(29);\r\n    assertThat(cal.get(Calendar.SECOND)).isEqualTo(23);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultGregorianCalendarSerialization",
    "start_line": 459,
    "end_line": 471,
    "code": "@Test\r\npublic void testDefaultGregorianCalendarSerialization() {\r\n    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"), Locale.US);\r\n    // Calendar was created with current time, must clear it\r\n    cal.clear();\r\n    cal.set(2018, Calendar.JUNE, 25, 10, 20, 30);\r\n    Gson gson = new GsonBuilder().create();\r\n    String json = gson.toJson(cal);\r\n    assertThat(json).isEqualTo(\"{\\\"year\\\":2018,\\\"month\\\":5,\\\"dayOfMonth\\\":25,\\\"hourOfDay\\\":10,\\\"minute\\\":20,\\\"second\\\":30}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultGregorianCalendarDeserialization",
    "start_line": 473,
    "end_line": 502,
    "code": "@Test\r\npublic void testDefaultGregorianCalendarDeserialization() {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    Locale defaultLocale = Locale.getDefault();\r\n    try {\r\n        // Calendar deserialization uses default TimeZone and Locale; set them here to make the test\r\n        // deterministic\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale.setDefault(Locale.US);\r\n        Gson gson = new GsonBuilder().create();\r\n        String json = \"{\\\"year\\\":2009,\\\"month\\\":2,\\\"dayOfMonth\\\":11,\\\"hourOfDay\\\":14,\\\"minute\\\":29,\\\"second\\\":23}\";\r\n        GregorianCalendar cal = gson.fromJson(json, GregorianCalendar.class);\r\n        assertThat(cal.get(Calendar.YEAR)).isEqualTo(2009);\r\n        assertThat(cal.get(Calendar.MONTH)).isEqualTo(2);\r\n        assertThat(cal.get(Calendar.DAY_OF_MONTH)).isEqualTo(11);\r\n        assertThat(cal.get(Calendar.HOUR_OF_DAY)).isEqualTo(14);\r\n        assertThat(cal.get(Calendar.MINUTE)).isEqualTo(29);\r\n        assertThat(cal.get(Calendar.SECOND)).isEqualTo(23);\r\n        assertThat(cal.getTimeInMillis()).isEqualTo(1236781763000L);\r\n        // Serializing value again should be equivalent to original JSON\r\n        assertThat(gson.toJson(cal)).isEqualTo(json);\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateSerializationWithStyle",
    "start_line": 505,
    "end_line": 532,
    "code": "/**\r\n * Uses {@link GsonBuilder#setDateFormat(int, int)}\r\n */\r\n@Test\r\npublic void testDateSerializationWithStyle() {\r\n    Date date = new Date(0);\r\n    int[] styles = { DateFormat.FULL, DateFormat.LONG, DateFormat.MEDIUM, DateFormat.SHORT };\r\n    for (int dateStyle : styles) {\r\n        for (int timeStyle : styles) {\r\n            String expectedFormatted = DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US).format(date);\r\n            Gson gson = new GsonBuilder().setDateFormat(dateStyle, timeStyle).create();\r\n            String json = gson.toJson(date);\r\n            assertWithMessage(\"dateStyle=\" + dateStyle + \", timeStyle=\" + timeStyle).that(json).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n            assertWithMessage(\"dateStyle=\" + dateStyle + \", timeStyle=\" + timeStyle).that(gson.fromJson(json, Date.class).getTime()).isEqualTo(date.getTime());\r\n        }\r\n    }\r\n    // `new Gson()` should use dateStyle=DEFAULT, timeStyle=DEFAULT\r\n    String expectedFormatted = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US).format(date);\r\n    assertThat(new Gson().toJson(date)).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateSerializationWithDateStyle",
    "start_line": 535,
    "end_line": 555,
    "code": "/**\r\n * Uses {@link GsonBuilder#setDateFormat(int)}\r\n */\r\n// for GsonBuilder.setDateFormat(int)\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testDateSerializationWithDateStyle() {\r\n    Date date = new Date(0);\r\n    int[] styles = { DateFormat.FULL, DateFormat.LONG, DateFormat.MEDIUM, DateFormat.SHORT };\r\n    for (int dateStyle : styles) {\r\n        String expectedFormatted = DateFormat.getDateTimeInstance(dateStyle, DateFormat.DEFAULT, Locale.US).format(date);\r\n        Gson gson = new GsonBuilder().setDateFormat(dateStyle).create();\r\n        String json = gson.toJson(date);\r\n        assertWithMessage(\"dateStyle=\" + dateStyle).that(json).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n        assertWithMessage(\"dateStyle=\" + dateStyle).that(gson.fromJson(json, Date.class).getTime()).isEqualTo(date.getTime());\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateStyleOverwritesPattern",
    "start_line": 561,
    "end_line": 575,
    "code": "/**\r\n * Using {@link GsonBuilder#setDateFormat(int, int)} should overwrite previous patterns set with\r\n * {@link GsonBuilder#setDateFormat(String)}\r\n */\r\n@Test\r\npublic void testDateStyleOverwritesPattern() {\r\n    String pattern = \"yyyy-MM-dd\";\r\n    Date date = new Date(0);\r\n    GsonBuilder gsonBuilder = new GsonBuilder().setDateFormat(pattern);\r\n    String patternJson = gsonBuilder.create().toJson(date);\r\n    int style = DateFormat.SHORT;\r\n    String styleJson = gsonBuilder.setDateFormat(style, style).create().toJson(date);\r\n    String expectedFormatted = DateFormat.getDateTimeInstance(style, style, Locale.US).format(date);\r\n    assertThat(styleJson).isEqualTo(\"\\\"\" + expectedFormatted + \"\\\"\");\r\n    // Should not be equal to pattern JSON output\r\n    assertThat(styleJson).isNotEqualTo(patternJson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateSerializationWithPattern",
    "start_line": 577,
    "end_line": 586,
    "code": "// for GsonBuilder.setDateFormat(int)\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testDateSerializationWithPattern() {\r\n    String pattern = \"yyyy-MM-dd\";\r\n    // This also verifies that a custom pattern overwrites a custom style\r\n    Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    assertThat(json).isEqualTo(\"\\\"2011-09-11\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateDeserializationWithPattern",
    "start_line": 588,
    "end_line": 600,
    "code": "@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testDateDeserializationWithPattern() {\r\n    String pattern = \"yyyy-MM-dd\";\r\n    // This also verifies that a custom pattern overwrites a custom style\r\n    Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    Date extracted = gson.fromJson(json, Date.class);\r\n    assertThat(extracted.getYear()).isEqualTo(now.getYear());\r\n    assertThat(extracted.getMonth()).isEqualTo(now.getMonth());\r\n    assertThat(extracted.getDay()).isEqualTo(now.getDay());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateSerializationWithPatternNotOverridenByTypeAdapter",
    "start_line": 602,
    "end_line": 616,
    "code": "@Test\r\npublic void testDateSerializationWithPatternNotOverridenByTypeAdapter() {\r\n    String pattern = \"yyyy-MM-dd\";\r\n    Gson gson = new GsonBuilder().setDateFormat(pattern).registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> new Date(1315806903103L)).create();\r\n    Date now = new Date(1315806903103L);\r\n    String json = gson.toJson(now);\r\n    assertThat(json).isEqualTo(\"\\\"2011-09-11\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testDateSerializationInCollection",
    "start_line": 619,
    "end_line": 637,
    "code": "// http://code.google.com/p/google-gson/issues/detail?id=230\r\n@Test\r\npublic void testDateSerializationInCollection() {\r\n    Type listOfDates = new TypeToken<List<Date>>() {\r\n    }.getType();\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    try {\r\n        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n        List<Date> dates = Arrays.asList(new Date(0));\r\n        String json = gson.toJson(dates, listOfDates);\r\n        assertThat(json).isEqualTo(\"[\\\"1970-01-01\\\"]\");\r\n        assertThat(gson.<List<Date>>fromJson(\"[\\\"1970-01-01\\\"]\", listOfDates).get(0).getTime()).isEqualTo(0L);\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonPrimitiveSerialization",
    "start_line": 639,
    "end_line": 645,
    "code": "@Test\r\npublic void testJsonPrimitiveSerialization() {\r\n    assertThat(gson.toJson(new JsonPrimitive(5), JsonElement.class)).isEqualTo(\"5\");\r\n    assertThat(gson.toJson(new JsonPrimitive(true), JsonElement.class)).isEqualTo(\"true\");\r\n    assertThat(gson.toJson(new JsonPrimitive(\"foo\"), JsonElement.class)).isEqualTo(\"\\\"foo\\\"\");\r\n    assertThat(gson.toJson(new JsonPrimitive('a'), JsonElement.class)).isEqualTo(\"\\\"a\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonPrimitiveDeserialization",
    "start_line": 647,
    "end_line": 657,
    "code": "@Test\r\npublic void testJsonPrimitiveDeserialization() {\r\n    assertThat(gson.fromJson(\"5\", JsonElement.class)).isEqualTo(new JsonPrimitive(5));\r\n    assertThat(gson.fromJson(\"5\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(5));\r\n    assertThat(gson.fromJson(\"true\", JsonElement.class)).isEqualTo(new JsonPrimitive(true));\r\n    assertThat(gson.fromJson(\"true\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(true));\r\n    assertThat(gson.fromJson(\"\\\"foo\\\"\", JsonElement.class)).isEqualTo(new JsonPrimitive(\"foo\"));\r\n    assertThat(gson.fromJson(\"\\\"foo\\\"\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive(\"foo\"));\r\n    assertThat(gson.fromJson(\"\\\"a\\\"\", JsonElement.class)).isEqualTo(new JsonPrimitive('a'));\r\n    assertThat(gson.fromJson(\"\\\"a\\\"\", JsonPrimitive.class)).isEqualTo(new JsonPrimitive('a'));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonNullSerialization",
    "start_line": 659,
    "end_line": 663,
    "code": "@Test\r\npublic void testJsonNullSerialization() {\r\n    assertThat(gson.toJson(JsonNull.INSTANCE, JsonElement.class)).isEqualTo(\"null\");\r\n    assertThat(gson.toJson(JsonNull.INSTANCE, JsonNull.class)).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testNullJsonElementSerialization",
    "start_line": 665,
    "end_line": 669,
    "code": "@Test\r\npublic void testNullJsonElementSerialization() {\r\n    assertThat(gson.toJson(null, JsonElement.class)).isEqualTo(\"null\");\r\n    assertThat(gson.toJson(null, JsonNull.class)).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonArraySerialization",
    "start_line": 671,
    "end_line": 678,
    "code": "@Test\r\npublic void testJsonArraySerialization() {\r\n    JsonArray array = new JsonArray();\r\n    array.add(new JsonPrimitive(1));\r\n    array.add(new JsonPrimitive(2));\r\n    array.add(new JsonPrimitive(3));\r\n    assertThat(gson.toJson(array, JsonElement.class)).isEqualTo(\"[1,2,3]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonArrayDeserialization",
    "start_line": 680,
    "end_line": 690,
    "code": "@Test\r\npublic void testJsonArrayDeserialization() {\r\n    JsonArray array = new JsonArray();\r\n    array.add(new JsonPrimitive(1));\r\n    array.add(new JsonPrimitive(2));\r\n    array.add(new JsonPrimitive(3));\r\n    String json = \"[1,2,3]\";\r\n    assertThat(gson.fromJson(json, JsonElement.class)).isEqualTo(array);\r\n    assertThat(gson.fromJson(json, JsonArray.class)).isEqualTo(array);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonObjectSerialization",
    "start_line": 692,
    "end_line": 698,
    "code": "@Test\r\npublic void testJsonObjectSerialization() {\r\n    JsonObject object = new JsonObject();\r\n    object.add(\"foo\", new JsonPrimitive(1));\r\n    object.add(\"bar\", new JsonPrimitive(2));\r\n    assertThat(gson.toJson(object, JsonElement.class)).isEqualTo(\"{\\\"foo\\\":1,\\\"bar\\\":2}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonObjectDeserialization",
    "start_line": 700,
    "end_line": 712,
    "code": "@Test\r\npublic void testJsonObjectDeserialization() {\r\n    JsonObject object = new JsonObject();\r\n    object.add(\"foo\", new JsonPrimitive(1));\r\n    object.add(\"bar\", new JsonPrimitive(2));\r\n    String json = \"{\\\"foo\\\":1,\\\"bar\\\":2}\";\r\n    JsonElement actual = gson.fromJson(json, JsonElement.class);\r\n    assertThat(actual).isEqualTo(object);\r\n    JsonObject actualObj = gson.fromJson(json, JsonObject.class);\r\n    assertThat(actualObj).isEqualTo(object);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonNullDeserialization",
    "start_line": 714,
    "end_line": 718,
    "code": "@Test\r\npublic void testJsonNullDeserialization() {\r\n    assertThat(gson.fromJson(\"null\", JsonElement.class)).isEqualTo(JsonNull.INSTANCE);\r\n    assertThat(gson.fromJson(\"null\", JsonNull.class)).isEqualTo(JsonNull.INSTANCE);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testJsonElementTypeMismatch",
    "start_line": 720,
    "end_line": 729,
    "code": "@Test\r\npublic void testJsonElementTypeMismatch() {\r\n    var exception = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"\\\"abc\\\"\", JsonObject.class));\r\n    assertThat(exception).hasMessageThat().isEqualTo(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive;\" + \" at path $\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testPropertiesSerialization",
    "start_line": 755,
    "end_line": 762,
    "code": "@Test\r\npublic void testPropertiesSerialization() {\r\n    Properties props = new Properties();\r\n    props.setProperty(\"foo\", \"bar\");\r\n    String json = gson.toJson(props);\r\n    String expected = \"{\\\"foo\\\":\\\"bar\\\"}\";\r\n    assertThat(json).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testPropertiesDeserialization",
    "start_line": 764,
    "end_line": 769,
    "code": "@Test\r\npublic void testPropertiesDeserialization() {\r\n    String json = \"{foo:'bar'}\";\r\n    Properties props = gson.fromJson(json, Properties.class);\r\n    assertThat(props.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testTreeSetSerialization",
    "start_line": 771,
    "end_line": 777,
    "code": "@Test\r\npublic void testTreeSetSerialization() {\r\n    TreeSet<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"Value1\");\r\n    String json = gson.toJson(treeSet);\r\n    assertThat(json).isEqualTo(\"[\\\"Value1\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testTreeSetDeserialization",
    "start_line": 779,
    "end_line": 785,
    "code": "@Test\r\npublic void testTreeSetDeserialization() {\r\n    String json = \"['Value1']\";\r\n    Type type = new TypeToken<TreeSet<String>>() {\r\n    }.getType();\r\n    TreeSet<String> treeSet = gson.fromJson(json, type);\r\n    assertThat(treeSet).contains(\"Value1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testStringBuilderSerialization",
    "start_line": 787,
    "end_line": 793,
    "code": "// TODO: b/287969247 - remove when EP bug fixed\r\n@SuppressWarnings(\"UnnecessaryStringBuilder\")\r\n@Test\r\npublic void testStringBuilderSerialization() {\r\n    StringBuilder sb = new StringBuilder(\"abc\");\r\n    String json = gson.toJson(sb);\r\n    assertThat(json).isEqualTo(\"\\\"abc\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testStringBuilderDeserialization",
    "start_line": 795,
    "end_line": 799,
    "code": "@Test\r\npublic void testStringBuilderDeserialization() {\r\n    StringBuilder sb = gson.fromJson(\"'abc'\", StringBuilder.class);\r\n    assertThat(sb.toString()).isEqualTo(\"abc\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testStringBufferSerialization",
    "start_line": 801,
    "end_line": 807,
    "code": "@Test\r\n@SuppressWarnings(\"JdkObsolete\")\r\npublic void testStringBufferSerialization() {\r\n    StringBuffer sb = new StringBuffer(\"abc\");\r\n    String json = gson.toJson(sb);\r\n    assertThat(json).isEqualTo(\"\\\"abc\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  },
  {
    "type": "method",
    "name": "testStringBufferDeserialization",
    "start_line": 809,
    "end_line": 813,
    "code": "@Test\r\npublic void testStringBufferDeserialization() {\r\n    StringBuffer sb = gson.fromJson(\"'abc'\", StringBuffer.class);\r\n    assertThat(sb.toString()).isEqualTo(\"abc\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\DefaultTypeAdaptersTest.java"
  }
]