[
  {
    "type": "package",
    "name": "com.google.gson.stream",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.stream;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assume.assumeTrue",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assume.assumeTrue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Strictness",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Strictness;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Streams",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.Streams;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.JsonTreeReader",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.internal.bind.JsonTreeReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 30,
    "end_line": 30,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.runner.RunWith",
    "start_line": 31,
    "end_line": 31,
    "code": "import org.junit.runner.RunWith;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.runners.Parameterized",
    "start_line": 32,
    "end_line": 32,
    "code": "import org.junit.runners.Parameterized;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "class",
    "name": "JsonReaderPathTest",
    "start_line": 34,
    "end_line": 426,
    "code": "@SuppressWarnings(\"resource\")\r\n@RunWith(Parameterized.class)\r\npublic class JsonReaderPathTest {\r\n\r\n    @Parameterized.Parameters(name = \"{0}\")\r\n    public static List<Object[]> parameters() {\r\n        return Arrays.asList(new Object[] { Factory.STRING_READER }, new Object[] { Factory.OBJECT_READER });\r\n    }\r\n\r\n    @Parameterized.Parameter\r\n    public Factory factory;\r\n\r\n    @Test\r\n    public void path() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\");\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n        String unused1 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[0]\");\r\n        int unused2 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[1]\");\r\n        boolean unused3 = reader.nextBoolean();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[2]\");\r\n        boolean unused4 = reader.nextBoolean();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[2]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[3]\");\r\n        reader.nextNull();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[3]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[4]\");\r\n        String unused5 = reader.nextString();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[4]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[5]\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[5].\");\r\n        String unused6 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].c\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[5].c\");\r\n        String unused7 = reader.nextString();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].c\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[5].c\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[6]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[6][0]\");\r\n        int unused8 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[6][1]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a[7]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void objectPath() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        JsonToken unused1 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n        JsonToken unused2 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n        String unused3 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        JsonToken unused4 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        int unused5 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        JsonToken unused6 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        String unused7 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        JsonToken unused8 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        int unused9 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        JsonToken unused10 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        JsonToken unused11 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.close();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void arrayPath() throws IOException {\r\n        JsonReader reader = factory.create(\"[1,2]\");\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        JsonToken unused1 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n        JsonToken unused2 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n        int unused3 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n        JsonToken unused4 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n        int unused5 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n        JsonToken unused6 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        JsonToken unused7 = reader.peek();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.close();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void multipleTopLevelValuesInOneDocument() throws IOException {\r\n        assumeTrue(factory == Factory.STRING_READER);\r\n        JsonReader reader = factory.create(\"[][]\");\r\n        reader.setStrictness(Strictness.LENIENT);\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void skipArrayElements() throws IOException {\r\n        JsonReader reader = factory.create(\"[1,2,3]\");\r\n        reader.beginArray();\r\n        reader.skipValue();\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n    }\r\n\r\n    @Test\r\n    public void skipArrayEnd() throws IOException {\r\n        JsonReader reader = factory.create(\"[[],1]\");\r\n        reader.beginArray();\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0][0]\");\r\n        // skip end of array\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    }\r\n\r\n    @Test\r\n    public void skipObjectNames() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":[]}\");\r\n        reader.beginObject();\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.<skipped>\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.<skipped>[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.<skipped>[0]\");\r\n    }\r\n\r\n    @Test\r\n    public void skipObjectValues() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n        String unused1 = reader.nextName();\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        String unused2 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    }\r\n\r\n    @Test\r\n    public void skipObjectEnd() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":{},\\\"b\\\":2}\");\r\n        reader.beginObject();\r\n        String unused = reader.nextName();\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.\");\r\n        // skip end of object\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    }\r\n\r\n    @Test\r\n    public void skipNestedStructures() throws IOException {\r\n        JsonReader reader = factory.create(\"[[1,2,3],4]\");\r\n        reader.beginArray();\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    }\r\n\r\n    @Test\r\n    public void skipEndOfDocument() throws IOException {\r\n        JsonReader reader = factory.create(\"[]\");\r\n        reader.beginArray();\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n        reader.skipValue();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void arrayOfObjects() throws IOException {\r\n        JsonReader reader = factory.create(\"[{},{},{}]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0].\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0].\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1].\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1].\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[2].\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2].\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[2]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[3]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void arrayOfArrays() throws IOException {\r\n        JsonReader reader = factory.create(\"[[],[],[]]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[0][0]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[1][0]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n        reader.beginArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[2][0]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[2][0]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$[2]\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$[3]\");\r\n        reader.endArray();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    @Test\r\n    public void objectOfObjects() throws IOException {\r\n        JsonReader reader = factory.create(\"{\\\"a\\\":{\\\"a1\\\":1,\\\"a2\\\":2},\\\"b\\\":{\\\"b1\\\":1}}\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n        String unused1 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.\");\r\n        String unused2 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a1\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.a1\");\r\n        int unused3 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a1\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.a1\");\r\n        String unused4 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a2\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.a2\");\r\n        int unused5 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a2\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a.a2\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n        String unused6 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        reader.beginObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b.\");\r\n        String unused7 = reader.nextName();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.b1\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b.b1\");\r\n        int unused8 = reader.nextInt();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.b1\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b.b1\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n        reader.endObject();\r\n        assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n        assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    }\r\n\r\n    public enum Factory {\r\n\r\n        STRING_READER {\r\n\r\n            @Override\r\n            public JsonReader create(String data) {\r\n                return new JsonReader(new StringReader(data));\r\n            }\r\n        }\r\n        , OBJECT_READER {\r\n\r\n            @Override\r\n            public JsonReader create(String data) {\r\n                JsonElement element = Streams.parse(new JsonReader(new StringReader(data)));\r\n                return new JsonTreeReader(element);\r\n            }\r\n        }\r\n        ;\r\n\r\n        abstract JsonReader create(String data);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "field",
    "name": "factory",
    "start_line": 43,
    "end_line": 43,
    "code": "@Parameterized.Parameter\r\npublic Factory factory;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "parameters",
    "start_line": 37,
    "end_line": 41,
    "code": "@Parameterized.Parameters(name = \"{0}\")\r\npublic static List<Object[]> parameters() {\r\n    return Arrays.asList(new Object[] { Factory.STRING_READER }, new Object[] { Factory.OBJECT_READER });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "path",
    "start_line": 45,
    "end_line": 101,
    "code": "@Test\r\npublic void path() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\");\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n    String unused1 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[0]\");\r\n    int unused2 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[1]\");\r\n    boolean unused3 = reader.nextBoolean();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[2]\");\r\n    boolean unused4 = reader.nextBoolean();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[2]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[3]\");\r\n    reader.nextNull();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[3]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[4]\");\r\n    String unused5 = reader.nextString();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[4]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[5]\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[5].\");\r\n    String unused6 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].c\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[5].c\");\r\n    String unused7 = reader.nextString();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5].c\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[5].c\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[5]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[6]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[6][0]\");\r\n    int unused8 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[6][1]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a[6]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a[7]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "objectPath",
    "start_line": 103,
    "end_line": 157,
    "code": "@Test\r\npublic void objectPath() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    JsonToken unused1 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n    JsonToken unused2 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n    String unused3 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    JsonToken unused4 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    int unused5 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    JsonToken unused6 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    String unused7 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    JsonToken unused8 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    int unused9 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    JsonToken unused10 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    JsonToken unused11 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.close();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "arrayPath",
    "start_line": 159,
    "end_line": 199,
    "code": "@Test\r\npublic void arrayPath() throws IOException {\r\n    JsonReader reader = factory.create(\"[1,2]\");\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    JsonToken unused1 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n    JsonToken unused2 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n    int unused3 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    JsonToken unused4 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    int unused5 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n    JsonToken unused6 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    JsonToken unused7 = reader.peek();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.close();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "multipleTopLevelValuesInOneDocument",
    "start_line": 201,
    "end_line": 215,
    "code": "@Test\r\npublic void multipleTopLevelValuesInOneDocument() throws IOException {\r\n    assumeTrue(factory == Factory.STRING_READER);\r\n    JsonReader reader = factory.create(\"[][]\");\r\n    reader.setStrictness(Strictness.LENIENT);\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipArrayElements",
    "start_line": 217,
    "end_line": 225,
    "code": "@Test\r\npublic void skipArrayElements() throws IOException {\r\n    JsonReader reader = factory.create(\"[1,2,3]\");\r\n    reader.beginArray();\r\n    reader.skipValue();\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipArrayEnd",
    "start_line": 227,
    "end_line": 237,
    "code": "@Test\r\npublic void skipArrayEnd() throws IOException {\r\n    JsonReader reader = factory.create(\"[[],1]\");\r\n    reader.beginArray();\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0][0]\");\r\n    // skip end of array\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipObjectNames",
    "start_line": 239,
    "end_line": 250,
    "code": "@Test\r\npublic void skipObjectNames() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":[]}\");\r\n    reader.beginObject();\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.<skipped>\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.<skipped>\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.<skipped>[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.<skipped>[0]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipObjectValues",
    "start_line": 252,
    "end_line": 265,
    "code": "@Test\r\npublic void skipObjectValues() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n    String unused1 = reader.nextName();\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    String unused2 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipObjectEnd",
    "start_line": 267,
    "end_line": 278,
    "code": "@Test\r\npublic void skipObjectEnd() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":{},\\\"b\\\":2}\");\r\n    reader.beginObject();\r\n    String unused = reader.nextName();\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.\");\r\n    // skip end of object\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipNestedStructures",
    "start_line": 280,
    "end_line": 287,
    "code": "@Test\r\npublic void skipNestedStructures() throws IOException {\r\n    JsonReader reader = factory.create(\"[[1,2,3],4]\");\r\n    reader.beginArray();\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "skipEndOfDocument",
    "start_line": 289,
    "end_line": 302,
    "code": "@Test\r\npublic void skipEndOfDocument() throws IOException {\r\n    JsonReader reader = factory.create(\"[]\");\r\n    reader.beginArray();\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n    reader.skipValue();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "arrayOfObjects",
    "start_line": 304,
    "end_line": 331,
    "code": "@Test\r\npublic void arrayOfObjects() throws IOException {\r\n    JsonReader reader = factory.create(\"[{},{},{}]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0].\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0].\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1].\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1].\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[2].\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2].\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[2]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[3]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "arrayOfArrays",
    "start_line": 333,
    "end_line": 360,
    "code": "@Test\r\npublic void arrayOfArrays() throws IOException {\r\n    JsonReader reader = factory.create(\"[[],[],[]]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[0][0]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[1][0]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[1]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2]\");\r\n    reader.beginArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[2][0]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[2][0]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$[2]\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$[3]\");\r\n    reader.endArray();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  },
  {
    "type": "method",
    "name": "objectOfObjects",
    "start_line": 362,
    "end_line": 407,
    "code": "@Test\r\npublic void objectOfObjects() throws IOException {\r\n    JsonReader reader = factory.create(\"{\\\"a\\\":{\\\"a1\\\":1,\\\"a2\\\":2},\\\"b\\\":{\\\"b1\\\":1}}\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.\");\r\n    String unused1 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.\");\r\n    String unused2 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a1\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.a1\");\r\n    int unused3 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a1\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.a1\");\r\n    String unused4 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a2\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.a2\");\r\n    int unused5 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a.a2\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a.a2\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.a\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.a\");\r\n    String unused6 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    reader.beginObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b.\");\r\n    String unused7 = reader.nextName();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.b1\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b.b1\");\r\n    int unused8 = reader.nextInt();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b.b1\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b.b1\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$.b\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$.b\");\r\n    reader.endObject();\r\n    assertThat(reader.getPreviousPath()).isEqualTo(\"$\");\r\n    assertThat(reader.getPath()).isEqualTo(\"$\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonReaderPathTest.java"
  }
]