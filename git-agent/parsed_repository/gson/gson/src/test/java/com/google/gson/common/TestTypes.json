[
  {
    "type": "package",
    "name": "com.google.gson.common",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.common;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.SerializedName",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.annotations.SerializedName;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "class",
    "name": "TestTypes",
    "start_line": 38,
    "end_line": 434,
    "code": "/**\r\n * Types used for testing JSON serialization and deserialization\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class TestTypes {\r\n\r\n    private TestTypes() {\r\n    }\r\n\r\n    public static class Base {\r\n\r\n        public static final String BASE_NAME = Base.class.getSimpleName();\r\n\r\n        public static final String BASE_FIELD_KEY = \"baseName\";\r\n\r\n        public static final String SERIALIZER_KEY = \"serializerName\";\r\n\r\n        public String baseName = BASE_NAME;\r\n\r\n        public String serializerName;\r\n    }\r\n\r\n    public static class Sub extends Base {\r\n\r\n        public static final String SUB_NAME = Sub.class.getSimpleName();\r\n\r\n        public static final String SUB_FIELD_KEY = \"subName\";\r\n\r\n        public final String subName = SUB_NAME;\r\n    }\r\n\r\n    public static class ClassWithBaseField {\r\n\r\n        public static final String FIELD_KEY = \"base\";\r\n\r\n        public final Base base;\r\n\r\n        public ClassWithBaseField(Base base) {\r\n            this.base = base;\r\n        }\r\n    }\r\n\r\n    public static class ClassWithBaseArrayField {\r\n\r\n        public static final String FIELD_KEY = \"base\";\r\n\r\n        public final Base[] base;\r\n\r\n        public ClassWithBaseArrayField(Base[] base) {\r\n            this.base = base;\r\n        }\r\n    }\r\n\r\n    public static class ClassWithBaseCollectionField {\r\n\r\n        public static final String FIELD_KEY = \"base\";\r\n\r\n        public final Collection<Base> base;\r\n\r\n        public ClassWithBaseCollectionField(Collection<Base> base) {\r\n            this.base = base;\r\n        }\r\n    }\r\n\r\n    public static class BaseSerializer implements JsonSerializer<Base> {\r\n\r\n        public static final String NAME = BaseSerializer.class.getSimpleName();\r\n\r\n        @Override\r\n        public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\r\n            JsonObject obj = new JsonObject();\r\n            obj.addProperty(Base.SERIALIZER_KEY, NAME);\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    public static class SubSerializer implements JsonSerializer<Sub> {\r\n\r\n        public static final String NAME = SubSerializer.class.getSimpleName();\r\n\r\n        @Override\r\n        public JsonElement serialize(Sub src, Type typeOfSrc, JsonSerializationContext context) {\r\n            JsonObject obj = new JsonObject();\r\n            obj.addProperty(Base.SERIALIZER_KEY, NAME);\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    public static class StringWrapper {\r\n\r\n        public final String someConstantStringInstanceField;\r\n\r\n        public StringWrapper(String value) {\r\n            someConstantStringInstanceField = value;\r\n        }\r\n    }\r\n\r\n    public static class BagOfPrimitives {\r\n\r\n        public static final long DEFAULT_VALUE = 0;\r\n\r\n        public long longValue;\r\n\r\n        public int intValue;\r\n\r\n        public boolean booleanValue;\r\n\r\n        public String stringValue;\r\n\r\n        public BagOfPrimitives() {\r\n            this(DEFAULT_VALUE, 0, false, \"\");\r\n        }\r\n\r\n        public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {\r\n            this.longValue = longValue;\r\n            this.intValue = intValue;\r\n            this.booleanValue = booleanValue;\r\n            this.stringValue = stringValue;\r\n        }\r\n\r\n        public int getIntValue() {\r\n            return intValue;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\");\r\n            sb.append(\"\\\"longValue\\\":\").append(longValue).append(\",\");\r\n            sb.append(\"\\\"intValue\\\":\").append(intValue).append(\",\");\r\n            sb.append(\"\\\"booleanValue\\\":\").append(booleanValue).append(\",\");\r\n            sb.append(\"\\\"stringValue\\\":\\\"\").append(stringValue).append(\"\\\"\");\r\n            sb.append(\"}\");\r\n            return sb.toString();\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            int prime = 31;\r\n            int result = 1;\r\n            result = prime * result + (booleanValue ? 1231 : 1237);\r\n            result = prime * result + intValue;\r\n            result = prime * result + (int) (longValue ^ (longValue >>> 32));\r\n            result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());\r\n            return result;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) {\r\n                return true;\r\n            }\r\n            if (!(o instanceof BagOfPrimitives)) {\r\n                return false;\r\n            }\r\n            BagOfPrimitives that = (BagOfPrimitives) o;\r\n            return longValue == that.longValue && getIntValue() == that.getIntValue() && booleanValue == that.booleanValue && Objects.equals(stringValue, that.stringValue);\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n        }\r\n    }\r\n\r\n    public static class BagOfPrimitiveWrappers {\r\n\r\n        private final Long longValue;\r\n\r\n        private final Integer intValue;\r\n\r\n        private final Boolean booleanValue;\r\n\r\n        public BagOfPrimitiveWrappers(Long longValue, Integer intValue, Boolean booleanValue) {\r\n            this.longValue = longValue;\r\n            this.intValue = intValue;\r\n            this.booleanValue = booleanValue;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\");\r\n            sb.append(\"\\\"longValue\\\":\").append(longValue).append(\",\");\r\n            sb.append(\"\\\"intValue\\\":\").append(intValue).append(\",\");\r\n            sb.append(\"\\\"booleanValue\\\":\").append(booleanValue);\r\n            sb.append(\"}\");\r\n            return sb.toString();\r\n        }\r\n    }\r\n\r\n    public static class PrimitiveArray {\r\n\r\n        private final long[] longArray;\r\n\r\n        public PrimitiveArray() {\r\n            this(new long[0]);\r\n        }\r\n\r\n        public PrimitiveArray(long[] longArray) {\r\n            this.longArray = longArray;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\\\"longArray\\\":[\");\r\n            boolean first = true;\r\n            for (long l : longArray) {\r\n                if (!first) {\r\n                    sb.append(\",\");\r\n                } else {\r\n                    first = false;\r\n                }\r\n                sb.append(l);\r\n            }\r\n            sb.append(\"]}\");\r\n            return sb.toString();\r\n        }\r\n    }\r\n\r\n    // for missing hashCode() override\r\n    @SuppressWarnings({ \"overrides\", \"EqualsHashCode\" })\r\n    public static class ClassWithNoFields {\r\n\r\n        // Nothing here..\r\n        @Override\r\n        public boolean equals(Object other) {\r\n            return other instanceof ClassWithNoFields;\r\n        }\r\n    }\r\n\r\n    public static class Nested {\r\n\r\n        private final BagOfPrimitives primitive1;\r\n\r\n        private final BagOfPrimitives primitive2;\r\n\r\n        public Nested() {\r\n            this(null, null);\r\n        }\r\n\r\n        public Nested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\r\n            this.primitive1 = primitive1;\r\n            this.primitive2 = primitive2;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\");\r\n            appendFields(sb);\r\n            sb.append(\"}\");\r\n            return sb.toString();\r\n        }\r\n\r\n        public void appendFields(StringBuilder sb) {\r\n            if (primitive1 != null) {\r\n                sb.append(\"\\\"primitive1\\\":\").append(primitive1.getExpectedJson());\r\n            }\r\n            if (primitive1 != null && primitive2 != null) {\r\n                sb.append(\",\");\r\n            }\r\n            if (primitive2 != null) {\r\n                sb.append(\"\\\"primitive2\\\":\").append(primitive2.getExpectedJson());\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class ClassWithTransientFields<T> {\r\n\r\n        public transient T transientT;\r\n\r\n        public final transient long transientLongValue;\r\n\r\n        private final long[] longValue;\r\n\r\n        public ClassWithTransientFields() {\r\n            this(0L);\r\n        }\r\n\r\n        public ClassWithTransientFields(long value) {\r\n            longValue = new long[] { value };\r\n            transientLongValue = value + 1;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\");\r\n            sb.append(\"\\\"longValue\\\":[\").append(longValue[0]).append(\"]\");\r\n            sb.append(\"}\");\r\n            return sb.toString();\r\n        }\r\n    }\r\n\r\n    public static class ClassWithCustomTypeConverter {\r\n\r\n        private final BagOfPrimitives bag;\r\n\r\n        private final int value;\r\n\r\n        public ClassWithCustomTypeConverter() {\r\n            this(new BagOfPrimitives(), 10);\r\n        }\r\n\r\n        public ClassWithCustomTypeConverter(int value) {\r\n            this(new BagOfPrimitives(value, value, false, \"\"), value);\r\n        }\r\n\r\n        public ClassWithCustomTypeConverter(BagOfPrimitives bag, int value) {\r\n            this.bag = bag;\r\n            this.value = value;\r\n        }\r\n\r\n        public BagOfPrimitives getBag() {\r\n            return bag;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            return \"{\\\"url\\\":\\\"\" + bag.getExpectedJson() + \"\\\",\\\"value\\\":\" + value + \"}\";\r\n        }\r\n\r\n        public int getValue() {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public static class ArrayOfObjects {\r\n\r\n        private final BagOfPrimitives[] elements;\r\n\r\n        public ArrayOfObjects() {\r\n            elements = new BagOfPrimitives[3];\r\n            for (int i = 0; i < elements.length; ++i) {\r\n                elements[i] = new BagOfPrimitives(i, i + 2, false, \"i\" + i);\r\n            }\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder(\"{\\\"elements\\\":[\");\r\n            boolean first = true;\r\n            for (BagOfPrimitives element : elements) {\r\n                if (first) {\r\n                    first = false;\r\n                } else {\r\n                    sb.append(\",\");\r\n                }\r\n                sb.append(element.getExpectedJson());\r\n            }\r\n            sb.append(\"]}\");\r\n            return sb.toString();\r\n        }\r\n    }\r\n\r\n    public static class ClassOverridingEquals {\r\n\r\n        public ClassOverridingEquals ref;\r\n\r\n        public String getExpectedJson() {\r\n            if (ref == null) {\r\n                return \"{}\";\r\n            }\r\n            return \"{\\\"ref\\\":\" + ref.getExpectedJson() + \"}\";\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object obj) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    public static class ClassWithArray {\r\n\r\n        public final Object[] array;\r\n\r\n        public ClassWithArray() {\r\n            array = null;\r\n        }\r\n\r\n        public ClassWithArray(Object[] array) {\r\n            this.array = array;\r\n        }\r\n    }\r\n\r\n    public static class ClassWithObjects {\r\n\r\n        public final BagOfPrimitives bag;\r\n\r\n        public ClassWithObjects() {\r\n            this(new BagOfPrimitives());\r\n        }\r\n\r\n        public ClassWithObjects(BagOfPrimitives bag) {\r\n            this.bag = bag;\r\n        }\r\n    }\r\n\r\n    public static class ClassWithSerializedNameFields {\r\n\r\n        @SerializedName(\"fooBar\")\r\n        public final int f;\r\n\r\n        @SerializedName(\"Another Foo\")\r\n        public final int g;\r\n\r\n        public ClassWithSerializedNameFields() {\r\n            this(1, 4);\r\n        }\r\n\r\n        public ClassWithSerializedNameFields(int f, int g) {\r\n            this.f = f;\r\n            this.g = g;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            return '{' + \"\\\"fooBar\\\":\" + f + \",\\\"Another Foo\\\":\" + g + '}';\r\n        }\r\n    }\r\n\r\n    public static class CrazyLongTypeAdapter implements JsonSerializer<Long>, JsonDeserializer<Long> {\r\n\r\n        public static final long DIFFERENCE = 5L;\r\n\r\n        @Override\r\n        public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(src + DIFFERENCE);\r\n        }\r\n\r\n        @Override\r\n        public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return json.getAsLong() - DIFFERENCE;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  },
  {
    "type": "constructor",
    "name": "TestTypes",
    "start_line": 39,
    "end_line": 39,
    "code": "private TestTypes() {\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\common\\TestTypes.java"
  }
]