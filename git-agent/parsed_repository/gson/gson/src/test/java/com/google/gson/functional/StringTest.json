[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 22,
    "end_line": 22,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 23,
    "end_line": 23,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "class",
    "name": "StringTest",
    "start_line": 31,
    "end_line": 177,
    "code": "/**\r\n * Functional tests for Json serialization and deserialization of strings.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class StringTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testStringValueSerialization() {\r\n        String value = \"someRandomStringValue\";\r\n        assertThat(gson.toJson(value)).isEqualTo('\"' + value + '\"');\r\n    }\r\n\r\n    @Test\r\n    public void testStringValueDeserialization() {\r\n        String value = \"someRandomStringValue\";\r\n        String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n        assertThat(actual).isEqualTo(value);\r\n    }\r\n\r\n    @Test\r\n    public void testSingleQuoteInStringSerialization() {\r\n        String valueWithQuotes = \"beforeQuote'afterQuote\";\r\n        String jsonRepresentation = gson.toJson(valueWithQuotes);\r\n        assertThat(gson.fromJson(jsonRepresentation, String.class)).isEqualTo(valueWithQuotes);\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedCtrlNInStringSerialization() {\r\n        String value = \"a\\nb\";\r\n        String json = gson.toJson(value);\r\n        assertThat(json).isEqualTo(\"\\\"a\\\\nb\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedCtrlNInStringDeserialization() {\r\n        String json = \"'a\\\\nb'\";\r\n        String actual = gson.fromJson(json, String.class);\r\n        assertThat(actual).isEqualTo(\"a\\nb\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedCtrlRInStringSerialization() {\r\n        String value = \"a\\rb\";\r\n        String json = gson.toJson(value);\r\n        assertThat(json).isEqualTo(\"\\\"a\\\\rb\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedCtrlRInStringDeserialization() {\r\n        String json = \"'a\\\\rb'\";\r\n        String actual = gson.fromJson(json, String.class);\r\n        assertThat(actual).isEqualTo(\"a\\rb\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedBackslashInStringSerialization() {\r\n        String value = \"a\\\\b\";\r\n        String json = gson.toJson(value);\r\n        assertThat(json).isEqualTo(\"\\\"a\\\\\\\\b\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testEscapedBackslashInStringDeserialization() {\r\n        String actual = gson.fromJson(\"'a\\\\\\\\b'\", String.class);\r\n        assertThat(actual).isEqualTo(\"a\\\\b\");\r\n    }\r\n\r\n    @Test\r\n    public void testSingleQuoteInStringDeserialization() {\r\n        String value = \"beforeQuote'afterQuote\";\r\n        String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n        assertThat(actual).isEqualTo(value);\r\n    }\r\n\r\n    @Test\r\n    public void testEscapingQuotesInStringSerialization() {\r\n        String valueWithQuotes = \"beforeQuote\\\"afterQuote\";\r\n        String jsonRepresentation = gson.toJson(valueWithQuotes);\r\n        String target = gson.fromJson(jsonRepresentation, String.class);\r\n        assertThat(target).isEqualTo(valueWithQuotes);\r\n    }\r\n\r\n    @Test\r\n    public void testEscapingQuotesInStringDeserialization() {\r\n        String value = \"beforeQuote\\\\\\\"afterQuote\";\r\n        String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n        String expected = \"beforeQuote\\\"afterQuote\";\r\n        assertThat(actual).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testStringValueAsSingleElementArraySerialization() {\r\n        String[] target = { \"abc\" };\r\n        assertThat(gson.toJson(target)).isEqualTo(\"[\\\"abc\\\"]\");\r\n        assertThat(gson.toJson(target, String[].class)).isEqualTo(\"[\\\"abc\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStringWithEscapedSlashDeserialization() {\r\n        String value = \"/\";\r\n        String json = \"'\\\\/'\";\r\n        String actual = gson.fromJson(json, String.class);\r\n        assertThat(actual).isEqualTo(value);\r\n    }\r\n\r\n    /**\r\n     * Created in response to\r\n     * http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\r\n     */\r\n    @Test\r\n    public void testAssignmentCharSerialization() {\r\n        String value = \"abc=\";\r\n        String json = gson.toJson(value);\r\n        assertThat(json).isEqualTo(\"\\\"abc\\\\u003d\\\"\");\r\n    }\r\n\r\n    /**\r\n     * Created in response to\r\n     * http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\r\n     */\r\n    @Test\r\n    public void testAssignmentCharDeserialization() {\r\n        String json = \"\\\"abc=\\\"\";\r\n        String value = gson.fromJson(json, String.class);\r\n        assertThat(value).isEqualTo(\"abc=\");\r\n        json = \"'abc\\\\u003d'\";\r\n        value = gson.fromJson(json, String.class);\r\n        assertThat(value).isEqualTo(\"abc=\");\r\n    }\r\n\r\n    @Test\r\n    public void testJavascriptKeywordsInStringSerialization() {\r\n        String value = \"null true false function\";\r\n        String json = gson.toJson(value);\r\n        assertThat(json).isEqualTo(\"\\\"\" + value + \"\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testJavascriptKeywordsInStringDeserialization() {\r\n        String json = \"'null true false function'\";\r\n        String value = gson.fromJson(json, String.class);\r\n        assertThat(json.substring(1, json.length() - 1)).isEqualTo(value);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 32,
    "end_line": 32,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 34,
    "end_line": 37,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testStringValueSerialization",
    "start_line": 39,
    "end_line": 43,
    "code": "@Test\r\npublic void testStringValueSerialization() {\r\n    String value = \"someRandomStringValue\";\r\n    assertThat(gson.toJson(value)).isEqualTo('\"' + value + '\"');\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testStringValueDeserialization",
    "start_line": 45,
    "end_line": 50,
    "code": "@Test\r\npublic void testStringValueDeserialization() {\r\n    String value = \"someRandomStringValue\";\r\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n    assertThat(actual).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testSingleQuoteInStringSerialization",
    "start_line": 52,
    "end_line": 57,
    "code": "@Test\r\npublic void testSingleQuoteInStringSerialization() {\r\n    String valueWithQuotes = \"beforeQuote'afterQuote\";\r\n    String jsonRepresentation = gson.toJson(valueWithQuotes);\r\n    assertThat(gson.fromJson(jsonRepresentation, String.class)).isEqualTo(valueWithQuotes);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedCtrlNInStringSerialization",
    "start_line": 59,
    "end_line": 64,
    "code": "@Test\r\npublic void testEscapedCtrlNInStringSerialization() {\r\n    String value = \"a\\nb\";\r\n    String json = gson.toJson(value);\r\n    assertThat(json).isEqualTo(\"\\\"a\\\\nb\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedCtrlNInStringDeserialization",
    "start_line": 66,
    "end_line": 71,
    "code": "@Test\r\npublic void testEscapedCtrlNInStringDeserialization() {\r\n    String json = \"'a\\\\nb'\";\r\n    String actual = gson.fromJson(json, String.class);\r\n    assertThat(actual).isEqualTo(\"a\\nb\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedCtrlRInStringSerialization",
    "start_line": 73,
    "end_line": 78,
    "code": "@Test\r\npublic void testEscapedCtrlRInStringSerialization() {\r\n    String value = \"a\\rb\";\r\n    String json = gson.toJson(value);\r\n    assertThat(json).isEqualTo(\"\\\"a\\\\rb\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedCtrlRInStringDeserialization",
    "start_line": 80,
    "end_line": 85,
    "code": "@Test\r\npublic void testEscapedCtrlRInStringDeserialization() {\r\n    String json = \"'a\\\\rb'\";\r\n    String actual = gson.fromJson(json, String.class);\r\n    assertThat(actual).isEqualTo(\"a\\rb\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedBackslashInStringSerialization",
    "start_line": 87,
    "end_line": 92,
    "code": "@Test\r\npublic void testEscapedBackslashInStringSerialization() {\r\n    String value = \"a\\\\b\";\r\n    String json = gson.toJson(value);\r\n    assertThat(json).isEqualTo(\"\\\"a\\\\\\\\b\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapedBackslashInStringDeserialization",
    "start_line": 94,
    "end_line": 98,
    "code": "@Test\r\npublic void testEscapedBackslashInStringDeserialization() {\r\n    String actual = gson.fromJson(\"'a\\\\\\\\b'\", String.class);\r\n    assertThat(actual).isEqualTo(\"a\\\\b\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testSingleQuoteInStringDeserialization",
    "start_line": 100,
    "end_line": 105,
    "code": "@Test\r\npublic void testSingleQuoteInStringDeserialization() {\r\n    String value = \"beforeQuote'afterQuote\";\r\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n    assertThat(actual).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapingQuotesInStringSerialization",
    "start_line": 107,
    "end_line": 113,
    "code": "@Test\r\npublic void testEscapingQuotesInStringSerialization() {\r\n    String valueWithQuotes = \"beforeQuote\\\"afterQuote\";\r\n    String jsonRepresentation = gson.toJson(valueWithQuotes);\r\n    String target = gson.fromJson(jsonRepresentation, String.class);\r\n    assertThat(target).isEqualTo(valueWithQuotes);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testEscapingQuotesInStringDeserialization",
    "start_line": 115,
    "end_line": 121,
    "code": "@Test\r\npublic void testEscapingQuotesInStringDeserialization() {\r\n    String value = \"beforeQuote\\\\\\\"afterQuote\";\r\n    String actual = gson.fromJson(\"\\\"\" + value + \"\\\"\", String.class);\r\n    String expected = \"beforeQuote\\\"afterQuote\";\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testStringValueAsSingleElementArraySerialization",
    "start_line": 123,
    "end_line": 128,
    "code": "@Test\r\npublic void testStringValueAsSingleElementArraySerialization() {\r\n    String[] target = { \"abc\" };\r\n    assertThat(gson.toJson(target)).isEqualTo(\"[\\\"abc\\\"]\");\r\n    assertThat(gson.toJson(target, String[].class)).isEqualTo(\"[\\\"abc\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testStringWithEscapedSlashDeserialization",
    "start_line": 130,
    "end_line": 136,
    "code": "@Test\r\npublic void testStringWithEscapedSlashDeserialization() {\r\n    String value = \"/\";\r\n    String json = \"'\\\\/'\";\r\n    String actual = gson.fromJson(json, String.class);\r\n    assertThat(actual).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testAssignmentCharSerialization",
    "start_line": 142,
    "end_line": 147,
    "code": "/**\r\n * Created in response to\r\n * http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\r\n */\r\n@Test\r\npublic void testAssignmentCharSerialization() {\r\n    String value = \"abc=\";\r\n    String json = gson.toJson(value);\r\n    assertThat(json).isEqualTo(\"\\\"abc\\\\u003d\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testAssignmentCharDeserialization",
    "start_line": 153,
    "end_line": 162,
    "code": "/**\r\n * Created in response to\r\n * http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23\r\n */\r\n@Test\r\npublic void testAssignmentCharDeserialization() {\r\n    String json = \"\\\"abc=\\\"\";\r\n    String value = gson.fromJson(json, String.class);\r\n    assertThat(value).isEqualTo(\"abc=\");\r\n    json = \"'abc\\\\u003d'\";\r\n    value = gson.fromJson(json, String.class);\r\n    assertThat(value).isEqualTo(\"abc=\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testJavascriptKeywordsInStringSerialization",
    "start_line": 164,
    "end_line": 169,
    "code": "@Test\r\npublic void testJavascriptKeywordsInStringSerialization() {\r\n    String value = \"null true false function\";\r\n    String json = gson.toJson(value);\r\n    assertThat(json).isEqualTo(\"\\\"\" + value + \"\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  },
  {
    "type": "method",
    "name": "testJavascriptKeywordsInStringDeserialization",
    "start_line": 171,
    "end_line": 176,
    "code": "@Test\r\npublic void testJavascriptKeywordsInStringDeserialization() {\r\n    String json = \"'null true false function'\";\r\n    String value = gson.fromJson(json, String.class);\r\n    assertThat(json.substring(1, json.length() - 1)).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\StringTest.java"
  }
]