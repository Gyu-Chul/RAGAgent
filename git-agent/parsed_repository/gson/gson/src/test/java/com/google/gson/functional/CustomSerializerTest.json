[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonArray",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Base",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.common.TestTypes.Base;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BaseSerializer",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.common.TestTypes.BaseSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithBaseArrayField",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.common.TestTypes.ClassWithBaseArrayField;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithBaseField",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.common.TestTypes.ClassWithBaseField;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Sub",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.common.TestTypes.Sub;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.SubSerializer",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.common.TestTypes.SubSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "class",
    "name": "CustomSerializerTest",
    "start_line": 41,
    "end_line": 104,
    "code": "/**\r\n * Functional Test exercising custom serialization only. When test applies to both serialization and\r\n * deserialization then add it to CustomTypeAdapterTest.\r\n *\r\n * @author Inderjeet Singh\r\n */\r\npublic class CustomSerializerTest {\r\n\r\n    @Test\r\n    public void testBaseClassSerializerInvokedForBaseClassFields() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n        ClassWithBaseField target = new ClassWithBaseField(new Base());\r\n        JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n        JsonObject base = json.get(\"base\").getAsJsonObject();\r\n        assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(BaseSerializer.NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n        ClassWithBaseField target = new ClassWithBaseField(new Sub());\r\n        JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n        JsonObject base = json.get(\"base\").getAsJsonObject();\r\n        assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(SubSerializer.NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n        ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] { new Sub(), new Sub() });\r\n        JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n        JsonArray array = json.get(\"base\").getAsJsonArray();\r\n        for (JsonElement element : array) {\r\n            JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\r\n            assertThat(serializerKey.getAsString()).isEqualTo(SubSerializer.NAME);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).create();\r\n        ClassWithBaseField target = new ClassWithBaseField(new Sub());\r\n        JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n        JsonObject base = json.get(\"base\").getAsJsonObject();\r\n        assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(BaseSerializer.NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testSerializerReturnsNull() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> null).create();\r\n        JsonElement json = gson.toJsonTree(new Base());\r\n        assertThat(json.isJsonNull()).isTrue();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "method",
    "name": "testBaseClassSerializerInvokedForBaseClassFields",
    "start_line": 43,
    "end_line": 54,
    "code": "@Test\r\npublic void testBaseClassSerializerInvokedForBaseClassFields() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n    ClassWithBaseField target = new ClassWithBaseField(new Base());\r\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n    JsonObject base = json.get(\"base\").getAsJsonObject();\r\n    assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(BaseSerializer.NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "method",
    "name": "testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",
    "start_line": 56,
    "end_line": 67,
    "code": "@Test\r\npublic void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n    ClassWithBaseField target = new ClassWithBaseField(new Sub());\r\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n    JsonObject base = json.get(\"base\").getAsJsonObject();\r\n    assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(SubSerializer.NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "method",
    "name": "testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances",
    "start_line": 69,
    "end_line": 83,
    "code": "@Test\r\npublic void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create();\r\n    ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] { new Sub(), new Sub() });\r\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n    JsonArray array = json.get(\"base\").getAsJsonArray();\r\n    for (JsonElement element : array) {\r\n        JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\r\n        assertThat(serializerKey.getAsString()).isEqualTo(SubSerializer.NAME);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "method",
    "name": "testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",
    "start_line": 85,
    "end_line": 92,
    "code": "@Test\r\npublic void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).create();\r\n    ClassWithBaseField target = new ClassWithBaseField(new Sub());\r\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\r\n    JsonObject base = json.get(\"base\").getAsJsonObject();\r\n    assertThat(base.get(Base.SERIALIZER_KEY).getAsString()).isEqualTo(BaseSerializer.NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  },
  {
    "type": "method",
    "name": "testSerializerReturnsNull",
    "start_line": 94,
    "end_line": 103,
    "code": "@Test\r\npublic void testSerializerReturnsNull() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, (JsonSerializer<Base>) (src, typeOfSrc, context) -> null).create();\r\n    JsonElement json = gson.toJsonTree(new Base());\r\n    assertThat(json.isJsonNull()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\CustomSerializerTest.java"
  }
]