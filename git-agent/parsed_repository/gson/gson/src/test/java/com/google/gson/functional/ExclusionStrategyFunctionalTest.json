[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ExclusionStrategy",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.ExclusionStrategy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.FieldAttributes",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.FieldAttributes;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.annotation.ElementType",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.lang.annotation.ElementType;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.annotation.Retention",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.lang.annotation.Retention;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.annotation.RetentionPolicy",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.lang.annotation.RetentionPolicy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.annotation.Target",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.annotation.Target;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 31,
    "end_line": 31,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 32,
    "end_line": 32,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "class",
    "name": "ExclusionStrategyFunctionalTest",
    "start_line": 41,
    "end_line": 220,
    "code": "/**\r\n * Performs some functional tests when Gson is instantiated with some common user defined {@link\r\n * ExclusionStrategy} objects.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class ExclusionStrategyFunctionalTest {\r\n\r\n    private static final ExclusionStrategy EXCLUDE_SAMPLE_OBJECT_FOR_TEST = new ExclusionStrategy() {\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes f) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> clazz) {\r\n            return clazz == SampleObjectForTest.class;\r\n        }\r\n    };\r\n\r\n    private SampleObjectForTest src;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        src = new SampleObjectForTest();\r\n    }\r\n\r\n    @Test\r\n    public void testExclusionStrategySerialization() {\r\n        Gson gson = createGson(new MyExclusionStrategy(String.class), true);\r\n        String json = gson.toJson(src);\r\n        assertThat(json).doesNotContain(\"\\\"stringField\\\"\");\r\n        assertThat(json).doesNotContain(\"\\\"annotatedField\\\"\");\r\n        assertThat(json).contains(\"\\\"longField\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testExclusionStrategySerializationDoesNotImpactDeserialization() {\r\n        String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n        Gson gson = createGson(new MyExclusionStrategy(String.class), true);\r\n        SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n        assertThat(value.annotatedField).isEqualTo(1);\r\n        assertThat(value.stringField).isEqualTo(\"x\");\r\n        assertThat(value.longField).isEqualTo(2);\r\n    }\r\n\r\n    @Test\r\n    public void testExclusionStrategyDeserialization() {\r\n        Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n        JsonObject json = new JsonObject();\r\n        json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\r\n        json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\r\n        json.add(\"longField\", new JsonPrimitive(1212311L));\r\n        SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\r\n        assertThat(target.longField).isEqualTo(1212311L);\r\n        // assert excluded fields are set to the defaults\r\n        assertThat(target.annotatedField).isEqualTo(src.annotatedField);\r\n        assertThat(target.stringField).isEqualTo(src.stringField);\r\n    }\r\n\r\n    @Test\r\n    public void testExclusionStrategySerializationDoesNotImpactSerialization() {\r\n        Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n        String json = gson.toJson(src);\r\n        assertThat(json).contains(\"\\\"stringField\\\"\");\r\n        assertThat(json).contains(\"\\\"annotatedField\\\"\");\r\n        assertThat(json).contains(\"\\\"longField\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testExclusionStrategyWithMode() {\r\n        SampleObjectForTest testObj = new SampleObjectForTest(src.annotatedField + 5, src.stringField + \"blah,blah\", src.longField + 655L);\r\n        Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n        JsonObject json = gson.toJsonTree(testObj).getAsJsonObject();\r\n        assertThat(json.get(\"annotatedField\").getAsInt()).isEqualTo(testObj.annotatedField);\r\n        assertThat(json.get(\"stringField\").getAsString()).isEqualTo(testObj.stringField);\r\n        assertThat(json.get(\"longField\").getAsLong()).isEqualTo(testObj.longField);\r\n        SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\r\n        assertThat(target.longField).isEqualTo(testObj.longField);\r\n        // assert excluded fields are set to the defaults\r\n        assertThat(target.annotatedField).isEqualTo(src.annotatedField);\r\n        assertThat(target.stringField).isEqualTo(src.stringField);\r\n    }\r\n\r\n    @Test\r\n    public void testExcludeTopLevelClassSerialization() {\r\n        Gson gson = new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n        assertThat(gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class)).isEqualTo(\"null\");\r\n    }\r\n\r\n    @Test\r\n    public void testExcludeTopLevelClassSerializationDoesNotImpactDeserialization() {\r\n        Gson gson = new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n        String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n        SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n        assertThat(value.annotatedField).isEqualTo(1);\r\n        assertThat(value.stringField).isEqualTo(\"x\");\r\n        assertThat(value.longField).isEqualTo(2);\r\n    }\r\n\r\n    @Test\r\n    public void testExcludeTopLevelClassDeserialization() {\r\n        Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n        String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n        SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n        assertThat(value).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testExcludeTopLevelClassDeserializationDoesNotImpactSerialization() {\r\n        Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n        String json = gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class);\r\n        assertThat(json).contains(\"\\\"stringField\\\"\");\r\n        assertThat(json).contains(\"\\\"annotatedField\\\"\");\r\n        assertThat(json).contains(\"\\\"longField\\\"\");\r\n    }\r\n\r\n    private static Gson createGson(ExclusionStrategy exclusionStrategy, boolean serialization) {\r\n        GsonBuilder gsonBuilder = new GsonBuilder();\r\n        if (serialization) {\r\n            gsonBuilder.addSerializationExclusionStrategy(exclusionStrategy);\r\n        } else {\r\n            gsonBuilder.addDeserializationExclusionStrategy(exclusionStrategy);\r\n        }\r\n        return gsonBuilder.serializeNulls().create();\r\n    }\r\n\r\n    @Retention(RetentionPolicy.RUNTIME)\r\n    @Target({ ElementType.FIELD })\r\n    private static @interface Foo {\r\n    }\r\n\r\n    private static class SampleObjectForTest {\r\n\r\n        @Foo\r\n        private final int annotatedField;\r\n\r\n        private final String stringField;\r\n\r\n        private final long longField;\r\n\r\n        public SampleObjectForTest() {\r\n            this(5, \"someDefaultValue\", 12345L);\r\n        }\r\n\r\n        public SampleObjectForTest(int annotatedField, String stringField, long longField) {\r\n            this.annotatedField = annotatedField;\r\n            this.stringField = stringField;\r\n            this.longField = longField;\r\n        }\r\n    }\r\n\r\n    private static final class MyExclusionStrategy implements ExclusionStrategy {\r\n\r\n        private final Class<?> typeToSkip;\r\n\r\n        private MyExclusionStrategy(Class<?> typeToSkip) {\r\n            this.typeToSkip = typeToSkip;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> clazz) {\r\n            return (clazz == typeToSkip);\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes f) {\r\n            return f.getAnnotation(Foo.class) != null;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "field",
    "name": "EXCLUDE_SAMPLE_OBJECT_FOR_TEST",
    "start_line": 42,
    "end_line": 53,
    "code": "private static final ExclusionStrategy EXCLUDE_SAMPLE_OBJECT_FOR_TEST = new ExclusionStrategy() {\r\n\r\n    @Override\r\n    public boolean shouldSkipField(FieldAttributes f) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldSkipClass(Class<?> clazz) {\r\n        return clazz == SampleObjectForTest.class;\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "field",
    "name": "src",
    "start_line": 55,
    "end_line": 55,
    "code": "private SampleObjectForTest src;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 57,
    "end_line": 60,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    src = new SampleObjectForTest();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExclusionStrategySerialization",
    "start_line": 62,
    "end_line": 69,
    "code": "@Test\r\npublic void testExclusionStrategySerialization() {\r\n    Gson gson = createGson(new MyExclusionStrategy(String.class), true);\r\n    String json = gson.toJson(src);\r\n    assertThat(json).doesNotContain(\"\\\"stringField\\\"\");\r\n    assertThat(json).doesNotContain(\"\\\"annotatedField\\\"\");\r\n    assertThat(json).contains(\"\\\"longField\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExclusionStrategySerializationDoesNotImpactDeserialization",
    "start_line": 71,
    "end_line": 79,
    "code": "@Test\r\npublic void testExclusionStrategySerializationDoesNotImpactDeserialization() {\r\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n    Gson gson = createGson(new MyExclusionStrategy(String.class), true);\r\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n    assertThat(value.annotatedField).isEqualTo(1);\r\n    assertThat(value.stringField).isEqualTo(\"x\");\r\n    assertThat(value.longField).isEqualTo(2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExclusionStrategyDeserialization",
    "start_line": 81,
    "end_line": 95,
    "code": "@Test\r\npublic void testExclusionStrategyDeserialization() {\r\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n    JsonObject json = new JsonObject();\r\n    json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\r\n    json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\r\n    json.add(\"longField\", new JsonPrimitive(1212311L));\r\n    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\r\n    assertThat(target.longField).isEqualTo(1212311L);\r\n    // assert excluded fields are set to the defaults\r\n    assertThat(target.annotatedField).isEqualTo(src.annotatedField);\r\n    assertThat(target.stringField).isEqualTo(src.stringField);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExclusionStrategySerializationDoesNotImpactSerialization",
    "start_line": 97,
    "end_line": 104,
    "code": "@Test\r\npublic void testExclusionStrategySerializationDoesNotImpactSerialization() {\r\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n    String json = gson.toJson(src);\r\n    assertThat(json).contains(\"\\\"stringField\\\"\");\r\n    assertThat(json).contains(\"\\\"annotatedField\\\"\");\r\n    assertThat(json).contains(\"\\\"longField\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExclusionStrategyWithMode",
    "start_line": 106,
    "end_line": 124,
    "code": "@Test\r\npublic void testExclusionStrategyWithMode() {\r\n    SampleObjectForTest testObj = new SampleObjectForTest(src.annotatedField + 5, src.stringField + \"blah,blah\", src.longField + 655L);\r\n    Gson gson = createGson(new MyExclusionStrategy(String.class), false);\r\n    JsonObject json = gson.toJsonTree(testObj).getAsJsonObject();\r\n    assertThat(json.get(\"annotatedField\").getAsInt()).isEqualTo(testObj.annotatedField);\r\n    assertThat(json.get(\"stringField\").getAsString()).isEqualTo(testObj.stringField);\r\n    assertThat(json.get(\"longField\").getAsLong()).isEqualTo(testObj.longField);\r\n    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\r\n    assertThat(target.longField).isEqualTo(testObj.longField);\r\n    // assert excluded fields are set to the defaults\r\n    assertThat(target.annotatedField).isEqualTo(src.annotatedField);\r\n    assertThat(target.stringField).isEqualTo(src.stringField);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeTopLevelClassSerialization",
    "start_line": 126,
    "end_line": 133,
    "code": "@Test\r\npublic void testExcludeTopLevelClassSerialization() {\r\n    Gson gson = new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n    assertThat(gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class)).isEqualTo(\"null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeTopLevelClassSerializationDoesNotImpactDeserialization",
    "start_line": 135,
    "end_line": 146,
    "code": "@Test\r\npublic void testExcludeTopLevelClassSerializationDoesNotImpactDeserialization() {\r\n    Gson gson = new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n    assertThat(value.annotatedField).isEqualTo(1);\r\n    assertThat(value.stringField).isEqualTo(\"x\");\r\n    assertThat(value.longField).isEqualTo(2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeTopLevelClassDeserialization",
    "start_line": 148,
    "end_line": 157,
    "code": "@Test\r\npublic void testExcludeTopLevelClassDeserialization() {\r\n    Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n    String json = \"{\\\"annotatedField\\\":1,\\\"stringField\\\":\\\"x\\\",\\\"longField\\\":2}\";\r\n    SampleObjectForTest value = gson.fromJson(json, SampleObjectForTest.class);\r\n    assertThat(value).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeTopLevelClassDeserializationDoesNotImpactSerialization",
    "start_line": 159,
    "end_line": 169,
    "code": "@Test\r\npublic void testExcludeTopLevelClassDeserializationDoesNotImpactSerialization() {\r\n    Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();\r\n    String json = gson.toJson(new SampleObjectForTest(), SampleObjectForTest.class);\r\n    assertThat(json).contains(\"\\\"stringField\\\"\");\r\n    assertThat(json).contains(\"\\\"annotatedField\\\"\");\r\n    assertThat(json).contains(\"\\\"longField\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "createGson",
    "start_line": 171,
    "end_line": 179,
    "code": "private static Gson createGson(ExclusionStrategy exclusionStrategy, boolean serialization) {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    if (serialization) {\r\n        gsonBuilder.addSerializationExclusionStrategy(exclusionStrategy);\r\n    } else {\r\n        gsonBuilder.addDeserializationExclusionStrategy(exclusionStrategy);\r\n    }\r\n    return gsonBuilder.serializeNulls().create();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ExclusionStrategyFunctionalTest.java"
  }
]