[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.CanIgnoreReturnValue",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonArray",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Base",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.common.TestTypes.Base;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithBaseArrayField",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.common.TestTypes.ClassWithBaseArrayField;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithBaseCollectionField",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.common.TestTypes.ClassWithBaseCollectionField;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithBaseField",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.common.TestTypes.ClassWithBaseField;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Nested",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.common.TestTypes.Nested;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Sub",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.common.TestTypes.Sub;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.LinkedList",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.LinkedList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Queue",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.Queue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Set",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.util.Set;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.SortedSet",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.util.SortedSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.TreeSet",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.util.TreeSet;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 40,
    "end_line": 40,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 41,
    "end_line": 41,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "class",
    "name": "InheritanceTest",
    "start_line": 50,
    "end_line": 299,
    "code": "/**\r\n * Functional tests for Json serialization and deserialization of classes with inheritance\r\n * hierarchies.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class InheritanceTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testSubClassSerialization() {\r\n        SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, \"stringValue\"), new BagOfPrimitives(30, 40, true, \"stringValue\"));\r\n        assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testSubClassDeserialization() {\r\n        String json = \"{\\\"value\\\":5,\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\" + \"\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":\" + \"{\\\"longValue\\\":30,\\\"intValue\\\":40,\\\"booleanValue\\\":true,\" + \"\\\"stringValue\\\":\\\"stringValue\\\"}}\";\r\n        SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);\r\n        assertThat(target.getExpectedJson()).isEqualTo(json);\r\n    }\r\n\r\n    @Test\r\n    public void testClassWithBaseFieldSerialization() {\r\n        ClassWithBaseField sub = new ClassWithBaseField(new Sub());\r\n        JsonObject json = (JsonObject) gson.toJsonTree(sub);\r\n        JsonElement base = json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);\r\n        assertThat(base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testClassWithBaseArrayFieldSerialization() {\r\n        Base[] baseClasses = new Base[] { new Sub(), new Sub() };\r\n        ClassWithBaseArrayField sub = new ClassWithBaseArrayField(baseClasses);\r\n        JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\r\n        JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\r\n        for (JsonElement element : bases) {\r\n            assertThat(element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testClassWithBaseCollectionFieldSerialization() {\r\n        Collection<Base> baseClasses = new ArrayList<>();\r\n        baseClasses.add(new Sub());\r\n        baseClasses.add(new Sub());\r\n        ClassWithBaseCollectionField sub = new ClassWithBaseCollectionField(baseClasses);\r\n        JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\r\n        JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\r\n        for (JsonElement element : bases) {\r\n            assertThat(element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsSub() {\r\n        Base base = new Sub();\r\n        JsonObject json = gson.toJsonTree(base).getAsJsonObject();\r\n        assertThat(json.get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsSubForToJsonMethod() {\r\n        Base base = new Sub();\r\n        String json = gson.toJson(base);\r\n        assertThat(json).contains(Sub.SUB_NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {\r\n        Base base = new Sub();\r\n        JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();\r\n        assertThat(json.get(Base.BASE_FIELD_KEY).getAsString()).isEqualTo(Base.BASE_NAME);\r\n        assertThat(json.get(Sub.SUB_FIELD_KEY)).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod() {\r\n        Base base = new Sub();\r\n        String json = gson.toJson(base, Base.class);\r\n        assertThat(json).contains(Base.BASE_NAME);\r\n        assertThat(json).doesNotContain(Sub.SUB_FIELD_KEY);\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {\r\n        Base base = new Sub();\r\n        JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();\r\n        assertThat(json.get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n    }\r\n\r\n    @Test\r\n    public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod() {\r\n        Base base = new Sub();\r\n        String json = gson.toJson(base, Sub.class);\r\n        assertThat(json).contains(Sub.SUB_NAME);\r\n    }\r\n\r\n    private static class SubTypeOfNested extends Nested {\r\n\r\n        private final long value = 5;\r\n\r\n        public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {\r\n            super(primitive1, primitive2);\r\n        }\r\n\r\n        @Override\r\n        public void appendFields(StringBuilder sb) {\r\n            sb.append(\"\\\"value\\\":\").append(value).append(\",\");\r\n            super.appendFields(sb);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"JdkObsolete\")\r\n    public void testSubInterfacesOfCollectionSerialization() {\r\n        List<Integer> list = new LinkedList<>();\r\n        list.add(0);\r\n        list.add(1);\r\n        list.add(2);\r\n        list.add(3);\r\n        Queue<Long> queue = new LinkedList<>();\r\n        queue.add(0L);\r\n        queue.add(1L);\r\n        queue.add(2L);\r\n        queue.add(3L);\r\n        Set<Float> set = new TreeSet<>();\r\n        set.add(0.1F);\r\n        set.add(0.2F);\r\n        set.add(0.3F);\r\n        set.add(0.4F);\r\n        SortedSet<Character> sortedSet = new TreeSet<>();\r\n        sortedSet.add('a');\r\n        sortedSet.add('b');\r\n        sortedSet.add('c');\r\n        sortedSet.add('d');\r\n        ClassWithSubInterfacesOfCollection target = new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);\r\n        assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n    }\r\n\r\n    @Test\r\n    public void testSubInterfacesOfCollectionDeserialization() {\r\n        String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\" + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\" + \"}\";\r\n        ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\r\n        assertThat(target.listContains(0, 1, 2, 3)).isTrue();\r\n        assertThat(target.queueContains(0, 1, 2, 3)).isTrue();\r\n        assertThat(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)).isTrue();\r\n        assertThat(target.sortedSetContains('a', 'b', 'c', 'd')).isTrue();\r\n    }\r\n\r\n    private static class ClassWithSubInterfacesOfCollection {\r\n\r\n        private List<Integer> list;\r\n\r\n        private Queue<Long> queue;\r\n\r\n        private Set<Float> set;\r\n\r\n        private SortedSet<Character> sortedSet;\r\n\r\n        public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set, SortedSet<Character> sortedSet) {\r\n            this.list = list;\r\n            this.queue = queue;\r\n            this.set = set;\r\n            this.sortedSet = sortedSet;\r\n        }\r\n\r\n        boolean listContains(int... values) {\r\n            for (int value : values) {\r\n                if (!list.contains(value)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        boolean queueContains(long... values) {\r\n            for (long value : values) {\r\n                if (!queue.contains(value)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        boolean setContains(float... values) {\r\n            for (float value : values) {\r\n                if (!set.contains(value)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        boolean sortedSetContains(char... values) {\r\n            for (char value : values) {\r\n                if (!sortedSet.contains(value)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public String getExpectedJson() {\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(\"{\");\r\n            sb.append(\"\\\"list\\\":\");\r\n            append(sb, list).append(\",\");\r\n            sb.append(\"\\\"queue\\\":\");\r\n            append(sb, queue).append(\",\");\r\n            sb.append(\"\\\"set\\\":\");\r\n            append(sb, set).append(\",\");\r\n            sb.append(\"\\\"sortedSet\\\":\");\r\n            append(sb, sortedSet);\r\n            sb.append(\"}\");\r\n            return sb.toString();\r\n        }\r\n\r\n        @CanIgnoreReturnValue\r\n        private static StringBuilder append(StringBuilder sb, Collection<?> c) {\r\n            sb.append(\"[\");\r\n            boolean first = true;\r\n            for (Object o : c) {\r\n                if (!first) {\r\n                    sb.append(\",\");\r\n                } else {\r\n                    first = false;\r\n                }\r\n                if (o instanceof String || o instanceof Character) {\r\n                    sb.append('\\\"');\r\n                }\r\n                sb.append(o.toString());\r\n                if (o instanceof String || o instanceof Character) {\r\n                    sb.append('\\\"');\r\n                }\r\n            }\r\n            sb.append(\"]\");\r\n            return sb;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 51,
    "end_line": 51,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 53,
    "end_line": 56,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testSubClassSerialization",
    "start_line": 58,
    "end_line": 65,
    "code": "@Test\r\npublic void testSubClassSerialization() {\r\n    SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, \"stringValue\"), new BagOfPrimitives(30, 40, true, \"stringValue\"));\r\n    assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testSubClassDeserialization",
    "start_line": 67,
    "end_line": 76,
    "code": "@Test\r\npublic void testSubClassDeserialization() {\r\n    String json = \"{\\\"value\\\":5,\\\"primitive1\\\":{\\\"longValue\\\":10,\\\"intValue\\\":20,\" + \"\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"stringValue\\\"},\\\"primitive2\\\":\" + \"{\\\"longValue\\\":30,\\\"intValue\\\":40,\\\"booleanValue\\\":true,\" + \"\\\"stringValue\\\":\\\"stringValue\\\"}}\";\r\n    SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);\r\n    assertThat(target.getExpectedJson()).isEqualTo(json);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testClassWithBaseFieldSerialization",
    "start_line": 78,
    "end_line": 84,
    "code": "@Test\r\npublic void testClassWithBaseFieldSerialization() {\r\n    ClassWithBaseField sub = new ClassWithBaseField(new Sub());\r\n    JsonObject json = (JsonObject) gson.toJsonTree(sub);\r\n    JsonElement base = json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);\r\n    assertThat(base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testClassWithBaseArrayFieldSerialization",
    "start_line": 86,
    "end_line": 96,
    "code": "@Test\r\npublic void testClassWithBaseArrayFieldSerialization() {\r\n    Base[] baseClasses = new Base[] { new Sub(), new Sub() };\r\n    ClassWithBaseArrayField sub = new ClassWithBaseArrayField(baseClasses);\r\n    JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\r\n    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\r\n    for (JsonElement element : bases) {\r\n        assertThat(element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testClassWithBaseCollectionFieldSerialization",
    "start_line": 98,
    "end_line": 110,
    "code": "@Test\r\npublic void testClassWithBaseCollectionFieldSerialization() {\r\n    Collection<Base> baseClasses = new ArrayList<>();\r\n    baseClasses.add(new Sub());\r\n    baseClasses.add(new Sub());\r\n    ClassWithBaseCollectionField sub = new ClassWithBaseCollectionField(baseClasses);\r\n    JsonObject json = gson.toJsonTree(sub).getAsJsonObject();\r\n    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();\r\n    for (JsonElement element : bases) {\r\n        assertThat(element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsSub",
    "start_line": 112,
    "end_line": 117,
    "code": "@Test\r\npublic void testBaseSerializedAsSub() {\r\n    Base base = new Sub();\r\n    JsonObject json = gson.toJsonTree(base).getAsJsonObject();\r\n    assertThat(json.get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsSubForToJsonMethod",
    "start_line": 119,
    "end_line": 124,
    "code": "@Test\r\npublic void testBaseSerializedAsSubForToJsonMethod() {\r\n    Base base = new Sub();\r\n    String json = gson.toJson(base);\r\n    assertThat(json).contains(Sub.SUB_NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsBaseWhenSpecifiedWithExplicitType",
    "start_line": 126,
    "end_line": 132,
    "code": "@Test\r\npublic void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {\r\n    Base base = new Sub();\r\n    JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();\r\n    assertThat(json.get(Base.BASE_FIELD_KEY).getAsString()).isEqualTo(Base.BASE_NAME);\r\n    assertThat(json.get(Sub.SUB_FIELD_KEY)).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod",
    "start_line": 134,
    "end_line": 140,
    "code": "@Test\r\npublic void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod() {\r\n    Base base = new Sub();\r\n    String json = gson.toJson(base, Base.class);\r\n    assertThat(json).contains(Base.BASE_NAME);\r\n    assertThat(json).doesNotContain(Sub.SUB_FIELD_KEY);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsSubWhenSpecifiedWithExplicitType",
    "start_line": 142,
    "end_line": 147,
    "code": "@Test\r\npublic void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {\r\n    Base base = new Sub();\r\n    JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();\r\n    assertThat(json.get(Sub.SUB_FIELD_KEY).getAsString()).isEqualTo(Sub.SUB_NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod",
    "start_line": 149,
    "end_line": 154,
    "code": "@Test\r\npublic void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod() {\r\n    Base base = new Sub();\r\n    String json = gson.toJson(base, Sub.class);\r\n    assertThat(json).contains(Sub.SUB_NAME);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testSubInterfacesOfCollectionSerialization",
    "start_line": 170,
    "end_line": 196,
    "code": "@Test\r\n@SuppressWarnings(\"JdkObsolete\")\r\npublic void testSubInterfacesOfCollectionSerialization() {\r\n    List<Integer> list = new LinkedList<>();\r\n    list.add(0);\r\n    list.add(1);\r\n    list.add(2);\r\n    list.add(3);\r\n    Queue<Long> queue = new LinkedList<>();\r\n    queue.add(0L);\r\n    queue.add(1L);\r\n    queue.add(2L);\r\n    queue.add(3L);\r\n    Set<Float> set = new TreeSet<>();\r\n    set.add(0.1F);\r\n    set.add(0.2F);\r\n    set.add(0.3F);\r\n    set.add(0.4F);\r\n    SortedSet<Character> sortedSet = new TreeSet<>();\r\n    sortedSet.add('a');\r\n    sortedSet.add('b');\r\n    sortedSet.add('c');\r\n    sortedSet.add('d');\r\n    ClassWithSubInterfacesOfCollection target = new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);\r\n    assertThat(gson.toJson(target)).isEqualTo(target.getExpectedJson());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  },
  {
    "type": "method",
    "name": "testSubInterfacesOfCollectionDeserialization",
    "start_line": 198,
    "end_line": 210,
    "code": "@Test\r\npublic void testSubInterfacesOfCollectionDeserialization() {\r\n    String json = \"{\\\"list\\\":[0,1,2,3],\\\"queue\\\":[0,1,2,3],\\\"set\\\":[0.1,0.2,0.3,0.4],\" + \"\\\"sortedSet\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"]\" + \"}\";\r\n    ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);\r\n    assertThat(target.listContains(0, 1, 2, 3)).isTrue();\r\n    assertThat(target.queueContains(0, 1, 2, 3)).isTrue();\r\n    assertThat(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)).isTrue();\r\n    assertThat(target.sortedSetContains('a', 'b', 'c', 'd')).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\InheritanceTest.java"
  }
]