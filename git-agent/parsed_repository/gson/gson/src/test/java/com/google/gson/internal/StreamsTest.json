[
  {
    "type": "package",
    "name": "com.google.gson.internal",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "import",
    "name": "java.io.Writer",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.Writer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 24,
    "end_line": 24,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "class",
    "name": "StreamsTest",
    "start_line": 26,
    "end_line": 68,
    "code": "public class StreamsTest {\r\n\r\n    @Test\r\n    public void testWriterForAppendable() throws IOException {\r\n        StringBuilder stringBuilder = new StringBuilder();\r\n        Writer writer = Streams.writerForAppendable(stringBuilder);\r\n        writer.append('a');\r\n        writer.append('\\u1234');\r\n        writer.append(\"test\");\r\n        // test custom null handling mandated by `append`\r\n        writer.append(null);\r\n        writer.append(\"abcdef\", 2, 4);\r\n        // test custom null handling mandated by `append`\r\n        writer.append(null, 1, 3);\r\n        writer.append(',');\r\n        writer.write('a');\r\n        writer.write('\\u1234');\r\n        // Should only consider the 16 low-order bits\r\n        writer.write(0x4321_1234);\r\n        writer.append(',');\r\n        writer.write(\"chars\".toCharArray());\r\n        assertThrows(NullPointerException.class, () -> writer.write((char[]) null));\r\n        writer.write(\"chars\".toCharArray(), 1, 2);\r\n        assertThrows(NullPointerException.class, () -> writer.write((char[]) null, 1, 2));\r\n        writer.append(',');\r\n        writer.write(\"string\");\r\n        assertThrows(NullPointerException.class, () -> writer.write((String) null));\r\n        writer.write(\"string\", 1, 2);\r\n        assertThrows(NullPointerException.class, () -> writer.write((String) null, 1, 2));\r\n        String actualOutput = stringBuilder.toString();\r\n        assertThat(actualOutput).isEqualTo(\"a\\u1234testnullcdul,a\\u1234\\u1234,charsha,stringtr\");\r\n        writer.flush();\r\n        writer.close();\r\n        // flush() and close() calls should have had no effect\r\n        assertThat(stringBuilder.toString()).isEqualTo(actualOutput);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  },
  {
    "type": "method",
    "name": "testWriterForAppendable",
    "start_line": 27,
    "end_line": 67,
    "code": "@Test\r\npublic void testWriterForAppendable() throws IOException {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    Writer writer = Streams.writerForAppendable(stringBuilder);\r\n    writer.append('a');\r\n    writer.append('\\u1234');\r\n    writer.append(\"test\");\r\n    // test custom null handling mandated by `append`\r\n    writer.append(null);\r\n    writer.append(\"abcdef\", 2, 4);\r\n    // test custom null handling mandated by `append`\r\n    writer.append(null, 1, 3);\r\n    writer.append(',');\r\n    writer.write('a');\r\n    writer.write('\\u1234');\r\n    // Should only consider the 16 low-order bits\r\n    writer.write(0x4321_1234);\r\n    writer.append(',');\r\n    writer.write(\"chars\".toCharArray());\r\n    assertThrows(NullPointerException.class, () -> writer.write((char[]) null));\r\n    writer.write(\"chars\".toCharArray(), 1, 2);\r\n    assertThrows(NullPointerException.class, () -> writer.write((char[]) null, 1, 2));\r\n    writer.append(',');\r\n    writer.write(\"string\");\r\n    assertThrows(NullPointerException.class, () -> writer.write((String) null));\r\n    writer.write(\"string\", 1, 2);\r\n    assertThrows(NullPointerException.class, () -> writer.write((String) null, 1, 2));\r\n    String actualOutput = stringBuilder.toString();\r\n    assertThat(actualOutput).isEqualTo(\"a\\u1234testnullcdul,a\\u1234\\u1234,charsha,stringtr\");\r\n    writer.flush();\r\n    writer.close();\r\n    // flush() and close() calls should have had no effect\r\n    assertThat(stringBuilder.toString()).isEqualTo(actualOutput);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\StreamsTest.java"
  }
]