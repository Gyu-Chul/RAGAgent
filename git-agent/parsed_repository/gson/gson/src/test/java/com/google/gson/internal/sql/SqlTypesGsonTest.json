[
  {
    "type": "package",
    "name": "com.google.gson.internal.sql",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.sql;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.functional.DefaultTypeAdaptersTest",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.functional.DefaultTypeAdaptersTest;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "java.sql.Time",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.sql.Time;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "java.sql.Timestamp",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.sql.Timestamp;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "java.util.TimeZone",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.TimeZone;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.After",
    "start_line": 28,
    "end_line": 28,
    "code": "import org.junit.After;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 29,
    "end_line": 29,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 30,
    "end_line": 30,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "class",
    "name": "SqlTypesGsonTest",
    "start_line": 33,
    "end_line": 148,
    "code": "// Suppression for `java.sql.Date` to make it explicit that this is not `java.util.Date`\r\n@SuppressWarnings(\"UnnecessarilyFullyQualified\")\r\npublic class SqlTypesGsonTest {\r\n\r\n    private Gson gson;\r\n\r\n    private TimeZone oldTimeZone;\r\n\r\n    private Locale oldLocale;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        this.oldTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n        this.oldLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        gson = new Gson();\r\n    }\r\n\r\n    @After\r\n    public void tearDown() throws Exception {\r\n        TimeZone.setDefault(oldTimeZone);\r\n        Locale.setDefault(oldLocale);\r\n    }\r\n\r\n    @Test\r\n    public void testNullSerializationAndDeserialization() {\r\n        testNullSerializationAndDeserialization(java.sql.Date.class);\r\n        testNullSerializationAndDeserialization(Time.class);\r\n        testNullSerializationAndDeserialization(Timestamp.class);\r\n    }\r\n\r\n    private void testNullSerializationAndDeserialization(Class<?> c) {\r\n        DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(gson, c);\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlDateSerialization() {\r\n        java.sql.Date instant = new java.sql.Date(1259875082000L);\r\n        String json = gson.toJson(instant);\r\n        assertThat(json).isEqualTo(\"\\\"Dec 3, 2009\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlDateDeserialization() {\r\n        String json = \"'Dec 3, 2009'\";\r\n        java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);\r\n        DefaultTypeAdaptersTest.assertEqualsDate(extracted, 2009, 11, 3);\r\n    }\r\n\r\n    // http://code.google.com/p/google-gson/issues/detail?id=230\r\n    @Test\r\n    public void testSqlDateSerialization() throws Exception {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        try {\r\n            java.sql.Date sqlDate = new java.sql.Date(0L);\r\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n            String json = gson.toJson(sqlDate, Timestamp.class);\r\n            assertThat(json).isEqualTo(\"\\\"1970-01-01\\\"\");\r\n            assertThat(gson.fromJson(\"\\\"1970-01-01\\\"\", java.sql.Date.class).getTime()).isEqualTo(0);\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlTimeSerialization() {\r\n        Time now = new Time(1259875082000L);\r\n        String json = gson.toJson(now);\r\n        assertThat(json).isEqualTo(\"\\\"01:18:02 PM\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlTimeDeserialization() {\r\n        String json = \"'1:18:02 PM'\";\r\n        Time extracted = gson.fromJson(json, Time.class);\r\n        DefaultTypeAdaptersTest.assertEqualsTime(extracted, 13, 18, 2);\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlTimestampSerialization() {\r\n        Timestamp now = new java.sql.Timestamp(1259875082000L);\r\n        String json = gson.toJson(now);\r\n        // The exact format of the serialized date-time string depends on the JDK version. The pattern\r\n        // here allows for an optional comma after the date, and what might be U+202F (Narrow No-Break\r\n        // Space) before \"PM\".\r\n        assertThat(json).matches(\"\\\"Dec 3, 2009,? 1:18:02\\\\hPM\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testDefaultSqlTimestampDeserialization() {\r\n        String json = \"'Dec 3, 2009 1:18:02 PM'\";\r\n        Timestamp extracted = gson.fromJson(json, Timestamp.class);\r\n        DefaultTypeAdaptersTest.assertEqualsDate(extracted, 2009, 11, 3);\r\n        DefaultTypeAdaptersTest.assertEqualsTime(extracted, 13, 18, 2);\r\n    }\r\n\r\n    // http://code.google.com/p/google-gson/issues/detail?id=230\r\n    @Test\r\n    public void testTimestampSerialization() throws Exception {\r\n        TimeZone defaultTimeZone = TimeZone.getDefault();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        Locale defaultLocale = Locale.getDefault();\r\n        Locale.setDefault(Locale.US);\r\n        try {\r\n            Timestamp timestamp = new Timestamp(0L);\r\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n            String json = gson.toJson(timestamp, Timestamp.class);\r\n            assertThat(json).isEqualTo(\"\\\"1970-01-01\\\"\");\r\n            assertThat(gson.fromJson(\"\\\"1970-01-01\\\"\", Timestamp.class).getTime()).isEqualTo(0);\r\n        } finally {\r\n            TimeZone.setDefault(defaultTimeZone);\r\n            Locale.setDefault(defaultLocale);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 35,
    "end_line": 35,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "field",
    "name": "oldTimeZone",
    "start_line": 36,
    "end_line": 36,
    "code": "private TimeZone oldTimeZone;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "field",
    "name": "oldLocale",
    "start_line": 37,
    "end_line": 37,
    "code": "private Locale oldLocale;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 39,
    "end_line": 46,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    this.oldTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\r\n    this.oldLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "tearDown",
    "start_line": 48,
    "end_line": 52,
    "code": "@After\r\npublic void tearDown() throws Exception {\r\n    TimeZone.setDefault(oldTimeZone);\r\n    Locale.setDefault(oldLocale);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testNullSerializationAndDeserialization",
    "start_line": 54,
    "end_line": 59,
    "code": "@Test\r\npublic void testNullSerializationAndDeserialization() {\r\n    testNullSerializationAndDeserialization(java.sql.Date.class);\r\n    testNullSerializationAndDeserialization(Time.class);\r\n    testNullSerializationAndDeserialization(Timestamp.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testNullSerializationAndDeserialization",
    "start_line": 61,
    "end_line": 63,
    "code": "private void testNullSerializationAndDeserialization(Class<?> c) {\r\n    DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(gson, c);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlDateSerialization",
    "start_line": 65,
    "end_line": 70,
    "code": "@Test\r\npublic void testDefaultSqlDateSerialization() {\r\n    java.sql.Date instant = new java.sql.Date(1259875082000L);\r\n    String json = gson.toJson(instant);\r\n    assertThat(json).isEqualTo(\"\\\"Dec 3, 2009\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlDateDeserialization",
    "start_line": 72,
    "end_line": 77,
    "code": "@Test\r\npublic void testDefaultSqlDateDeserialization() {\r\n    String json = \"'Dec 3, 2009'\";\r\n    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);\r\n    DefaultTypeAdaptersTest.assertEqualsDate(extracted, 2009, 11, 3);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testSqlDateSerialization",
    "start_line": 80,
    "end_line": 96,
    "code": "// http://code.google.com/p/google-gson/issues/detail?id=230\r\n@Test\r\npublic void testSqlDateSerialization() throws Exception {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    try {\r\n        java.sql.Date sqlDate = new java.sql.Date(0L);\r\n        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n        String json = gson.toJson(sqlDate, Timestamp.class);\r\n        assertThat(json).isEqualTo(\"\\\"1970-01-01\\\"\");\r\n        assertThat(gson.fromJson(\"\\\"1970-01-01\\\"\", java.sql.Date.class).getTime()).isEqualTo(0);\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlTimeSerialization",
    "start_line": 98,
    "end_line": 103,
    "code": "@Test\r\npublic void testDefaultSqlTimeSerialization() {\r\n    Time now = new Time(1259875082000L);\r\n    String json = gson.toJson(now);\r\n    assertThat(json).isEqualTo(\"\\\"01:18:02 PM\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlTimeDeserialization",
    "start_line": 105,
    "end_line": 110,
    "code": "@Test\r\npublic void testDefaultSqlTimeDeserialization() {\r\n    String json = \"'1:18:02 PM'\";\r\n    Time extracted = gson.fromJson(json, Time.class);\r\n    DefaultTypeAdaptersTest.assertEqualsTime(extracted, 13, 18, 2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlTimestampSerialization",
    "start_line": 112,
    "end_line": 120,
    "code": "@Test\r\npublic void testDefaultSqlTimestampSerialization() {\r\n    Timestamp now = new java.sql.Timestamp(1259875082000L);\r\n    String json = gson.toJson(now);\r\n    // The exact format of the serialized date-time string depends on the JDK version. The pattern\r\n    // here allows for an optional comma after the date, and what might be U+202F (Narrow No-Break\r\n    // Space) before \"PM\".\r\n    assertThat(json).matches(\"\\\"Dec 3, 2009,? 1:18:02\\\\hPM\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultSqlTimestampDeserialization",
    "start_line": 122,
    "end_line": 128,
    "code": "@Test\r\npublic void testDefaultSqlTimestampDeserialization() {\r\n    String json = \"'Dec 3, 2009 1:18:02 PM'\";\r\n    Timestamp extracted = gson.fromJson(json, Timestamp.class);\r\n    DefaultTypeAdaptersTest.assertEqualsDate(extracted, 2009, 11, 3);\r\n    DefaultTypeAdaptersTest.assertEqualsTime(extracted, 13, 18, 2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  },
  {
    "type": "method",
    "name": "testTimestampSerialization",
    "start_line": 131,
    "end_line": 147,
    "code": "// http://code.google.com/p/google-gson/issues/detail?id=230\r\n@Test\r\npublic void testTimestampSerialization() throws Exception {\r\n    TimeZone defaultTimeZone = TimeZone.getDefault();\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n    Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    try {\r\n        Timestamp timestamp = new Timestamp(0L);\r\n        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\n        String json = gson.toJson(timestamp, Timestamp.class);\r\n        assertThat(json).isEqualTo(\"\\\"1970-01-01\\\"\");\r\n        assertThat(gson.fromJson(\"\\\"1970-01-01\\\"\", Timestamp.class).getTime()).isEqualTo(0);\r\n    } finally {\r\n        TimeZone.setDefault(defaultTimeZone);\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\sql\\SqlTypesGsonTest.java"
  }
]