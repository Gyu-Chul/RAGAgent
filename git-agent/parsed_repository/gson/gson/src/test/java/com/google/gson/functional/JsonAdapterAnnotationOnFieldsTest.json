[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ExclusionStrategy",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.ExclusionStrategy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.FieldAttributes",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.FieldAttributes;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.JsonAdapter",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.annotations.JsonAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 35,
    "end_line": 35,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 36,
    "end_line": 36,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 37,
    "end_line": 37,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 38,
    "end_line": 38,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 39,
    "end_line": 39,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 40,
    "end_line": 40,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 41,
    "end_line": 41,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 42,
    "end_line": 42,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 43,
    "end_line": 43,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "class",
    "name": "JsonAdapterAnnotationOnFieldsTest",
    "start_line": 46,
    "end_line": 743,
    "code": "/**\r\n * Functional tests for the {@link JsonAdapter} annotation on fields.\r\n */\r\npublic final class JsonAdapterAnnotationOnFieldsTest {\r\n\r\n    @Test\r\n    public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\r\n        assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserClassAnnotationAdapter\\\"}\");\r\n        Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\r\n        assertThat(computer.user.name).isEqualTo(\"UserClassAnnotationAdapter\");\r\n    }\r\n\r\n    @Test\r\n    public void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Gizmo(new Part(\"Part\")));\r\n        assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\");\r\n        Gizmo computer = gson.fromJson(\"{'part':'Part'}\", Gizmo.class);\r\n        assertThat(computer.part.name).isEqualTo(\"GizmoPartTypeAdapterFactory\");\r\n    }\r\n\r\n    @Test\r\n    public void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new RegisteredUserAdapter()).create();\r\n        String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\r\n        assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"RegisteredUserAdapter\\\"}\");\r\n        Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\r\n        assertThat(computer.user.name).isEqualTo(\"RegisteredUserAdapter\");\r\n    }\r\n\r\n    @Test\r\n    public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(Part.class, new TypeAdapter<Part>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Part part) {\r\n                throw new AssertionError();\r\n            }\r\n\r\n            @Override\r\n            public Part read(JsonReader in) {\r\n                throw new AssertionError();\r\n            }\r\n        }).create();\r\n        String json = gson.toJson(new Gadget(new Part(\"screen\")));\r\n        assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\");\r\n        Gadget gadget = gson.fromJson(\"{'part':'screen'}\", Gadget.class);\r\n        assertThat(gadget.part.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n    }\r\n\r\n    @Test\r\n    public void testFieldAnnotationTakesPrecedenceOverClassAnnotation() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Computer2(new User(\"Inderjeet Singh\")));\r\n        assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserFieldAnnotationAdapter\\\"}\");\r\n        Computer2 target = gson.fromJson(\"{'user':'Interjeet Singh'}\", Computer2.class);\r\n        assertThat(target.user.name).isEqualTo(\"UserFieldAnnotationAdapter\");\r\n    }\r\n\r\n    private static final class Gadget {\r\n\r\n        @JsonAdapter(PartJsonFieldAnnotationAdapter.class)\r\n        final Part part;\r\n\r\n        Gadget(Part part) {\r\n            this.part = part;\r\n        }\r\n    }\r\n\r\n    private static final class Gizmo {\r\n\r\n        @JsonAdapter(GizmoPartTypeAdapterFactory.class)\r\n        final Part part;\r\n\r\n        Gizmo(Part part) {\r\n            this.part = part;\r\n        }\r\n    }\r\n\r\n    private static final class Part {\r\n\r\n        final String name;\r\n\r\n        public Part(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    private static class PartJsonFieldAnnotationAdapter extends TypeAdapter<Part> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Part part) throws IOException {\r\n            out.value(\"PartJsonFieldAnnotationAdapter\");\r\n        }\r\n\r\n        @Override\r\n        public Part read(JsonReader in) throws IOException {\r\n            String unused = in.nextString();\r\n            return new Part(\"PartJsonFieldAnnotationAdapter\");\r\n        }\r\n    }\r\n\r\n    private static class GizmoPartTypeAdapterFactory implements TypeAdapterFactory {\r\n\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            return new TypeAdapter<>() {\r\n\r\n                @Override\r\n                public void write(JsonWriter out, T value) throws IOException {\r\n                    out.value(\"GizmoPartTypeAdapterFactory\");\r\n                }\r\n\r\n                @SuppressWarnings(\"unchecked\")\r\n                @Override\r\n                public T read(JsonReader in) throws IOException {\r\n                    String unused = in.nextString();\r\n                    return (T) new Part(\"GizmoPartTypeAdapterFactory\");\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static final class Computer {\r\n\r\n        final User user;\r\n\r\n        Computer(User user) {\r\n            this.user = user;\r\n        }\r\n    }\r\n\r\n    @JsonAdapter(UserClassAnnotationAdapter.class)\r\n    private static class User {\r\n\r\n        public final String name;\r\n\r\n        private User(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    private static class UserClassAnnotationAdapter extends TypeAdapter<User> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, User user) throws IOException {\r\n            out.value(\"UserClassAnnotationAdapter\");\r\n        }\r\n\r\n        @Override\r\n        public User read(JsonReader in) throws IOException {\r\n            String unused = in.nextString();\r\n            return new User(\"UserClassAnnotationAdapter\");\r\n        }\r\n    }\r\n\r\n    private static final class Computer2 {\r\n\r\n        // overrides the JsonAdapter annotation of User with this\r\n        @JsonAdapter(UserFieldAnnotationAdapter.class)\r\n        final User user;\r\n\r\n        Computer2(User user) {\r\n            this.user = user;\r\n        }\r\n    }\r\n\r\n    private static final class UserFieldAnnotationAdapter extends TypeAdapter<User> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, User user) throws IOException {\r\n            out.value(\"UserFieldAnnotationAdapter\");\r\n        }\r\n\r\n        @Override\r\n        public User read(JsonReader in) throws IOException {\r\n            String unused = in.nextString();\r\n            return new User(\"UserFieldAnnotationAdapter\");\r\n        }\r\n    }\r\n\r\n    private static final class RegisteredUserAdapter extends TypeAdapter<User> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, User user) throws IOException {\r\n            out.value(\"RegisteredUserAdapter\");\r\n        }\r\n\r\n        @Override\r\n        public User read(JsonReader in) throws IOException {\r\n            String unused = in.nextString();\r\n            return new User(\"RegisteredUserAdapter\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testJsonAdapterInvokedOnlyForAnnotatedFields() {\r\n        Gson gson = new Gson();\r\n        String json = \"{'part1':'name','part2':{'name':'name2'}}\";\r\n        GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);\r\n        assertThat(gadget.part1.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n        assertThat(gadget.part2.name).isEqualTo(\"name2\");\r\n    }\r\n\r\n    private static final class GadgetWithTwoParts {\r\n\r\n        @JsonAdapter(PartJsonFieldAnnotationAdapter.class)\r\n        final Part part1;\r\n\r\n        // Doesn't have the JsonAdapter annotation\r\n        final Part part2;\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        GadgetWithTwoParts(Part part1, Part part2) {\r\n            this.part1 = part1;\r\n            this.part2 = part2;\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testJsonAdapterWrappedInNullSafeAsRequested() {\r\n        Gson gson = new Gson();\r\n        String fromJson = \"{'part':null}\";\r\n        GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\r\n        assertThat(gadget.part).isNull();\r\n        String toJson = gson.toJson(gadget);\r\n        assertThat(toJson).doesNotContain(\"PartJsonFieldAnnotationAdapter\");\r\n    }\r\n\r\n    private static final class GadgetWithOptionalPart {\r\n\r\n        @JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)\r\n        final Part part;\r\n\r\n        private GadgetWithOptionalPart(Part part) {\r\n            this.part = part;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Regression test contributed through https://github.com/google/gson/issues/831\r\n     */\r\n    @Test\r\n    public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new GadgetWithOptionalPart(new Part(\"foo\")));\r\n        assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\");\r\n        GadgetWithOptionalPart gadget = gson.fromJson(\"{'part':'foo'}\", GadgetWithOptionalPart.class);\r\n        assertThat(gadget.part.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n    }\r\n\r\n    /**\r\n     * Regression test contributed through https://github.com/google/gson/issues/831\r\n     */\r\n    @Test\r\n    public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new GadgetWithPrimitivePart(42));\r\n        assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"42\\\"}\");\r\n        GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\r\n        assertThat(gadget.part).isEqualTo(42);\r\n    }\r\n\r\n    private static final class GadgetWithPrimitivePart {\r\n\r\n        @JsonAdapter(LongToStringTypeAdapterFactory.class)\r\n        final long part;\r\n\r\n        private GadgetWithPrimitivePart(long part) {\r\n            this.part = part;\r\n        }\r\n    }\r\n\r\n    private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {\r\n\r\n        static final TypeAdapter<Long> ADAPTER = new TypeAdapter<>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Long value) throws IOException {\r\n                out.value(value.toString());\r\n            }\r\n\r\n            @Override\r\n            public Long read(JsonReader in) throws IOException {\r\n                return in.nextLong();\r\n            }\r\n        };\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            Class<?> cls = type.getRawType();\r\n            if (Long.class.isAssignableFrom(cls)) {\r\n                return (TypeAdapter<T>) ADAPTER;\r\n            } else if (long.class.isAssignableFrom(cls)) {\r\n                return (TypeAdapter<T>) ADAPTER;\r\n            }\r\n            throw new IllegalStateException(\"Non-long field of type \" + type + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testFieldAnnotationWorksForParameterizedType() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\r\n        assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\");\r\n        Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\r\n        assertThat(computer.part.get(0).name).isEqualTo(\"GizmoPartTypeAdapterFactory\");\r\n    }\r\n\r\n    private static final class Gizmo2 {\r\n\r\n        @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)\r\n        List<Part> part;\r\n\r\n        Gizmo2(List<Part> part) {\r\n            this.part = part;\r\n        }\r\n    }\r\n\r\n    private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {\r\n\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            return new TypeAdapter<>() {\r\n\r\n                @Override\r\n                public void write(JsonWriter out, T value) throws IOException {\r\n                    out.value(\"GizmoPartTypeAdapterFactory\");\r\n                }\r\n\r\n                @SuppressWarnings(\"unchecked\")\r\n                @Override\r\n                public T read(JsonReader in) throws IOException {\r\n                    String unused = in.nextString();\r\n                    return (T) Arrays.asList(new Part(\"GizmoPartTypeAdapterFactory\"));\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verify that {@link JsonAdapter} annotation can overwrite adapters which can normally not be\r\n     * overwritten (in this case adapter for {@link JsonElement}).\r\n     */\r\n    @Test\r\n    public void testOverwriteBuiltIn() {\r\n        BuiltInOverwriting obj = new BuiltInOverwriting();\r\n        obj.f = new JsonPrimitive(true);\r\n        String json = new Gson().toJson(obj);\r\n        assertThat(json).isEqualTo(\"{\\\"f\\\":\\\"\" + JsonElementAdapter.SERIALIZED + \"\\\"}\");\r\n        BuiltInOverwriting deserialized = new Gson().fromJson(\"{\\\"f\\\": 2}\", BuiltInOverwriting.class);\r\n        assertThat(deserialized.f).isEqualTo(JsonElementAdapter.DESERIALIZED);\r\n    }\r\n\r\n    private static class BuiltInOverwriting {\r\n\r\n        @JsonAdapter(JsonElementAdapter.class)\r\n        JsonElement f;\r\n    }\r\n\r\n    private static class JsonElementAdapter extends TypeAdapter<JsonElement> {\r\n\r\n        static final JsonPrimitive DESERIALIZED = new JsonPrimitive(\"deserialized hardcoded\");\r\n\r\n        @Override\r\n        public JsonElement read(JsonReader in) throws IOException {\r\n            in.skipValue();\r\n            return DESERIALIZED;\r\n        }\r\n\r\n        static final String SERIALIZED = \"serialized hardcoded\";\r\n\r\n        @Override\r\n        public void write(JsonWriter out, JsonElement value) throws IOException {\r\n            out.value(SERIALIZED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verify that exclusion strategy preventing serialization has higher precedence than {@link\r\n     * JsonAdapter} annotation.\r\n     */\r\n    @Test\r\n    public void testExcludeSerializePrecedence() {\r\n        Gson gson = new GsonBuilder().addSerializationExclusionStrategy(new ExclusionStrategy() {\r\n\r\n            @Override\r\n            public boolean shouldSkipField(FieldAttributes f) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldSkipClass(Class<?> clazz) {\r\n                return false;\r\n            }\r\n        }).create();\r\n        DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n        obj.f = 1;\r\n        obj.f2 = new JsonPrimitive(2);\r\n        obj.f3 = new JsonPrimitive(true);\r\n        String json = gson.toJson(obj);\r\n        assertThat(json).isEqualTo(\"{}\");\r\n        DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n        assertThat(deserialized.f).isEqualTo(Integer.valueOf(1));\r\n        assertThat(deserialized.f2).isEqualTo(new JsonPrimitive(2));\r\n        // Verify that for deserialization type adapter specified by @JsonAdapter is used\r\n        assertThat(deserialized.f3).isEqualTo(JsonElementAdapter.DESERIALIZED);\r\n    }\r\n\r\n    /**\r\n     * Verify that exclusion strategy preventing deserialization has higher precedence than {@link\r\n     * JsonAdapter} annotation.\r\n     */\r\n    @Test\r\n    public void testExcludeDeserializePrecedence() {\r\n        Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(new ExclusionStrategy() {\r\n\r\n            @Override\r\n            public boolean shouldSkipField(FieldAttributes f) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldSkipClass(Class<?> clazz) {\r\n                return false;\r\n            }\r\n        }).create();\r\n        DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n        obj.f = 1;\r\n        obj.f2 = new JsonPrimitive(2);\r\n        obj.f3 = new JsonPrimitive(true);\r\n        String json = gson.toJson(obj);\r\n        // Verify that for serialization type adapters specified by @JsonAdapter are used\r\n        assertThat(json).isEqualTo(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":\\\"\" + JsonElementAdapter.SERIALIZED + \"\\\"}\");\r\n        DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n        assertThat(deserialized.f).isNull();\r\n        assertThat(deserialized.f2).isNull();\r\n        assertThat(deserialized.f3).isNull();\r\n    }\r\n\r\n    /**\r\n     * Verify that exclusion strategy preventing serialization and deserialization has higher\r\n     * precedence than {@link JsonAdapter} annotation.\r\n     *\r\n     * <p>This is a separate test method because {@link ReflectiveTypeAdapterFactory} handles this\r\n     * case differently.\r\n     */\r\n    @Test\r\n    public void testExcludePrecedence() {\r\n        Gson gson = new GsonBuilder().setExclusionStrategies(new ExclusionStrategy() {\r\n\r\n            @Override\r\n            public boolean shouldSkipField(FieldAttributes f) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldSkipClass(Class<?> clazz) {\r\n                return false;\r\n            }\r\n        }).create();\r\n        DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n        obj.f = 1;\r\n        obj.f2 = new JsonPrimitive(2);\r\n        obj.f3 = new JsonPrimitive(true);\r\n        String json = gson.toJson(obj);\r\n        assertThat(json).isEqualTo(\"{}\");\r\n        DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n        assertThat(deserialized.f).isNull();\r\n        assertThat(deserialized.f2).isNull();\r\n        assertThat(deserialized.f3).isNull();\r\n    }\r\n\r\n    private static class DelegatingAndOverwriting {\r\n\r\n        @JsonAdapter(DelegatingAdapterFactory.class)\r\n        Integer f;\r\n\r\n        @JsonAdapter(DelegatingAdapterFactory.class)\r\n        JsonElement f2;\r\n\r\n        // Also have non-delegating adapter to make tests handle both cases\r\n        @JsonAdapter(JsonElementAdapter.class)\r\n        JsonElement f3;\r\n\r\n        static class DelegatingAdapterFactory implements TypeAdapterFactory {\r\n\r\n            @Override\r\n            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n                return gson.getDelegateAdapter(this, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies that {@link TypeAdapterFactory} specified by {@code @JsonAdapter} can call {@link\r\n     * Gson#getDelegateAdapter} without any issues, despite the factory not being directly registered\r\n     * on Gson.\r\n     */\r\n    @Test\r\n    public void testDelegatingAdapterFactory() {\r\n        @SuppressWarnings(\"unchecked\")\r\n        WithDelegatingFactory<String> deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", WithDelegatingFactory.class);\r\n        assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n        deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", new TypeToken<WithDelegatingFactory<String>>() {\r\n        });\r\n        assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n        WithDelegatingFactory<String> serialized = new WithDelegatingFactory<>();\r\n        serialized.f = \"value\";\r\n        assertThat(new Gson().toJson(serialized)).isEqualTo(\"{\\\"f\\\":\\\"value-custom\\\"}\");\r\n    }\r\n\r\n    private static class WithDelegatingFactory<T> {\r\n\r\n        // suppress Error Prone warning; should be clear that `Factory` refers to nested class\r\n        @SuppressWarnings(\"SameNameButDifferent\")\r\n        @JsonAdapter(Factory.class)\r\n        T f;\r\n\r\n        static class Factory implements TypeAdapterFactory {\r\n\r\n            @SuppressWarnings(\"unchecked\")\r\n            @Override\r\n            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n                TypeAdapter<String> delegate = (TypeAdapter<String>) gson.getDelegateAdapter(this, type);\r\n                return (TypeAdapter<T>) new TypeAdapter<String>() {\r\n\r\n                    @Override\r\n                    public String read(JsonReader in) throws IOException {\r\n                        // Perform custom deserialization\r\n                        return delegate.read(in) + \"-custom\";\r\n                    }\r\n\r\n                    @Override\r\n                    public void write(JsonWriter out, String value) throws IOException {\r\n                        // Perform custom serialization\r\n                        delegate.write(out, value + \"-custom\");\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Similar to {@link #testDelegatingAdapterFactory}, except that the delegate is not looked up in\r\n     * {@code create} but instead in the adapter methods.\r\n     */\r\n    @Test\r\n    public void testDelegatingAdapterFactory_Delayed() {\r\n        WithDelayedDelegatingFactory deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", WithDelayedDelegatingFactory.class);\r\n        assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n        WithDelayedDelegatingFactory serialized = new WithDelayedDelegatingFactory();\r\n        serialized.f = \"value\";\r\n        assertThat(new Gson().toJson(serialized)).isEqualTo(\"{\\\"f\\\":\\\"value-custom\\\"}\");\r\n    }\r\n\r\n    // suppress Error Prone warning; should be clear that `Factory` refers to nested class\r\n    @SuppressWarnings(\"SameNameButDifferent\")\r\n    private static class WithDelayedDelegatingFactory {\r\n\r\n        @JsonAdapter(Factory.class)\r\n        String f;\r\n\r\n        static class Factory implements TypeAdapterFactory {\r\n\r\n            @SuppressWarnings(\"unchecked\")\r\n            @Override\r\n            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n                return (TypeAdapter<T>) new TypeAdapter<String>() {\r\n\r\n                    private TypeAdapter<String> delegate() {\r\n                        return (TypeAdapter<String>) gson.getDelegateAdapter(Factory.this, type);\r\n                    }\r\n\r\n                    @Override\r\n                    public String read(JsonReader in) throws IOException {\r\n                        // Perform custom deserialization\r\n                        return delegate().read(in) + \"-custom\";\r\n                    }\r\n\r\n                    @Override\r\n                    public void write(JsonWriter out, String value) throws IOException {\r\n                        // Perform custom serialization\r\n                        delegate().write(out, value + \"-custom\");\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests usage of {@link Gson#getAdapter(TypeToken)} in the {@code create} method of the factory.\r\n     * Existing code was using that as workaround because {@link Gson#getDelegateAdapter} previously\r\n     * did not work in combination with {@code @JsonAdapter}, see\r\n     * https://github.com/google/gson/issues/1028.\r\n     */\r\n    @Test\r\n    public void testGetAdapterDelegation() {\r\n        Gson gson = new Gson();\r\n        GetAdapterDelegation deserialized = gson.fromJson(\"{\\\"f\\\":\\\"de\\\"}\", GetAdapterDelegation.class);\r\n        assertThat(deserialized.f).isEqualTo(\"de-custom\");\r\n        String json = gson.toJson(new GetAdapterDelegation(\"se\"));\r\n        assertThat(json).isEqualTo(\"{\\\"f\\\":\\\"se-custom\\\"}\");\r\n    }\r\n\r\n    private static class GetAdapterDelegation {\r\n\r\n        // suppress Error Prone warning; should be clear that `Factory` refers to nested class\r\n        @SuppressWarnings(\"SameNameButDifferent\")\r\n        @JsonAdapter(Factory.class)\r\n        String f;\r\n\r\n        GetAdapterDelegation(String f) {\r\n            this.f = f;\r\n        }\r\n\r\n        static class Factory implements TypeAdapterFactory {\r\n\r\n            @SuppressWarnings(\"unchecked\")\r\n            @Override\r\n            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n                // Uses `Gson.getAdapter` instead of `Gson.getDelegateAdapter`\r\n                TypeAdapter<String> delegate = (TypeAdapter<String>) gson.getAdapter(type);\r\n                return (TypeAdapter<T>) new TypeAdapter<String>() {\r\n\r\n                    @Override\r\n                    public String read(JsonReader in) throws IOException {\r\n                        return delegate.read(in) + \"-custom\";\r\n                    }\r\n\r\n                    @Override\r\n                    public void write(JsonWriter out, String value) throws IOException {\r\n                        delegate.write(out, value + \"-custom\");\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests usage of {@link JsonSerializer} as {@link JsonAdapter} value on a field\r\n     */\r\n    @Test\r\n    public void testJsonSerializer() {\r\n        Gson gson = new Gson();\r\n        // Verify that delegate deserializer for List is used\r\n        WithJsonSerializer deserialized = gson.fromJson(\"{\\\"f\\\":[1,2,3]}\", WithJsonSerializer.class);\r\n        assertThat(deserialized.f).isEqualTo(Arrays.asList(1, 2, 3));\r\n        String json = gson.toJson(new WithJsonSerializer());\r\n        // Uses custom serializer which always returns `true`\r\n        assertThat(json).isEqualTo(\"{\\\"f\\\":true}\");\r\n    }\r\n\r\n    private static class WithJsonSerializer {\r\n\r\n        @JsonAdapter(Serializer.class)\r\n        List<Integer> f = Collections.emptyList();\r\n\r\n        static class Serializer implements JsonSerializer<List<Integer>> {\r\n\r\n            @Override\r\n            public JsonElement serialize(List<Integer> src, Type typeOfSrc, JsonSerializationContext context) {\r\n                return new JsonPrimitive(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests usage of {@link JsonDeserializer} as {@link JsonAdapter} value on a field\r\n     */\r\n    @Test\r\n    public void testJsonDeserializer() {\r\n        Gson gson = new Gson();\r\n        WithJsonDeserializer deserialized = gson.fromJson(\"{\\\"f\\\":[5]}\", WithJsonDeserializer.class);\r\n        // Uses custom deserializer which always returns `[3, 2, 1]`\r\n        assertThat(deserialized.f).isEqualTo(Arrays.asList(3, 2, 1));\r\n        // Verify that delegate serializer for List is used\r\n        String json = gson.toJson(new WithJsonDeserializer(Arrays.asList(4, 5, 6)));\r\n        assertThat(json).isEqualTo(\"{\\\"f\\\":[4,5,6]}\");\r\n    }\r\n\r\n    private static class WithJsonDeserializer {\r\n\r\n        @JsonAdapter(Deserializer.class)\r\n        List<Integer> f;\r\n\r\n        WithJsonDeserializer(List<Integer> f) {\r\n            this.f = f;\r\n        }\r\n\r\n        static class Deserializer implements JsonDeserializer<List<Integer>> {\r\n\r\n            @Override\r\n            public List<Integer> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\r\n                return Arrays.asList(3, 2, 1);\r\n            }\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testClassAnnotationAdapterTakesPrecedenceOverDefault",
    "start_line": 47,
    "end_line": 54,
    "code": "@Test\r\npublic void testClassAnnotationAdapterTakesPrecedenceOverDefault() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\r\n    assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserClassAnnotationAdapter\\\"}\");\r\n    Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\r\n    assertThat(computer.user.name).isEqualTo(\"UserClassAnnotationAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault",
    "start_line": 56,
    "end_line": 63,
    "code": "@Test\r\npublic void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Gizmo(new Part(\"Part\")));\r\n    assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\");\r\n    Gizmo computer = gson.fromJson(\"{'part':'Part'}\", Gizmo.class);\r\n    assertThat(computer.part.name).isEqualTo(\"GizmoPartTypeAdapterFactory\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter",
    "start_line": 65,
    "end_line": 73,
    "code": "@Test\r\npublic void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new RegisteredUserAdapter()).create();\r\n    String json = gson.toJson(new Computer(new User(\"Inderjeet Singh\")));\r\n    assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"RegisteredUserAdapter\\\"}\");\r\n    Computer computer = gson.fromJson(\"{'user':'Inderjeet Singh'}\", Computer.class);\r\n    assertThat(computer.user.name).isEqualTo(\"RegisteredUserAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter",
    "start_line": 75,
    "end_line": 97,
    "code": "@Test\r\npublic void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Part.class, new TypeAdapter<Part>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Part part) {\r\n            throw new AssertionError();\r\n        }\r\n\r\n        @Override\r\n        public Part read(JsonReader in) {\r\n            throw new AssertionError();\r\n        }\r\n    }).create();\r\n    String json = gson.toJson(new Gadget(new Part(\"screen\")));\r\n    assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\");\r\n    Gadget gadget = gson.fromJson(\"{'part':'screen'}\", Gadget.class);\r\n    assertThat(gadget.part.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testFieldAnnotationTakesPrecedenceOverClassAnnotation",
    "start_line": 99,
    "end_line": 106,
    "code": "@Test\r\npublic void testFieldAnnotationTakesPrecedenceOverClassAnnotation() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Computer2(new User(\"Inderjeet Singh\")));\r\n    assertThat(json).isEqualTo(\"{\\\"user\\\":\\\"UserFieldAnnotationAdapter\\\"}\");\r\n    Computer2 target = gson.fromJson(\"{'user':'Interjeet Singh'}\", Computer2.class);\r\n    assertThat(target.user.name).isEqualTo(\"UserFieldAnnotationAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testJsonAdapterInvokedOnlyForAnnotatedFields",
    "start_line": 232,
    "end_line": 239,
    "code": "@Test\r\npublic void testJsonAdapterInvokedOnlyForAnnotatedFields() {\r\n    Gson gson = new Gson();\r\n    String json = \"{'part1':'name','part2':{'name':'name2'}}\";\r\n    GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);\r\n    assertThat(gadget.part1.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n    assertThat(gadget.part2.name).isEqualTo(\"name2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testJsonAdapterWrappedInNullSafeAsRequested",
    "start_line": 254,
    "end_line": 264,
    "code": "@Test\r\npublic void testJsonAdapterWrappedInNullSafeAsRequested() {\r\n    Gson gson = new Gson();\r\n    String fromJson = \"{'part':null}\";\r\n    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\r\n    assertThat(gadget.part).isNull();\r\n    String toJson = gson.toJson(gadget);\r\n    assertThat(toJson).doesNotContain(\"PartJsonFieldAnnotationAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault",
    "start_line": 276,
    "end_line": 283,
    "code": "/**\r\n * Regression test contributed through https://github.com/google/gson/issues/831\r\n */\r\n@Test\r\npublic void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new GadgetWithOptionalPart(new Part(\"foo\")));\r\n    assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\");\r\n    GadgetWithOptionalPart gadget = gson.fromJson(\"{'part':'foo'}\", GadgetWithOptionalPart.class);\r\n    assertThat(gadget.part.name).isEqualTo(\"PartJsonFieldAnnotationAdapter\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testPrimitiveFieldAnnotationTakesPrecedenceOverDefault",
    "start_line": 286,
    "end_line": 293,
    "code": "/**\r\n * Regression test contributed through https://github.com/google/gson/issues/831\r\n */\r\n@Test\r\npublic void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new GadgetWithPrimitivePart(42));\r\n    assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"42\\\"}\");\r\n    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\r\n    assertThat(gadget.part).isEqualTo(42);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testFieldAnnotationWorksForParameterizedType",
    "start_line": 334,
    "end_line": 341,
    "code": "@Test\r\npublic void testFieldAnnotationWorksForParameterizedType() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\r\n    assertThat(json).isEqualTo(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\");\r\n    Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\r\n    assertThat(computer.part.get(0).name).isEqualTo(\"GizmoPartTypeAdapterFactory\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testOverwriteBuiltIn",
    "start_line": 375,
    "end_line": 384,
    "code": "/**\r\n * Verify that {@link JsonAdapter} annotation can overwrite adapters which can normally not be\r\n * overwritten (in this case adapter for {@link JsonElement}).\r\n */\r\n@Test\r\npublic void testOverwriteBuiltIn() {\r\n    BuiltInOverwriting obj = new BuiltInOverwriting();\r\n    obj.f = new JsonPrimitive(true);\r\n    String json = new Gson().toJson(obj);\r\n    assertThat(json).isEqualTo(\"{\\\"f\\\":\\\"\" + JsonElementAdapter.SERIALIZED + \"\\\"}\");\r\n    BuiltInOverwriting deserialized = new Gson().fromJson(\"{\\\"f\\\": 2}\", BuiltInOverwriting.class);\r\n    assertThat(deserialized.f).isEqualTo(JsonElementAdapter.DESERIALIZED);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeSerializePrecedence",
    "start_line": 412,
    "end_line": 443,
    "code": "/**\r\n * Verify that exclusion strategy preventing serialization has higher precedence than {@link\r\n * JsonAdapter} annotation.\r\n */\r\n@Test\r\npublic void testExcludeSerializePrecedence() {\r\n    Gson gson = new GsonBuilder().addSerializationExclusionStrategy(new ExclusionStrategy() {\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes f) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> clazz) {\r\n            return false;\r\n        }\r\n    }).create();\r\n    DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n    obj.f = 1;\r\n    obj.f2 = new JsonPrimitive(2);\r\n    obj.f3 = new JsonPrimitive(true);\r\n    String json = gson.toJson(obj);\r\n    assertThat(json).isEqualTo(\"{}\");\r\n    DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n    assertThat(deserialized.f).isEqualTo(Integer.valueOf(1));\r\n    assertThat(deserialized.f2).isEqualTo(new JsonPrimitive(2));\r\n    // Verify that for deserialization type adapter specified by @JsonAdapter is used\r\n    assertThat(deserialized.f3).isEqualTo(JsonElementAdapter.DESERIALIZED);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testExcludeDeserializePrecedence",
    "start_line": 449,
    "end_line": 481,
    "code": "/**\r\n * Verify that exclusion strategy preventing deserialization has higher precedence than {@link\r\n * JsonAdapter} annotation.\r\n */\r\n@Test\r\npublic void testExcludeDeserializePrecedence() {\r\n    Gson gson = new GsonBuilder().addDeserializationExclusionStrategy(new ExclusionStrategy() {\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes f) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> clazz) {\r\n            return false;\r\n        }\r\n    }).create();\r\n    DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n    obj.f = 1;\r\n    obj.f2 = new JsonPrimitive(2);\r\n    obj.f3 = new JsonPrimitive(true);\r\n    String json = gson.toJson(obj);\r\n    // Verify that for serialization type adapters specified by @JsonAdapter are used\r\n    assertThat(json).isEqualTo(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":\\\"\" + JsonElementAdapter.SERIALIZED + \"\\\"}\");\r\n    DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n    assertThat(deserialized.f).isNull();\r\n    assertThat(deserialized.f2).isNull();\r\n    assertThat(deserialized.f3).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testExcludePrecedence",
    "start_line": 490,
    "end_line": 520,
    "code": "/**\r\n * Verify that exclusion strategy preventing serialization and deserialization has higher\r\n * precedence than {@link JsonAdapter} annotation.\r\n *\r\n * <p>This is a separate test method because {@link ReflectiveTypeAdapterFactory} handles this\r\n * case differently.\r\n */\r\n@Test\r\npublic void testExcludePrecedence() {\r\n    Gson gson = new GsonBuilder().setExclusionStrategies(new ExclusionStrategy() {\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes f) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> clazz) {\r\n            return false;\r\n        }\r\n    }).create();\r\n    DelegatingAndOverwriting obj = new DelegatingAndOverwriting();\r\n    obj.f = 1;\r\n    obj.f2 = new JsonPrimitive(2);\r\n    obj.f3 = new JsonPrimitive(true);\r\n    String json = gson.toJson(obj);\r\n    assertThat(json).isEqualTo(\"{}\");\r\n    DelegatingAndOverwriting deserialized = gson.fromJson(\"{\\\"f\\\":1,\\\"f2\\\":2,\\\"f3\\\":3}\", DelegatingAndOverwriting.class);\r\n    assertThat(deserialized.f).isNull();\r\n    assertThat(deserialized.f2).isNull();\r\n    assertThat(deserialized.f3).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testDelegatingAdapterFactory",
    "start_line": 546,
    "end_line": 560,
    "code": "/**\r\n * Verifies that {@link TypeAdapterFactory} specified by {@code @JsonAdapter} can call {@link\r\n * Gson#getDelegateAdapter} without any issues, despite the factory not being directly registered\r\n * on Gson.\r\n */\r\n@Test\r\npublic void testDelegatingAdapterFactory() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    WithDelegatingFactory<String> deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", WithDelegatingFactory.class);\r\n    assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n    deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", new TypeToken<WithDelegatingFactory<String>>() {\r\n    });\r\n    assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n    WithDelegatingFactory<String> serialized = new WithDelegatingFactory<>();\r\n    serialized.f = \"value\";\r\n    assertThat(new Gson().toJson(serialized)).isEqualTo(\"{\\\"f\\\":\\\"value-custom\\\"}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testDelegatingAdapterFactory_Delayed",
    "start_line": 596,
    "end_line": 605,
    "code": "/**\r\n * Similar to {@link #testDelegatingAdapterFactory}, except that the delegate is not looked up in\r\n * {@code create} but instead in the adapter methods.\r\n */\r\n@Test\r\npublic void testDelegatingAdapterFactory_Delayed() {\r\n    WithDelayedDelegatingFactory deserialized = new Gson().fromJson(\"{\\\"f\\\":\\\"test\\\"}\", WithDelayedDelegatingFactory.class);\r\n    assertThat(deserialized.f).isEqualTo(\"test-custom\");\r\n    WithDelayedDelegatingFactory serialized = new WithDelayedDelegatingFactory();\r\n    serialized.f = \"value\";\r\n    assertThat(new Gson().toJson(serialized)).isEqualTo(\"{\\\"f\\\":\\\"value-custom\\\"}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testGetAdapterDelegation",
    "start_line": 645,
    "end_line": 653,
    "code": "/**\r\n * Tests usage of {@link Gson#getAdapter(TypeToken)} in the {@code create} method of the factory.\r\n * Existing code was using that as workaround because {@link Gson#getDelegateAdapter} previously\r\n * did not work in combination with {@code @JsonAdapter}, see\r\n * https://github.com/google/gson/issues/1028.\r\n */\r\n@Test\r\npublic void testGetAdapterDelegation() {\r\n    Gson gson = new Gson();\r\n    GetAdapterDelegation deserialized = gson.fromJson(\"{\\\"f\\\":\\\"de\\\"}\", GetAdapterDelegation.class);\r\n    assertThat(deserialized.f).isEqualTo(\"de-custom\");\r\n    String json = gson.toJson(new GetAdapterDelegation(\"se\"));\r\n    assertThat(json).isEqualTo(\"{\\\"f\\\":\\\"se-custom\\\"}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testJsonSerializer",
    "start_line": 689,
    "end_line": 699,
    "code": "/**\r\n * Tests usage of {@link JsonSerializer} as {@link JsonAdapter} value on a field\r\n */\r\n@Test\r\npublic void testJsonSerializer() {\r\n    Gson gson = new Gson();\r\n    // Verify that delegate deserializer for List is used\r\n    WithJsonSerializer deserialized = gson.fromJson(\"{\\\"f\\\":[1,2,3]}\", WithJsonSerializer.class);\r\n    assertThat(deserialized.f).isEqualTo(Arrays.asList(1, 2, 3));\r\n    String json = gson.toJson(new WithJsonSerializer());\r\n    // Uses custom serializer which always returns `true`\r\n    assertThat(json).isEqualTo(\"{\\\"f\\\":true}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  },
  {
    "type": "method",
    "name": "testJsonDeserializer",
    "start_line": 715,
    "end_line": 725,
    "code": "/**\r\n * Tests usage of {@link JsonDeserializer} as {@link JsonAdapter} value on a field\r\n */\r\n@Test\r\npublic void testJsonDeserializer() {\r\n    Gson gson = new Gson();\r\n    WithJsonDeserializer deserialized = gson.fromJson(\"{\\\"f\\\":[5]}\", WithJsonDeserializer.class);\r\n    // Uses custom deserializer which always returns `[3, 2, 1]`\r\n    assertThat(deserialized.f).isEqualTo(Arrays.asList(3, 2, 1));\r\n    // Verify that delegate serializer for List is used\r\n    String json = gson.toJson(new WithJsonDeserializer(Arrays.asList(4, 5, 6)));\r\n    assertThat(json).isEqualTo(\"{\\\"f\\\":[4,5,6]}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonAdapterAnnotationOnFieldsTest.java"
  }
]