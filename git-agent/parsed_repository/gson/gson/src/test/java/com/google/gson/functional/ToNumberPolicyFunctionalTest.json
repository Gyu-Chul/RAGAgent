[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ToNumberPolicy",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.ToNumberPolicy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ToNumberStrategy",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.ToNumberStrategy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "class",
    "name": "ToNumberPolicyFunctionalTest",
    "start_line": 35,
    "end_line": 148,
    "code": "public class ToNumberPolicyFunctionalTest {\r\n\r\n    @Test\r\n    public void testDefault() {\r\n        Gson gson = new Gson();\r\n        assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10D);\r\n        assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n    }\r\n\r\n    @Test\r\n    public void testAsDoubles() {\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.DOUBLE).create();\r\n        assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10.0);\r\n        assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(10.0);\r\n    }\r\n\r\n    @Test\r\n    public void testAsLazilyParsedNumbers() {\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LAZILY_PARSED_NUMBER).setNumberToNumberStrategy(ToNumberPolicy.LAZILY_PARSED_NUMBER).create();\r\n        assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n        assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n    }\r\n\r\n    @Test\r\n    public void testAsLongsOrDoubles() {\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();\r\n        assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10L);\r\n        assertThat(gson.fromJson(\"10.0\", Object.class)).isEqualTo(10.0);\r\n        assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(10L);\r\n        assertThat(gson.fromJson(\"10.0\", Number.class)).isEqualTo(10.0);\r\n    }\r\n\r\n    @Test\r\n    public void testAsBigDecimals() {\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.BIG_DECIMAL).setNumberToNumberStrategy(ToNumberPolicy.BIG_DECIMAL).create();\r\n        assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(new BigDecimal(\"10\"));\r\n        assertThat(gson.fromJson(\"10.0\", Object.class)).isEqualTo(new BigDecimal(\"10.0\"));\r\n        assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n        assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new BigDecimal(\"10\"));\r\n        assertThat(gson.fromJson(\"10.0\", Number.class)).isEqualTo(new BigDecimal(\"10.0\"));\r\n        assertThat(gson.fromJson(\"3.141592653589793238462643383279\", BigDecimal.class)).isEqualTo(new BigDecimal(\"3.141592653589793238462643383279\"));\r\n        assertThat(gson.fromJson(\"1e400\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1e400\"));\r\n    }\r\n\r\n    @Test\r\n    public void testAsListOfLongsOrDoubles() {\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();\r\n        Type objectCollectionType = new TypeToken<Collection<Object>>() {\r\n        }.getType();\r\n        Collection<Object> objects = gson.fromJson(\"[null,10,10.0]\", objectCollectionType);\r\n        assertThat(objects).containsExactly(null, 10L, 10.0).inOrder();\r\n        Type numberCollectionType = new TypeToken<Collection<Number>>() {\r\n        }.getType();\r\n        Collection<Object> numbers = gson.fromJson(\"[null,10,10.0]\", numberCollectionType);\r\n        assertThat(numbers).containsExactly(null, 10L, 10.0).inOrder();\r\n    }\r\n\r\n    @Test\r\n    public void testCustomStrategiesCannotAffectConcreteDeclaredNumbers() {\r\n        UnsupportedOperationException customException = new UnsupportedOperationException(\"test-exception\");\r\n        ToNumberStrategy fail = new ToNumberStrategy() {\r\n\r\n            @Override\r\n            public Byte readNumber(JsonReader in) {\r\n                throw customException;\r\n            }\r\n        };\r\n        Gson gson = new GsonBuilder().setObjectToNumberStrategy(fail).setNumberToNumberStrategy(fail).create();\r\n        List<Object> numbers = gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Byte>>() {\r\n        }.getType());\r\n        assertThat(numbers).containsExactly(null, (byte) 10, (byte) 20, (byte) 30).inOrder();\r\n        var e = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Object>>() {\r\n        }.getType()));\r\n        assertThat(e).isSameInstanceAs(customException);\r\n        e = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Number>>() {\r\n        }.getType()));\r\n        assertThat(e).isSameInstanceAs(customException);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testDefault",
    "start_line": 36,
    "end_line": 43,
    "code": "@Test\r\npublic void testDefault() {\r\n    Gson gson = new Gson();\r\n    assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10D);\r\n    assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testAsDoubles",
    "start_line": 45,
    "end_line": 56,
    "code": "@Test\r\npublic void testAsDoubles() {\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.DOUBLE).create();\r\n    assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10.0);\r\n    assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(10.0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testAsLazilyParsedNumbers",
    "start_line": 58,
    "end_line": 69,
    "code": "@Test\r\npublic void testAsLazilyParsedNumbers() {\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LAZILY_PARSED_NUMBER).setNumberToNumberStrategy(ToNumberPolicy.LAZILY_PARSED_NUMBER).create();\r\n    assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n    assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new LazilyParsedNumber(\"10\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testAsLongsOrDoubles",
    "start_line": 71,
    "end_line": 84,
    "code": "@Test\r\npublic void testAsLongsOrDoubles() {\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();\r\n    assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(10L);\r\n    assertThat(gson.fromJson(\"10.0\", Object.class)).isEqualTo(10.0);\r\n    assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(10L);\r\n    assertThat(gson.fromJson(\"10.0\", Number.class)).isEqualTo(10.0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testAsBigDecimals",
    "start_line": 86,
    "end_line": 102,
    "code": "@Test\r\npublic void testAsBigDecimals() {\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.BIG_DECIMAL).setNumberToNumberStrategy(ToNumberPolicy.BIG_DECIMAL).create();\r\n    assertThat(gson.fromJson(\"null\", Object.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Object.class)).isEqualTo(new BigDecimal(\"10\"));\r\n    assertThat(gson.fromJson(\"10.0\", Object.class)).isEqualTo(new BigDecimal(\"10.0\"));\r\n    assertThat(gson.fromJson(\"null\", Number.class)).isEqualTo(null);\r\n    assertThat(gson.fromJson(\"10\", Number.class)).isEqualTo(new BigDecimal(\"10\"));\r\n    assertThat(gson.fromJson(\"10.0\", Number.class)).isEqualTo(new BigDecimal(\"10.0\"));\r\n    assertThat(gson.fromJson(\"3.141592653589793238462643383279\", BigDecimal.class)).isEqualTo(new BigDecimal(\"3.141592653589793238462643383279\"));\r\n    assertThat(gson.fromJson(\"1e400\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1e400\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testAsListOfLongsOrDoubles",
    "start_line": 104,
    "end_line": 117,
    "code": "@Test\r\npublic void testAsListOfLongsOrDoubles() {\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).setNumberToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();\r\n    Type objectCollectionType = new TypeToken<Collection<Object>>() {\r\n    }.getType();\r\n    Collection<Object> objects = gson.fromJson(\"[null,10,10.0]\", objectCollectionType);\r\n    assertThat(objects).containsExactly(null, 10L, 10.0).inOrder();\r\n    Type numberCollectionType = new TypeToken<Collection<Number>>() {\r\n    }.getType();\r\n    Collection<Object> numbers = gson.fromJson(\"[null,10,10.0]\", numberCollectionType);\r\n    assertThat(numbers).containsExactly(null, 10L, 10.0).inOrder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  },
  {
    "type": "method",
    "name": "testCustomStrategiesCannotAffectConcreteDeclaredNumbers",
    "start_line": 119,
    "end_line": 147,
    "code": "@Test\r\npublic void testCustomStrategiesCannotAffectConcreteDeclaredNumbers() {\r\n    UnsupportedOperationException customException = new UnsupportedOperationException(\"test-exception\");\r\n    ToNumberStrategy fail = new ToNumberStrategy() {\r\n\r\n        @Override\r\n        public Byte readNumber(JsonReader in) {\r\n            throw customException;\r\n        }\r\n    };\r\n    Gson gson = new GsonBuilder().setObjectToNumberStrategy(fail).setNumberToNumberStrategy(fail).create();\r\n    List<Object> numbers = gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Byte>>() {\r\n    }.getType());\r\n    assertThat(numbers).containsExactly(null, (byte) 10, (byte) 20, (byte) 30).inOrder();\r\n    var e = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Object>>() {\r\n    }.getType()));\r\n    assertThat(e).isSameInstanceAs(customException);\r\n    e = assertThrows(UnsupportedOperationException.class, () -> gson.fromJson(\"[null, 10, 20, 30]\", new TypeToken<List<Number>>() {\r\n    }.getType()));\r\n    assertThat(e).isSameInstanceAs(customException);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ToNumberPolicyFunctionalTest.java"
  }
]