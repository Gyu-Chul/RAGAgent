[
  {
    "type": "package",
    "name": "com.google.gson.stream",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.stream;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.FormattingStyle",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.FormattingStyle;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Strictness",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Strictness;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringWriter",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.StringWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 29,
    "end_line": 29,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "class",
    "name": "JsonWriterTest",
    "start_line": 31,
    "end_line": 991,
    "code": "@SuppressWarnings(\"resource\")\r\npublic final class JsonWriterTest {\r\n\r\n    @Test\r\n    public void testDefaultStrictness() throws IOException {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n        jsonWriter.value(false);\r\n        jsonWriter.close();\r\n    }\r\n\r\n    // for JsonWriter.setLenient\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testSetLenientTrue() throws IOException {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        jsonWriter.setLenient(true);\r\n        assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LENIENT);\r\n        jsonWriter.value(false);\r\n        jsonWriter.close();\r\n    }\r\n\r\n    // for JsonWriter.setLenient\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testSetLenientFalse() throws IOException {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        jsonWriter.setLenient(false);\r\n        assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n        jsonWriter.value(false);\r\n        jsonWriter.close();\r\n    }\r\n\r\n    @Test\r\n    public void testSetStrictness() throws IOException {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        jsonWriter.setStrictness(Strictness.STRICT);\r\n        assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.STRICT);\r\n        jsonWriter.value(false);\r\n        jsonWriter.close();\r\n    }\r\n\r\n    @Test\r\n    public void testSetStrictnessNull() throws IOException {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        assertThrows(NullPointerException.class, () -> jsonWriter.setStrictness(null));\r\n        jsonWriter.value(false);\r\n        jsonWriter.close();\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelValueTypes() throws IOException {\r\n        StringWriter string1 = new StringWriter();\r\n        JsonWriter writer1 = new JsonWriter(string1);\r\n        writer1.value(true);\r\n        writer1.close();\r\n        assertThat(string1.toString()).isEqualTo(\"true\");\r\n        StringWriter string2 = new StringWriter();\r\n        JsonWriter writer2 = new JsonWriter(string2);\r\n        writer2.nullValue();\r\n        writer2.close();\r\n        assertThat(string2.toString()).isEqualTo(\"null\");\r\n        StringWriter string3 = new StringWriter();\r\n        JsonWriter writer3 = new JsonWriter(string3);\r\n        writer3.value(123);\r\n        writer3.close();\r\n        assertThat(string3.toString()).isEqualTo(\"123\");\r\n        StringWriter string4 = new StringWriter();\r\n        JsonWriter writer4 = new JsonWriter(string4);\r\n        writer4.value(123.4);\r\n        writer4.close();\r\n        assertThat(string4.toString()).isEqualTo(\"123.4\");\r\n        StringWriter string5 = new StringWriter();\r\n        JsonWriter writert = new JsonWriter(string5);\r\n        writert.value(\"a\");\r\n        writert.close();\r\n        assertThat(string5.toString()).isEqualTo(\"\\\"a\\\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testNameAsTopLevelValue() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        IllegalStateException e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n        jsonWriter.value(12);\r\n        jsonWriter.close();\r\n        e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n    }\r\n\r\n    @Test\r\n    public void testNameInArray() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        IllegalStateException e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n        jsonWriter.value(12);\r\n        e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n        jsonWriter.endArray();\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[12]\");\r\n    }\r\n\r\n    @Test\r\n    public void testTwoNames() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"a\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Already wrote a name, expecting a value.\");\r\n    }\r\n\r\n    @Test\r\n    public void testNameWithoutValue() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Dangling name: a\");\r\n    }\r\n\r\n    @Test\r\n    public void testValueWithoutName() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonWriter.value(true));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n    }\r\n\r\n    @Test\r\n    public void testMultipleTopLevelValues() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray().endArray();\r\n        IllegalStateException expected = assertThrows(IllegalStateException.class, jsonWriter::beginArray);\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"JSON must have only one top-level value.\");\r\n    }\r\n\r\n    @Test\r\n    public void testMultipleTopLevelValuesStrict() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.STRICT);\r\n        jsonWriter.beginArray().endArray();\r\n        IllegalStateException expected = assertThrows(IllegalStateException.class, jsonWriter::beginArray);\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"JSON must have only one top-level value.\");\r\n    }\r\n\r\n    @Test\r\n    public void testMultipleTopLevelValuesLenient() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.setStrictness(Strictness.LENIENT);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[][]\");\r\n    }\r\n\r\n    @Test\r\n    public void testBadNestingObject() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.beginObject();\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n    }\r\n\r\n    @Test\r\n    public void testBadNestingArray() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.beginArray();\r\n        var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullName() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        assertThrows(NullPointerException.class, () -> jsonWriter.name(null));\r\n    }\r\n\r\n    @Test\r\n    public void testNullStringValue() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        jsonWriter.value((String) null);\r\n        jsonWriter.endObject();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":null}\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonValue() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\r\n        jsonWriter.name(\"c\");\r\n        jsonWriter.value(1);\r\n        jsonWriter.endObject();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\");\r\n    }\r\n\r\n    private static void assertNonFiniteFloatsExceptions(JsonWriter jsonWriter) throws IOException {\r\n        jsonWriter.beginArray();\r\n        IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.NaN));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.NEGATIVE_INFINITY));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.POSITIVE_INFINITY));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteFloats() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        assertNonFiniteFloatsExceptions(jsonWriter);\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteFloatsWhenStrict() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.STRICT);\r\n        assertNonFiniteFloatsExceptions(jsonWriter);\r\n    }\r\n\r\n    private static void assertNonFiniteDoublesExceptions(JsonWriter jsonWriter) throws IOException {\r\n        jsonWriter.beginArray();\r\n        IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.NaN));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.NEGATIVE_INFINITY));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.POSITIVE_INFINITY));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteDoubles() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        assertNonFiniteDoublesExceptions(jsonWriter);\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteDoublesWhenStrict() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.STRICT);\r\n        assertNonFiniteDoublesExceptions(jsonWriter);\r\n    }\r\n\r\n    private static void assertNonFiniteNumbersExceptions(JsonWriter jsonWriter) throws IOException {\r\n        jsonWriter.beginArray();\r\n        IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.NaN)));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY)));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY)));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n        expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(new LazilyParsedNumber(\"Infinity\")));\r\n        assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteNumbers() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        assertNonFiniteNumbersExceptions(jsonWriter);\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteNumbersWhenStrict() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.STRICT);\r\n        assertNonFiniteNumbersExceptions(jsonWriter);\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteFloatsWhenLenient() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.LENIENT);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(Float.NaN);\r\n        jsonWriter.value(Float.NEGATIVE_INFINITY);\r\n        jsonWriter.value(Float.POSITIVE_INFINITY);\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteDoublesWhenLenient() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.LENIENT);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(Double.NaN);\r\n        jsonWriter.value(Double.NEGATIVE_INFINITY);\r\n        jsonWriter.value(Double.POSITIVE_INFINITY);\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNonFiniteNumbersWhenLenient() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setStrictness(Strictness.LENIENT);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(Double.valueOf(Double.NaN));\r\n        jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY));\r\n        jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY));\r\n        jsonWriter.value(new LazilyParsedNumber(\"Infinity\"));\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity,Infinity]\");\r\n    }\r\n\r\n    @Test\r\n    public void testFloats() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(-0.0f);\r\n        jsonWriter.value(1.0f);\r\n        jsonWriter.value(Float.MAX_VALUE);\r\n        jsonWriter.value(Float.MIN_VALUE);\r\n        jsonWriter.value(0.0f);\r\n        jsonWriter.value(-0.5f);\r\n        jsonWriter.value(2.2250739E-38f);\r\n        jsonWriter.value(3.723379f);\r\n        jsonWriter.value((float) Math.PI);\r\n        jsonWriter.value((float) Math.E);\r\n        jsonWriter.endArray();\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[-0.0,\" + \"1.0,\" + \"3.4028235E38,\" + \"1.4E-45,\" + \"0.0,\" + \"-0.5,\" + \"2.2250739E-38,\" + \"3.723379,\" + \"3.1415927,\" + \"2.7182817]\");\r\n    }\r\n\r\n    @Test\r\n    public void testDoubles() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(-0.0);\r\n        jsonWriter.value(1.0);\r\n        jsonWriter.value(Double.MAX_VALUE);\r\n        jsonWriter.value(Double.MIN_VALUE);\r\n        jsonWriter.value(0.0);\r\n        jsonWriter.value(-0.5);\r\n        jsonWriter.value(2.2250738585072014E-308);\r\n        jsonWriter.value(Math.PI);\r\n        jsonWriter.value(Math.E);\r\n        jsonWriter.endArray();\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[-0.0,\" + \"1.0,\" + \"1.7976931348623157E308,\" + \"4.9E-324,\" + \"0.0,\" + \"-0.5,\" + \"2.2250738585072014E-308,\" + \"3.141592653589793,\" + \"2.718281828459045]\");\r\n    }\r\n\r\n    @Test\r\n    public void testLongs() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(0);\r\n        jsonWriter.value(1);\r\n        jsonWriter.value(-1);\r\n        jsonWriter.value(Long.MIN_VALUE);\r\n        jsonWriter.value(Long.MAX_VALUE);\r\n        jsonWriter.endArray();\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[0,\" + \"1,\" + \"-1,\" + \"-9223372036854775808,\" + \"9223372036854775807]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNumbers() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(new BigInteger(\"0\"));\r\n        jsonWriter.value(new BigInteger(\"9223372036854775808\"));\r\n        jsonWriter.value(new BigInteger(\"-9223372036854775809\"));\r\n        jsonWriter.value(new BigDecimal(\"3.141592653589793238462643383\"));\r\n        jsonWriter.endArray();\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[0,\" + \"9223372036854775808,\" + \"-9223372036854775809,\" + \"3.141592653589793238462643383]\");\r\n    }\r\n\r\n    /**\r\n     * Tests writing {@code Number} instances which are not one of the standard JDK ones.\r\n     */\r\n    @Test\r\n    public void testNumbersCustomClass() throws IOException {\r\n        String[] validNumbers = { \"-0.0\", \"1.0\", \"1.7976931348623157E308\", \"4.9E-324\", \"0.0\", \"0.00\", \"-0.5\", \"2.2250738585072014E-308\", \"3.141592653589793\", \"2.718281828459045\", \"0\", \"0.01\", \"0e0\", \"1e+0\", \"1e-0\", // leading 0 is allowed for exponent\r\n        \"1e0000\", \"1e00001\", \"1e+1\" };\r\n        for (String validNumber : validNumbers) {\r\n            StringWriter stringWriter = new StringWriter();\r\n            JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n            jsonWriter.value(new LazilyParsedNumber(validNumber));\r\n            jsonWriter.close();\r\n            assertThat(stringWriter.toString()).isEqualTo(validNumber);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testMalformedNumbers() throws IOException {\r\n        String[] malformedNumbers = { \"some text\", \"\", \".\", \"00\", \"01\", \"-00\", \"-\", \"--1\", // plus sign is not allowed for integer part\r\n        \"+1\", \"+\", \"1,0\", \"1,000\", // decimal digit is required\r\n        \"0.\", // integer part is required\r\n        \".1\", \"e1\", \".e1\", \".1e1\", \"1e-\", \"1e+\", \"1e--1\", \"1e+-1\", \"1e1e1\", \"1+e1\", \"1e1.0\" };\r\n        for (String malformedNumber : malformedNumbers) {\r\n            JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n            var e = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(new LazilyParsedNumber(malformedNumber)));\r\n            assertThat(e).hasMessageThat().isEqualTo(\"String created by class com.google.gson.internal.LazilyParsedNumber is not a valid\" + \" JSON number: \" + malformedNumber);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testBooleans() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(true);\r\n        jsonWriter.value(false);\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[true,false]\");\r\n    }\r\n\r\n    @Test\r\n    public void testBoxedBooleans() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value((Boolean) true);\r\n        jsonWriter.value((Boolean) false);\r\n        jsonWriter.value((Boolean) null);\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[true,false,null]\");\r\n    }\r\n\r\n    @Test\r\n    public void testNulls() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.nullValue();\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[null]\");\r\n    }\r\n\r\n    @Test\r\n    public void testStrings() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(\"a\");\r\n        jsonWriter.value(\"a\\\"\");\r\n        jsonWriter.value(\"\\\"\");\r\n        jsonWriter.value(\":\");\r\n        jsonWriter.value(\",\");\r\n        jsonWriter.value(\"\\b\");\r\n        jsonWriter.value(\"\\f\");\r\n        jsonWriter.value(\"\\n\");\r\n        jsonWriter.value(\"\\r\");\r\n        jsonWriter.value(\"\\t\");\r\n        jsonWriter.value(\" \");\r\n        jsonWriter.value(\"\\\\\");\r\n        jsonWriter.value(\"{\");\r\n        jsonWriter.value(\"}\");\r\n        jsonWriter.value(\"[\");\r\n        jsonWriter.value(\"]\");\r\n        jsonWriter.value(\"\\0\");\r\n        jsonWriter.value(\"\\u0019\");\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[\\\"a\\\",\" + \"\\\"a\\\\\\\"\\\",\" + \"\\\"\\\\\\\"\\\",\" + \"\\\":\\\",\" + \"\\\",\\\",\" + \"\\\"\\\\b\\\",\" + \"\\\"\\\\f\\\",\" + \"\\\"\\\\n\\\",\" + \"\\\"\\\\r\\\",\" + \"\\\"\\\\t\\\",\" + \"\\\" \\\",\" + \"\\\"\\\\\\\\\\\",\" + \"\\\"{\\\",\" + \"\\\"}\\\",\" + \"\\\"[\\\",\" + \"\\\"]\\\",\" + \"\\\"\\\\u0000\\\",\" + \"\\\"\\\\u0019\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testUnicodeLineBreaksEscaped() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(\"\\u2028 \\u2029\");\r\n        jsonWriter.endArray();\r\n        // JSON specification does not require that they are escaped, but Gson escapes them for\r\n        // compatibility with JavaScript where they are considered line breaks\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[\\\"\\\\u2028 \\\\u2029\\\"]\");\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyArray() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyObject() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.endObject();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{}\");\r\n    }\r\n\r\n    @Test\r\n    public void testObjectsInArrays() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginArray();\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\").value(5);\r\n        jsonWriter.name(\"b\").value(false);\r\n        jsonWriter.endObject();\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"c\").value(6);\r\n        jsonWriter.name(\"d\").value(true);\r\n        jsonWriter.endObject();\r\n        jsonWriter.endArray();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[{\\\"a\\\":5,\\\"b\\\":false},\" + \"{\\\"c\\\":6,\\\"d\\\":true}]\");\r\n    }\r\n\r\n    @Test\r\n    public void testArraysInObjects() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(5);\r\n        jsonWriter.value(false);\r\n        jsonWriter.endArray();\r\n        jsonWriter.name(\"b\");\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(6);\r\n        jsonWriter.value(true);\r\n        jsonWriter.endArray();\r\n        jsonWriter.endObject();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":[5,false],\" + \"\\\"b\\\":[6,true]}\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeepNestingArrays() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        for (int i = 0; i < 20; i++) {\r\n            jsonWriter.beginArray();\r\n        }\r\n        for (int i = 0; i < 20; i++) {\r\n            jsonWriter.endArray();\r\n        }\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeepNestingObjects() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        for (int i = 0; i < 20; i++) {\r\n            jsonWriter.name(\"a\");\r\n            jsonWriter.beginObject();\r\n        }\r\n        for (int i = 0; i < 20; i++) {\r\n            jsonWriter.endObject();\r\n        }\r\n        jsonWriter.endObject();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":\" + \"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\" + \"}}}}}}}}}}}}}}}}}}}}}\");\r\n    }\r\n\r\n    @Test\r\n    public void testRepeatedName() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\").value(true);\r\n        jsonWriter.name(\"a\").value(false);\r\n        jsonWriter.endObject();\r\n        // JsonWriter doesn't attempt to detect duplicate names\r\n        assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":true,\\\"a\\\":false}\");\r\n    }\r\n\r\n    @Test\r\n    public void testPrettyPrintObject() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setIndent(\"   \");\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\").value(true);\r\n        jsonWriter.name(\"b\").value(false);\r\n        jsonWriter.name(\"c\").value(5.0);\r\n        jsonWriter.name(\"e\").nullValue();\r\n        jsonWriter.name(\"f\").beginArray();\r\n        jsonWriter.value(6.0);\r\n        jsonWriter.value(7.0);\r\n        jsonWriter.endArray();\r\n        jsonWriter.name(\"g\").beginObject();\r\n        jsonWriter.name(\"h\").value(8.0);\r\n        jsonWriter.name(\"i\").value(9.0);\r\n        jsonWriter.endObject();\r\n        jsonWriter.endObject();\r\n        String expected = \"{\\n\" + \"   \\\"a\\\": true,\\n\" + \"   \\\"b\\\": false,\\n\" + \"   \\\"c\\\": 5.0,\\n\" + \"   \\\"e\\\": null,\\n\" + \"   \\\"f\\\": [\\n\" + \"      6.0,\\n\" + \"      7.0\\n\" + \"   ],\\n\" + \"   \\\"g\\\": {\\n\" + \"      \\\"h\\\": 8.0,\\n\" + \"      \\\"i\\\": 9.0\\n\" + \"   }\\n\" + \"}\";\r\n        assertThat(stringWriter.toString()).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testPrettyPrintArray() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setIndent(\"   \");\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(true);\r\n        jsonWriter.value(false);\r\n        jsonWriter.value(5.0);\r\n        jsonWriter.nullValue();\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\").value(6.0);\r\n        jsonWriter.name(\"b\").value(7.0);\r\n        jsonWriter.endObject();\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(8.0);\r\n        jsonWriter.value(9.0);\r\n        jsonWriter.endArray();\r\n        jsonWriter.endArray();\r\n        String expected = \"[\\n\" + \"   true,\\n\" + \"   false,\\n\" + \"   5.0,\\n\" + \"   null,\\n\" + \"   {\\n\" + \"      \\\"a\\\": 6.0,\\n\" + \"      \\\"b\\\": 7.0\\n\" + \"   },\\n\" + \"   [\\n\" + \"      8.0,\\n\" + \"      9.0\\n\" + \"   ]\\n\" + \"]\";\r\n        assertThat(stringWriter.toString()).isEqualTo(expected);\r\n    }\r\n\r\n    @Test\r\n    public void testClosedWriterThrowsOnStructure() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        String expectedMessage = \"JsonWriter is closed.\";\r\n        var e = assertThrows(IllegalStateException.class, () -> writer.beginArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalStateException.class, () -> writer.endArray());\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalStateException.class, () -> writer.beginObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalStateException.class, () -> writer.endObject());\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testClosedWriterThrowsOnName() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        var e = assertThrows(IllegalStateException.class, () -> writer.name(\"a\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n    }\r\n\r\n    @Test\r\n    public void testClosedWriterThrowsOnValue() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        var e = assertThrows(IllegalStateException.class, () -> writer.value(\"a\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n    }\r\n\r\n    @Test\r\n    public void testClosedWriterThrowsOnFlush() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        var e = assertThrows(IllegalStateException.class, () -> writer.flush());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n    }\r\n\r\n    @Test\r\n    public void testWriterCloseIsIdempotent() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter writer = new JsonWriter(stringWriter);\r\n        writer.beginArray();\r\n        writer.endArray();\r\n        writer.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n        writer.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n    }\r\n\r\n    @Test\r\n    public void testSetGetFormattingStyle() throws IOException {\r\n        String lineSeparator = \"\\r\\n\";\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        // Default should be FormattingStyle.COMPACT\r\n        assertThat(jsonWriter.getFormattingStyle()).isSameInstanceAs(FormattingStyle.COMPACT);\r\n        jsonWriter.setFormattingStyle(FormattingStyle.PRETTY.withIndent(\" \\t \").withNewline(lineSeparator));\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(true);\r\n        jsonWriter.value(\"text\");\r\n        jsonWriter.value(5.0);\r\n        jsonWriter.nullValue();\r\n        jsonWriter.endArray();\r\n        String expected = //\r\n        \"[\\r\\n\" + //\r\n        \" \\t true,\\r\\n\" + //\r\n        \" \\t \\\"text\\\",\\r\\n\" + //\r\n        \" \\t 5.0,\\r\\n\" + //\r\n        \" \\t null\\r\\n\" + \"]\";\r\n        assertThat(stringWriter.toString()).isEqualTo(expected);\r\n        assertThat(jsonWriter.getFormattingStyle().getNewline()).isEqualTo(lineSeparator);\r\n    }\r\n\r\n    @Test\r\n    public void testIndentOverwritesFormattingStyle() throws IOException {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setFormattingStyle(FormattingStyle.COMPACT);\r\n        // Should overwrite formatting style\r\n        jsonWriter.setIndent(\"  \");\r\n        jsonWriter.beginObject();\r\n        jsonWriter.name(\"a\");\r\n        jsonWriter.beginArray();\r\n        jsonWriter.value(1);\r\n        jsonWriter.value(2);\r\n        jsonWriter.endArray();\r\n        jsonWriter.endObject();\r\n        String expected = //\r\n        \"{\\n\" + //\r\n        \"  \\\"a\\\": [\\n\" + //\r\n        \"    1,\\n\" + //\r\n        \"    2\\n\" + //\r\n        \"  ]\\n\" + \"}\";\r\n        assertThat(stringWriter.toString()).isEqualTo(expected);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testDefaultStrictness",
    "start_line": 34,
    "end_line": 40,
    "code": "@Test\r\npublic void testDefaultStrictness() throws IOException {\r\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n    assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n    jsonWriter.value(false);\r\n    jsonWriter.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testSetLenientTrue",
    "start_line": 42,
    "end_line": 50,
    "code": "// for JsonWriter.setLenient\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testSetLenientTrue() throws IOException {\r\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n    jsonWriter.setLenient(true);\r\n    assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LENIENT);\r\n    jsonWriter.value(false);\r\n    jsonWriter.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testSetLenientFalse",
    "start_line": 52,
    "end_line": 60,
    "code": "// for JsonWriter.setLenient\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testSetLenientFalse() throws IOException {\r\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n    jsonWriter.setLenient(false);\r\n    assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.LEGACY_STRICT);\r\n    jsonWriter.value(false);\r\n    jsonWriter.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testSetStrictness",
    "start_line": 62,
    "end_line": 69,
    "code": "@Test\r\npublic void testSetStrictness() throws IOException {\r\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n    jsonWriter.setStrictness(Strictness.STRICT);\r\n    assertThat(jsonWriter.getStrictness()).isEqualTo(Strictness.STRICT);\r\n    jsonWriter.value(false);\r\n    jsonWriter.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testSetStrictnessNull",
    "start_line": 71,
    "end_line": 77,
    "code": "@Test\r\npublic void testSetStrictnessNull() throws IOException {\r\n    JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n    assertThrows(NullPointerException.class, () -> jsonWriter.setStrictness(null));\r\n    jsonWriter.value(false);\r\n    jsonWriter.close();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelValueTypes",
    "start_line": 79,
    "end_line": 110,
    "code": "@Test\r\npublic void testTopLevelValueTypes() throws IOException {\r\n    StringWriter string1 = new StringWriter();\r\n    JsonWriter writer1 = new JsonWriter(string1);\r\n    writer1.value(true);\r\n    writer1.close();\r\n    assertThat(string1.toString()).isEqualTo(\"true\");\r\n    StringWriter string2 = new StringWriter();\r\n    JsonWriter writer2 = new JsonWriter(string2);\r\n    writer2.nullValue();\r\n    writer2.close();\r\n    assertThat(string2.toString()).isEqualTo(\"null\");\r\n    StringWriter string3 = new StringWriter();\r\n    JsonWriter writer3 = new JsonWriter(string3);\r\n    writer3.value(123);\r\n    writer3.close();\r\n    assertThat(string3.toString()).isEqualTo(\"123\");\r\n    StringWriter string4 = new StringWriter();\r\n    JsonWriter writer4 = new JsonWriter(string4);\r\n    writer4.value(123.4);\r\n    writer4.close();\r\n    assertThat(string4.toString()).isEqualTo(\"123.4\");\r\n    StringWriter string5 = new StringWriter();\r\n    JsonWriter writert = new JsonWriter(string5);\r\n    writert.value(\"a\");\r\n    writert.close();\r\n    assertThat(string5.toString()).isEqualTo(\"\\\"a\\\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNameAsTopLevelValue",
    "start_line": 112,
    "end_line": 125,
    "code": "@Test\r\npublic void testNameAsTopLevelValue() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    IllegalStateException e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n    jsonWriter.value(12);\r\n    jsonWriter.close();\r\n    e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNameInArray",
    "start_line": 127,
    "end_line": 145,
    "code": "@Test\r\npublic void testNameInArray() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    IllegalStateException e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n    jsonWriter.value(12);\r\n    e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"hello\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Please begin an object before writing a name.\");\r\n    jsonWriter.endArray();\r\n    jsonWriter.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[12]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testTwoNames",
    "start_line": 147,
    "end_line": 155,
    "code": "@Test\r\npublic void testTwoNames() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonWriter.name(\"a\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Already wrote a name, expecting a value.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNameWithoutValue",
    "start_line": 157,
    "end_line": 165,
    "code": "@Test\r\npublic void testNameWithoutValue() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Dangling name: a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testValueWithoutName",
    "start_line": 167,
    "end_line": 174,
    "code": "@Test\r\npublic void testValueWithoutName() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonWriter.value(true));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testMultipleTopLevelValues",
    "start_line": 176,
    "end_line": 185,
    "code": "@Test\r\npublic void testMultipleTopLevelValues() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray().endArray();\r\n    IllegalStateException expected = assertThrows(IllegalStateException.class, jsonWriter::beginArray);\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"JSON must have only one top-level value.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testMultipleTopLevelValuesStrict",
    "start_line": 187,
    "end_line": 197,
    "code": "@Test\r\npublic void testMultipleTopLevelValuesStrict() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.STRICT);\r\n    jsonWriter.beginArray().endArray();\r\n    IllegalStateException expected = assertThrows(IllegalStateException.class, jsonWriter::beginArray);\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"JSON must have only one top-level value.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testMultipleTopLevelValuesLenient",
    "start_line": 199,
    "end_line": 210,
    "code": "@Test\r\npublic void testMultipleTopLevelValuesLenient() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.setStrictness(Strictness.LENIENT);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[][]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testBadNestingObject",
    "start_line": 212,
    "end_line": 220,
    "code": "@Test\r\npublic void testBadNestingObject() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.beginObject();\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testBadNestingArray",
    "start_line": 222,
    "end_line": 230,
    "code": "@Test\r\npublic void testBadNestingArray() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.beginArray();\r\n    var e = assertThrows(IllegalStateException.class, () -> jsonWriter.endObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Nesting problem.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNullName",
    "start_line": 232,
    "end_line": 238,
    "code": "@Test\r\npublic void testNullName() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    assertThrows(NullPointerException.class, () -> jsonWriter.name(null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNullStringValue",
    "start_line": 240,
    "end_line": 249,
    "code": "@Test\r\npublic void testNullStringValue() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    jsonWriter.value((String) null);\r\n    jsonWriter.endObject();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":null}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testJsonValue",
    "start_line": 251,
    "end_line": 262,
    "code": "@Test\r\npublic void testJsonValue() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\r\n    jsonWriter.name(\"c\");\r\n    jsonWriter.value(1);\r\n    jsonWriter.endObject();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "assertNonFiniteFloatsExceptions",
    "start_line": 264,
    "end_line": 284,
    "code": "private static void assertNonFiniteFloatsExceptions(JsonWriter jsonWriter) throws IOException {\r\n    jsonWriter.beginArray();\r\n    IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.NaN));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.NEGATIVE_INFINITY));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Float.POSITIVE_INFINITY));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteFloats",
    "start_line": 286,
    "end_line": 291,
    "code": "@Test\r\npublic void testNonFiniteFloats() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    assertNonFiniteFloatsExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteFloatsWhenStrict",
    "start_line": 293,
    "end_line": 299,
    "code": "@Test\r\npublic void testNonFiniteFloatsWhenStrict() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.STRICT);\r\n    assertNonFiniteFloatsExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "assertNonFiniteDoublesExceptions",
    "start_line": 301,
    "end_line": 321,
    "code": "private static void assertNonFiniteDoublesExceptions(JsonWriter jsonWriter) throws IOException {\r\n    jsonWriter.beginArray();\r\n    IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.NaN));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.NEGATIVE_INFINITY));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.POSITIVE_INFINITY));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteDoubles",
    "start_line": 323,
    "end_line": 328,
    "code": "@Test\r\npublic void testNonFiniteDoubles() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    assertNonFiniteDoublesExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteDoublesWhenStrict",
    "start_line": 330,
    "end_line": 336,
    "code": "@Test\r\npublic void testNonFiniteDoublesWhenStrict() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.STRICT);\r\n    assertNonFiniteDoublesExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "assertNonFiniteNumbersExceptions",
    "start_line": 338,
    "end_line": 369,
    "code": "private static void assertNonFiniteNumbersExceptions(JsonWriter jsonWriter) throws IOException {\r\n    jsonWriter.beginArray();\r\n    IllegalArgumentException expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.NaN)));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was NaN\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY)));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was -Infinity\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY)));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n    expected = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(new LazilyParsedNumber(\"Infinity\")));\r\n    assertThat(expected).hasMessageThat().isEqualTo(\"Numeric values must be finite, but was Infinity\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteNumbers",
    "start_line": 371,
    "end_line": 376,
    "code": "@Test\r\npublic void testNonFiniteNumbers() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    assertNonFiniteNumbersExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteNumbersWhenStrict",
    "start_line": 378,
    "end_line": 384,
    "code": "@Test\r\npublic void testNonFiniteNumbersWhenStrict() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.STRICT);\r\n    assertNonFiniteNumbersExceptions(jsonWriter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteFloatsWhenLenient",
    "start_line": 386,
    "end_line": 397,
    "code": "@Test\r\npublic void testNonFiniteFloatsWhenLenient() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.LENIENT);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(Float.NaN);\r\n    jsonWriter.value(Float.NEGATIVE_INFINITY);\r\n    jsonWriter.value(Float.POSITIVE_INFINITY);\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteDoublesWhenLenient",
    "start_line": 399,
    "end_line": 410,
    "code": "@Test\r\npublic void testNonFiniteDoublesWhenLenient() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.LENIENT);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(Double.NaN);\r\n    jsonWriter.value(Double.NEGATIVE_INFINITY);\r\n    jsonWriter.value(Double.POSITIVE_INFINITY);\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNonFiniteNumbersWhenLenient",
    "start_line": 412,
    "end_line": 424,
    "code": "@Test\r\npublic void testNonFiniteNumbersWhenLenient() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setStrictness(Strictness.LENIENT);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(Double.valueOf(Double.NaN));\r\n    jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY));\r\n    jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY));\r\n    jsonWriter.value(new LazilyParsedNumber(\"Infinity\"));\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[NaN,-Infinity,Infinity,Infinity]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testFloats",
    "start_line": 426,
    "end_line": 455,
    "code": "@Test\r\npublic void testFloats() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(-0.0f);\r\n    jsonWriter.value(1.0f);\r\n    jsonWriter.value(Float.MAX_VALUE);\r\n    jsonWriter.value(Float.MIN_VALUE);\r\n    jsonWriter.value(0.0f);\r\n    jsonWriter.value(-0.5f);\r\n    jsonWriter.value(2.2250739E-38f);\r\n    jsonWriter.value(3.723379f);\r\n    jsonWriter.value((float) Math.PI);\r\n    jsonWriter.value((float) Math.E);\r\n    jsonWriter.endArray();\r\n    jsonWriter.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[-0.0,\" + \"1.0,\" + \"3.4028235E38,\" + \"1.4E-45,\" + \"0.0,\" + \"-0.5,\" + \"2.2250739E-38,\" + \"3.723379,\" + \"3.1415927,\" + \"2.7182817]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testDoubles",
    "start_line": 457,
    "end_line": 484,
    "code": "@Test\r\npublic void testDoubles() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(-0.0);\r\n    jsonWriter.value(1.0);\r\n    jsonWriter.value(Double.MAX_VALUE);\r\n    jsonWriter.value(Double.MIN_VALUE);\r\n    jsonWriter.value(0.0);\r\n    jsonWriter.value(-0.5);\r\n    jsonWriter.value(2.2250738585072014E-308);\r\n    jsonWriter.value(Math.PI);\r\n    jsonWriter.value(Math.E);\r\n    jsonWriter.endArray();\r\n    jsonWriter.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[-0.0,\" + \"1.0,\" + \"1.7976931348623157E308,\" + \"4.9E-324,\" + \"0.0,\" + \"-0.5,\" + \"2.2250738585072014E-308,\" + \"3.141592653589793,\" + \"2.718281828459045]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testLongs",
    "start_line": 486,
    "end_line": 500,
    "code": "@Test\r\npublic void testLongs() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(0);\r\n    jsonWriter.value(1);\r\n    jsonWriter.value(-1);\r\n    jsonWriter.value(Long.MIN_VALUE);\r\n    jsonWriter.value(Long.MAX_VALUE);\r\n    jsonWriter.endArray();\r\n    jsonWriter.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[0,\" + \"1,\" + \"-1,\" + \"-9223372036854775808,\" + \"9223372036854775807]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNumbers",
    "start_line": 502,
    "end_line": 519,
    "code": "@Test\r\npublic void testNumbers() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(new BigInteger(\"0\"));\r\n    jsonWriter.value(new BigInteger(\"9223372036854775808\"));\r\n    jsonWriter.value(new BigInteger(\"-9223372036854775809\"));\r\n    jsonWriter.value(new BigDecimal(\"3.141592653589793238462643383\"));\r\n    jsonWriter.endArray();\r\n    jsonWriter.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[0,\" + \"9223372036854775808,\" + \"-9223372036854775809,\" + \"3.141592653589793238462643383]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNumbersCustomClass",
    "start_line": 522,
    "end_line": 554,
    "code": "/**\r\n * Tests writing {@code Number} instances which are not one of the standard JDK ones.\r\n */\r\n@Test\r\npublic void testNumbersCustomClass() throws IOException {\r\n    String[] validNumbers = { \"-0.0\", \"1.0\", \"1.7976931348623157E308\", \"4.9E-324\", \"0.0\", \"0.00\", \"-0.5\", \"2.2250738585072014E-308\", \"3.141592653589793\", \"2.718281828459045\", \"0\", \"0.01\", \"0e0\", \"1e+0\", \"1e-0\", // leading 0 is allowed for exponent\r\n    \"1e0000\", \"1e00001\", \"1e+1\" };\r\n    for (String validNumber : validNumbers) {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.value(new LazilyParsedNumber(validNumber));\r\n        jsonWriter.close();\r\n        assertThat(stringWriter.toString()).isEqualTo(validNumber);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testMalformedNumbers",
    "start_line": 556,
    "end_line": 598,
    "code": "@Test\r\npublic void testMalformedNumbers() throws IOException {\r\n    String[] malformedNumbers = { \"some text\", \"\", \".\", \"00\", \"01\", \"-00\", \"-\", \"--1\", // plus sign is not allowed for integer part\r\n    \"+1\", \"+\", \"1,0\", \"1,000\", // decimal digit is required\r\n    \"0.\", // integer part is required\r\n    \".1\", \"e1\", \".e1\", \".1e1\", \"1e-\", \"1e+\", \"1e--1\", \"1e+-1\", \"1e1e1\", \"1+e1\", \"1e1.0\" };\r\n    for (String malformedNumber : malformedNumbers) {\r\n        JsonWriter jsonWriter = new JsonWriter(new StringWriter());\r\n        var e = assertThrows(IllegalArgumentException.class, () -> jsonWriter.value(new LazilyParsedNumber(malformedNumber)));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"String created by class com.google.gson.internal.LazilyParsedNumber is not a valid\" + \" JSON number: \" + malformedNumber);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testBooleans",
    "start_line": 600,
    "end_line": 609,
    "code": "@Test\r\npublic void testBooleans() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(true);\r\n    jsonWriter.value(false);\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[true,false]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testBoxedBooleans",
    "start_line": 611,
    "end_line": 621,
    "code": "@Test\r\npublic void testBoxedBooleans() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value((Boolean) true);\r\n    jsonWriter.value((Boolean) false);\r\n    jsonWriter.value((Boolean) null);\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[true,false,null]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testNulls",
    "start_line": 623,
    "end_line": 631,
    "code": "@Test\r\npublic void testNulls() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.nullValue();\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[null]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testStrings",
    "start_line": 633,
    "end_line": 677,
    "code": "@Test\r\npublic void testStrings() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(\"a\");\r\n    jsonWriter.value(\"a\\\"\");\r\n    jsonWriter.value(\"\\\"\");\r\n    jsonWriter.value(\":\");\r\n    jsonWriter.value(\",\");\r\n    jsonWriter.value(\"\\b\");\r\n    jsonWriter.value(\"\\f\");\r\n    jsonWriter.value(\"\\n\");\r\n    jsonWriter.value(\"\\r\");\r\n    jsonWriter.value(\"\\t\");\r\n    jsonWriter.value(\" \");\r\n    jsonWriter.value(\"\\\\\");\r\n    jsonWriter.value(\"{\");\r\n    jsonWriter.value(\"}\");\r\n    jsonWriter.value(\"[\");\r\n    jsonWriter.value(\"]\");\r\n    jsonWriter.value(\"\\0\");\r\n    jsonWriter.value(\"\\u0019\");\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[\\\"a\\\",\" + \"\\\"a\\\\\\\"\\\",\" + \"\\\"\\\\\\\"\\\",\" + \"\\\":\\\",\" + \"\\\",\\\",\" + \"\\\"\\\\b\\\",\" + \"\\\"\\\\f\\\",\" + \"\\\"\\\\n\\\",\" + \"\\\"\\\\r\\\",\" + \"\\\"\\\\t\\\",\" + \"\\\" \\\",\" + \"\\\"\\\\\\\\\\\",\" + \"\\\"{\\\",\" + \"\\\"}\\\",\" + \"\\\"[\\\",\" + \"\\\"]\\\",\" + \"\\\"\\\\u0000\\\",\" + \"\\\"\\\\u0019\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testUnicodeLineBreaksEscaped",
    "start_line": 679,
    "end_line": 689,
    "code": "@Test\r\npublic void testUnicodeLineBreaksEscaped() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(\"\\u2028 \\u2029\");\r\n    jsonWriter.endArray();\r\n    // JSON specification does not require that they are escaped, but Gson escapes them for\r\n    // compatibility with JavaScript where they are considered line breaks\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[\\\"\\\\u2028 \\\\u2029\\\"]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyArray",
    "start_line": 691,
    "end_line": 698,
    "code": "@Test\r\npublic void testEmptyArray() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyObject",
    "start_line": 700,
    "end_line": 707,
    "code": "@Test\r\npublic void testEmptyObject() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.endObject();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testObjectsInArrays",
    "start_line": 709,
    "end_line": 725,
    "code": "@Test\r\npublic void testObjectsInArrays() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginArray();\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\").value(5);\r\n    jsonWriter.name(\"b\").value(false);\r\n    jsonWriter.endObject();\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"c\").value(6);\r\n    jsonWriter.name(\"d\").value(true);\r\n    jsonWriter.endObject();\r\n    jsonWriter.endArray();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[{\\\"a\\\":5,\\\"b\\\":false},\" + \"{\\\"c\\\":6,\\\"d\\\":true}]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testArraysInObjects",
    "start_line": 727,
    "end_line": 744,
    "code": "@Test\r\npublic void testArraysInObjects() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(5);\r\n    jsonWriter.value(false);\r\n    jsonWriter.endArray();\r\n    jsonWriter.name(\"b\");\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(6);\r\n    jsonWriter.value(true);\r\n    jsonWriter.endArray();\r\n    jsonWriter.endObject();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":[5,false],\" + \"\\\"b\\\":[6,true]}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testDeepNestingArrays",
    "start_line": 746,
    "end_line": 757,
    "code": "@Test\r\npublic void testDeepNestingArrays() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    for (int i = 0; i < 20; i++) {\r\n        jsonWriter.beginArray();\r\n    }\r\n    for (int i = 0; i < 20; i++) {\r\n        jsonWriter.endArray();\r\n    }\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testDeepNestingObjects",
    "start_line": 759,
    "end_line": 777,
    "code": "@Test\r\npublic void testDeepNestingObjects() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    for (int i = 0; i < 20; i++) {\r\n        jsonWriter.name(\"a\");\r\n        jsonWriter.beginObject();\r\n    }\r\n    for (int i = 0; i < 20; i++) {\r\n        jsonWriter.endObject();\r\n    }\r\n    jsonWriter.endObject();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":\" + \"{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\\\"a\\\":{\" + \"}}}}}}}}}}}}}}}}}}}}}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testRepeatedName",
    "start_line": 779,
    "end_line": 789,
    "code": "@Test\r\npublic void testRepeatedName() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\").value(true);\r\n    jsonWriter.name(\"a\").value(false);\r\n    jsonWriter.endObject();\r\n    // JsonWriter doesn't attempt to detect duplicate names\r\n    assertThat(stringWriter.toString()).isEqualTo(\"{\\\"a\\\":true,\\\"a\\\":false}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testPrettyPrintObject",
    "start_line": 791,
    "end_line": 828,
    "code": "@Test\r\npublic void testPrettyPrintObject() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setIndent(\"   \");\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\").value(true);\r\n    jsonWriter.name(\"b\").value(false);\r\n    jsonWriter.name(\"c\").value(5.0);\r\n    jsonWriter.name(\"e\").nullValue();\r\n    jsonWriter.name(\"f\").beginArray();\r\n    jsonWriter.value(6.0);\r\n    jsonWriter.value(7.0);\r\n    jsonWriter.endArray();\r\n    jsonWriter.name(\"g\").beginObject();\r\n    jsonWriter.name(\"h\").value(8.0);\r\n    jsonWriter.name(\"i\").value(9.0);\r\n    jsonWriter.endObject();\r\n    jsonWriter.endObject();\r\n    String expected = \"{\\n\" + \"   \\\"a\\\": true,\\n\" + \"   \\\"b\\\": false,\\n\" + \"   \\\"c\\\": 5.0,\\n\" + \"   \\\"e\\\": null,\\n\" + \"   \\\"f\\\": [\\n\" + \"      6.0,\\n\" + \"      7.0\\n\" + \"   ],\\n\" + \"   \\\"g\\\": {\\n\" + \"      \\\"h\\\": 8.0,\\n\" + \"      \\\"i\\\": 9.0\\n\" + \"   }\\n\" + \"}\";\r\n    assertThat(stringWriter.toString()).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testPrettyPrintArray",
    "start_line": 830,
    "end_line": 867,
    "code": "@Test\r\npublic void testPrettyPrintArray() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setIndent(\"   \");\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(true);\r\n    jsonWriter.value(false);\r\n    jsonWriter.value(5.0);\r\n    jsonWriter.nullValue();\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\").value(6.0);\r\n    jsonWriter.name(\"b\").value(7.0);\r\n    jsonWriter.endObject();\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(8.0);\r\n    jsonWriter.value(9.0);\r\n    jsonWriter.endArray();\r\n    jsonWriter.endArray();\r\n    String expected = \"[\\n\" + \"   true,\\n\" + \"   false,\\n\" + \"   5.0,\\n\" + \"   null,\\n\" + \"   {\\n\" + \"      \\\"a\\\": 6.0,\\n\" + \"      \\\"b\\\": 7.0\\n\" + \"   },\\n\" + \"   [\\n\" + \"      8.0,\\n\" + \"      9.0\\n\" + \"   ]\\n\" + \"]\";\r\n    assertThat(stringWriter.toString()).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testClosedWriterThrowsOnStructure",
    "start_line": 869,
    "end_line": 889,
    "code": "@Test\r\npublic void testClosedWriterThrowsOnStructure() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    String expectedMessage = \"JsonWriter is closed.\";\r\n    var e = assertThrows(IllegalStateException.class, () -> writer.beginArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalStateException.class, () -> writer.endArray());\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalStateException.class, () -> writer.beginObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalStateException.class, () -> writer.endObject());\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testClosedWriterThrowsOnName",
    "start_line": 891,
    "end_line": 900,
    "code": "@Test\r\npublic void testClosedWriterThrowsOnName() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    var e = assertThrows(IllegalStateException.class, () -> writer.name(\"a\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testClosedWriterThrowsOnValue",
    "start_line": 902,
    "end_line": 911,
    "code": "@Test\r\npublic void testClosedWriterThrowsOnValue() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    var e = assertThrows(IllegalStateException.class, () -> writer.value(\"a\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testClosedWriterThrowsOnFlush",
    "start_line": 913,
    "end_line": 922,
    "code": "@Test\r\npublic void testClosedWriterThrowsOnFlush() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    var e = assertThrows(IllegalStateException.class, () -> writer.flush());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"JsonWriter is closed.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testWriterCloseIsIdempotent",
    "start_line": 924,
    "end_line": 934,
    "code": "@Test\r\npublic void testWriterCloseIsIdempotent() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter writer = new JsonWriter(stringWriter);\r\n    writer.beginArray();\r\n    writer.endArray();\r\n    writer.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n    writer.close();\r\n    assertThat(stringWriter.toString()).isEqualTo(\"[]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testSetGetFormattingStyle",
    "start_line": 936,
    "end_line": 964,
    "code": "@Test\r\npublic void testSetGetFormattingStyle() throws IOException {\r\n    String lineSeparator = \"\\r\\n\";\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    // Default should be FormattingStyle.COMPACT\r\n    assertThat(jsonWriter.getFormattingStyle()).isSameInstanceAs(FormattingStyle.COMPACT);\r\n    jsonWriter.setFormattingStyle(FormattingStyle.PRETTY.withIndent(\" \\t \").withNewline(lineSeparator));\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(true);\r\n    jsonWriter.value(\"text\");\r\n    jsonWriter.value(5.0);\r\n    jsonWriter.nullValue();\r\n    jsonWriter.endArray();\r\n    String expected = //\r\n    \"[\\r\\n\" + //\r\n    \" \\t true,\\r\\n\" + //\r\n    \" \\t \\\"text\\\",\\r\\n\" + //\r\n    \" \\t 5.0,\\r\\n\" + //\r\n    \" \\t null\\r\\n\" + \"]\";\r\n    assertThat(stringWriter.toString()).isEqualTo(expected);\r\n    assertThat(jsonWriter.getFormattingStyle().getNewline()).isEqualTo(lineSeparator);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  },
  {
    "type": "method",
    "name": "testIndentOverwritesFormattingStyle",
    "start_line": 966,
    "end_line": 990,
    "code": "@Test\r\npublic void testIndentOverwritesFormattingStyle() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.setFormattingStyle(FormattingStyle.COMPACT);\r\n    // Should overwrite formatting style\r\n    jsonWriter.setIndent(\"  \");\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(\"a\");\r\n    jsonWriter.beginArray();\r\n    jsonWriter.value(1);\r\n    jsonWriter.value(2);\r\n    jsonWriter.endArray();\r\n    jsonWriter.endObject();\r\n    String expected = //\r\n    \"{\\n\" + //\r\n    \"  \\\"a\\\": [\\n\" + //\r\n    \"    1,\\n\" + //\r\n    \"    2\\n\" + //\r\n    \"  ]\\n\" + \"}\";\r\n    assertThat(stringWriter.toString()).isEqualTo(expected);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\stream\\JsonWriterTest.java"
  }
]