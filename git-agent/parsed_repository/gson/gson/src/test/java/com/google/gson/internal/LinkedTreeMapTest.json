[
  {
    "type": "package",
    "name": "com.google.gson.internal",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.MoreAsserts",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.common.MoreAsserts;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ByteArrayInputStream",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.ByteArrayInputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ByteArrayOutputStream",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.io.ByteArrayOutputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ObjectInputStream",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.ObjectInputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ObjectOutputStream",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.io.ObjectOutputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Iterator",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.Iterator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map.Entry",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.Map.Entry;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Random",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Random;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "class",
    "name": "LinkedTreeMapTest",
    "start_line": 35,
    "end_line": 222,
    "code": "public final class LinkedTreeMapTest {\r\n\r\n    @Test\r\n    public void testIterationOrder() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"android\");\r\n        map.put(\"c\", \"cola\");\r\n        map.put(\"b\", \"bbq\");\r\n        assertThat(map.keySet()).containsExactly(\"a\", \"c\", \"b\").inOrder();\r\n        assertThat(map.values()).containsExactly(\"android\", \"cola\", \"bbq\").inOrder();\r\n    }\r\n\r\n    @Test\r\n    public void testRemoveRootDoesNotDoubleUnlink() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"android\");\r\n        map.put(\"c\", \"cola\");\r\n        map.put(\"b\", \"bbq\");\r\n        Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\r\n        it.next();\r\n        it.next();\r\n        it.next();\r\n        it.remove();\r\n        assertThat(map.keySet()).containsExactly(\"a\", \"c\").inOrder();\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"ModifiedButNotUsed\")\r\n    public void testPutNullKeyFails() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        var e = assertThrows(NullPointerException.class, () -> map.put(null, \"android\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"key == null\");\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"ModifiedButNotUsed\")\r\n    public void testPutNonComparableKeyFails() {\r\n        LinkedTreeMap<Object, String> map = new LinkedTreeMap<>();\r\n        assertThrows(ClassCastException.class, () -> map.put(new Object(), \"android\"));\r\n    }\r\n\r\n    @Test\r\n    public void testPutNullValue() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", null);\r\n        assertThat(map).hasSize(1);\r\n        assertThat(map.containsKey(\"a\")).isTrue();\r\n        assertThat(map.containsValue(null)).isTrue();\r\n        assertThat(map.get(\"a\")).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testPutNullValue_Forbidden() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>(false);\r\n        var e = assertThrows(NullPointerException.class, () -> map.put(\"a\", null));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n        assertThat(map).hasSize(0);\r\n        assertThat(map).doesNotContainKey(\"a\");\r\n        assertThat(map.containsValue(null)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testEntrySetValueNull() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"1\");\r\n        assertThat(map.get(\"a\")).isEqualTo(\"1\");\r\n        Entry<String, String> entry = map.entrySet().iterator().next();\r\n        assertThat(entry.getKey()).isEqualTo(\"a\");\r\n        assertThat(entry.getValue()).isEqualTo(\"1\");\r\n        entry.setValue(null);\r\n        assertThat(entry.getValue()).isNull();\r\n        assertThat(map.containsKey(\"a\")).isTrue();\r\n        assertThat(map.containsValue(null)).isTrue();\r\n        assertThat(map.get(\"a\")).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testEntrySetValueNull_Forbidden() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>(false);\r\n        map.put(\"a\", \"1\");\r\n        Entry<String, String> entry = map.entrySet().iterator().next();\r\n        var e = assertThrows(NullPointerException.class, () -> entry.setValue(null));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n        assertThat(entry.getValue()).isEqualTo(\"1\");\r\n        assertThat(map.get(\"a\")).isEqualTo(\"1\");\r\n        assertThat(map.containsValue(null)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testContainsNonComparableKeyReturnsFalse() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"android\");\r\n        assertThat(map).doesNotContainKey(new Object());\r\n    }\r\n\r\n    @Test\r\n    public void testContainsNullKeyIsAlwaysFalse() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        assertThat(map.containsKey(null)).isFalse();\r\n        map.put(\"a\", \"android\");\r\n        assertThat(map.containsKey(null)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testPutOverrides() throws Exception {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        assertThat(map.put(\"d\", \"donut\")).isNull();\r\n        assertThat(map.put(\"e\", \"eclair\")).isNull();\r\n        assertThat(map.put(\"f\", \"froyo\")).isNull();\r\n        assertThat(map).hasSize(3);\r\n        assertThat(map.get(\"d\")).isEqualTo(\"donut\");\r\n        assertThat(map.put(\"d\", \"done\")).isEqualTo(\"donut\");\r\n        assertThat(map).hasSize(3);\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyStringValues() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"\");\r\n        assertThat(map.containsKey(\"a\")).isTrue();\r\n        assertThat(map.get(\"a\")).isEqualTo(\"\");\r\n    }\r\n\r\n    @Test\r\n    public void testLargeSetOfRandomKeys() {\r\n        Random random = new Random(1367593214724L);\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        String[] keys = new String[1000];\r\n        for (int i = 0; i < keys.length; i++) {\r\n            keys[i] = Integer.toString(random.nextInt(), 36) + \"-\" + i;\r\n            map.put(keys[i], \"\" + i);\r\n        }\r\n        for (int i = 0; i < keys.length; i++) {\r\n            String key = keys[i];\r\n            assertThat(map.containsKey(key)).isTrue();\r\n            assertThat(map.get(key)).isEqualTo(\"\" + i);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testClear() {\r\n        LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", \"android\");\r\n        map.put(\"c\", \"cola\");\r\n        map.put(\"b\", \"bbq\");\r\n        map.clear();\r\n        assertThat(map.keySet()).isEmpty();\r\n        assertThat(map).isEmpty();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsAndHashCode() throws Exception {\r\n        LinkedTreeMap<String, Integer> map1 = new LinkedTreeMap<>();\r\n        map1.put(\"A\", 1);\r\n        map1.put(\"B\", 2);\r\n        map1.put(\"C\", 3);\r\n        map1.put(\"D\", 4);\r\n        LinkedTreeMap<String, Integer> map2 = new LinkedTreeMap<>();\r\n        map2.put(\"C\", 3);\r\n        map2.put(\"B\", 2);\r\n        map2.put(\"D\", 4);\r\n        map2.put(\"A\", 1);\r\n        MoreAsserts.assertEqualsAndHashCode(map1, map2);\r\n    }\r\n\r\n    @Test\r\n    public void testJavaSerialization() throws IOException, ClassNotFoundException {\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        ObjectOutputStream objOut = new ObjectOutputStream(out);\r\n        Map<String, Integer> map = new LinkedTreeMap<>();\r\n        map.put(\"a\", 1);\r\n        objOut.writeObject(map);\r\n        objOut.close();\r\n        ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\r\n        @SuppressWarnings(\"unchecked\")\r\n        Map<String, Integer> deserialized = (Map<String, Integer>) objIn.readObject();\r\n        assertThat(deserialized).isEqualTo(Collections.singletonMap(\"a\", 1));\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testIterationOrder",
    "start_line": 37,
    "end_line": 45,
    "code": "@Test\r\npublic void testIterationOrder() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"android\");\r\n    map.put(\"c\", \"cola\");\r\n    map.put(\"b\", \"bbq\");\r\n    assertThat(map.keySet()).containsExactly(\"a\", \"c\", \"b\").inOrder();\r\n    assertThat(map.values()).containsExactly(\"android\", \"cola\", \"bbq\").inOrder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testRemoveRootDoesNotDoubleUnlink",
    "start_line": 47,
    "end_line": 59,
    "code": "@Test\r\npublic void testRemoveRootDoesNotDoubleUnlink() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"android\");\r\n    map.put(\"c\", \"cola\");\r\n    map.put(\"b\", \"bbq\");\r\n    Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\r\n    it.next();\r\n    it.next();\r\n    it.next();\r\n    it.remove();\r\n    assertThat(map.keySet()).containsExactly(\"a\", \"c\").inOrder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testPutNullKeyFails",
    "start_line": 61,
    "end_line": 67,
    "code": "@Test\r\n@SuppressWarnings(\"ModifiedButNotUsed\")\r\npublic void testPutNullKeyFails() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    var e = assertThrows(NullPointerException.class, () -> map.put(null, \"android\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"key == null\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testPutNonComparableKeyFails",
    "start_line": 69,
    "end_line": 74,
    "code": "@Test\r\n@SuppressWarnings(\"ModifiedButNotUsed\")\r\npublic void testPutNonComparableKeyFails() {\r\n    LinkedTreeMap<Object, String> map = new LinkedTreeMap<>();\r\n    assertThrows(ClassCastException.class, () -> map.put(new Object(), \"android\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testPutNullValue",
    "start_line": 76,
    "end_line": 85,
    "code": "@Test\r\npublic void testPutNullValue() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", null);\r\n    assertThat(map).hasSize(1);\r\n    assertThat(map.containsKey(\"a\")).isTrue();\r\n    assertThat(map.containsValue(null)).isTrue();\r\n    assertThat(map.get(\"a\")).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testPutNullValue_Forbidden",
    "start_line": 87,
    "end_line": 96,
    "code": "@Test\r\npublic void testPutNullValue_Forbidden() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>(false);\r\n    var e = assertThrows(NullPointerException.class, () -> map.put(\"a\", null));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n    assertThat(map).hasSize(0);\r\n    assertThat(map).doesNotContainKey(\"a\");\r\n    assertThat(map.containsValue(null)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testEntrySetValueNull",
    "start_line": 98,
    "end_line": 112,
    "code": "@Test\r\npublic void testEntrySetValueNull() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"1\");\r\n    assertThat(map.get(\"a\")).isEqualTo(\"1\");\r\n    Entry<String, String> entry = map.entrySet().iterator().next();\r\n    assertThat(entry.getKey()).isEqualTo(\"a\");\r\n    assertThat(entry.getValue()).isEqualTo(\"1\");\r\n    entry.setValue(null);\r\n    assertThat(entry.getValue()).isNull();\r\n    assertThat(map.containsKey(\"a\")).isTrue();\r\n    assertThat(map.containsValue(null)).isTrue();\r\n    assertThat(map.get(\"a\")).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testEntrySetValueNull_Forbidden",
    "start_line": 114,
    "end_line": 125,
    "code": "@Test\r\npublic void testEntrySetValueNull_Forbidden() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>(false);\r\n    map.put(\"a\", \"1\");\r\n    Entry<String, String> entry = map.entrySet().iterator().next();\r\n    var e = assertThrows(NullPointerException.class, () -> entry.setValue(null));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n    assertThat(entry.getValue()).isEqualTo(\"1\");\r\n    assertThat(map.get(\"a\")).isEqualTo(\"1\");\r\n    assertThat(map.containsValue(null)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testContainsNonComparableKeyReturnsFalse",
    "start_line": 127,
    "end_line": 132,
    "code": "@Test\r\npublic void testContainsNonComparableKeyReturnsFalse() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"android\");\r\n    assertThat(map).doesNotContainKey(new Object());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testContainsNullKeyIsAlwaysFalse",
    "start_line": 134,
    "end_line": 140,
    "code": "@Test\r\npublic void testContainsNullKeyIsAlwaysFalse() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    assertThat(map.containsKey(null)).isFalse();\r\n    map.put(\"a\", \"android\");\r\n    assertThat(map.containsKey(null)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testPutOverrides",
    "start_line": 142,
    "end_line": 153,
    "code": "@Test\r\npublic void testPutOverrides() throws Exception {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    assertThat(map.put(\"d\", \"donut\")).isNull();\r\n    assertThat(map.put(\"e\", \"eclair\")).isNull();\r\n    assertThat(map.put(\"f\", \"froyo\")).isNull();\r\n    assertThat(map).hasSize(3);\r\n    assertThat(map.get(\"d\")).isEqualTo(\"donut\");\r\n    assertThat(map.put(\"d\", \"done\")).isEqualTo(\"donut\");\r\n    assertThat(map).hasSize(3);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyStringValues",
    "start_line": 155,
    "end_line": 161,
    "code": "@Test\r\npublic void testEmptyStringValues() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"\");\r\n    assertThat(map.containsKey(\"a\")).isTrue();\r\n    assertThat(map.get(\"a\")).isEqualTo(\"\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testLargeSetOfRandomKeys",
    "start_line": 163,
    "end_line": 178,
    "code": "@Test\r\npublic void testLargeSetOfRandomKeys() {\r\n    Random random = new Random(1367593214724L);\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    String[] keys = new String[1000];\r\n    for (int i = 0; i < keys.length; i++) {\r\n        keys[i] = Integer.toString(random.nextInt(), 36) + \"-\" + i;\r\n        map.put(keys[i], \"\" + i);\r\n    }\r\n    for (int i = 0; i < keys.length; i++) {\r\n        String key = keys[i];\r\n        assertThat(map.containsKey(key)).isTrue();\r\n        assertThat(map.get(key)).isEqualTo(\"\" + i);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testClear",
    "start_line": 180,
    "end_line": 189,
    "code": "@Test\r\npublic void testClear() {\r\n    LinkedTreeMap<String, String> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", \"android\");\r\n    map.put(\"c\", \"cola\");\r\n    map.put(\"b\", \"bbq\");\r\n    map.clear();\r\n    assertThat(map.keySet()).isEmpty();\r\n    assertThat(map).isEmpty();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsAndHashCode",
    "start_line": 191,
    "end_line": 206,
    "code": "@Test\r\npublic void testEqualsAndHashCode() throws Exception {\r\n    LinkedTreeMap<String, Integer> map1 = new LinkedTreeMap<>();\r\n    map1.put(\"A\", 1);\r\n    map1.put(\"B\", 2);\r\n    map1.put(\"C\", 3);\r\n    map1.put(\"D\", 4);\r\n    LinkedTreeMap<String, Integer> map2 = new LinkedTreeMap<>();\r\n    map2.put(\"C\", 3);\r\n    map2.put(\"B\", 2);\r\n    map2.put(\"D\", 4);\r\n    map2.put(\"A\", 1);\r\n    MoreAsserts.assertEqualsAndHashCode(map1, map2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  },
  {
    "type": "method",
    "name": "testJavaSerialization",
    "start_line": 208,
    "end_line": 221,
    "code": "@Test\r\npublic void testJavaSerialization() throws IOException, ClassNotFoundException {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    ObjectOutputStream objOut = new ObjectOutputStream(out);\r\n    Map<String, Integer> map = new LinkedTreeMap<>();\r\n    map.put(\"a\", 1);\r\n    objOut.writeObject(map);\r\n    objOut.close();\r\n    ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<String, Integer> deserialized = (Map<String, Integer>) objIn.readObject();\r\n    assertThat(deserialized).isEqualTo(Collections.singletonMap(\"a\", 1));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\LinkedTreeMapTest.java"
  }
]