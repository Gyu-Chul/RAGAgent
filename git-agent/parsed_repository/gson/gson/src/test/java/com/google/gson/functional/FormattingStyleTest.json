[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 19,
    "end_line": 19,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.FormattingStyle",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.FormattingStyle;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "java.util.LinkedHashMap",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.LinkedHashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 29,
    "end_line": 29,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.runner.RunWith",
    "start_line": 30,
    "end_line": 30,
    "code": "import org.junit.runner.RunWith;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.runners.JUnit4",
    "start_line": 31,
    "end_line": 31,
    "code": "import org.junit.runners.JUnit4;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "class",
    "name": "FormattingStyleTest",
    "start_line": 38,
    "end_line": 205,
    "code": "/**\r\n * Functional tests for formatting styles.\r\n *\r\n * @author Mihai Nita\r\n */\r\n@RunWith(JUnit4.class)\r\npublic class FormattingStyleTest {\r\n\r\n    // Create new input object every time to protect against tests accidentally modifying input\r\n    private static Map<String, List<Integer>> createInput() {\r\n        Map<String, List<Integer>> map = new LinkedHashMap<>();\r\n        map.put(\"a\", Arrays.asList(1, 2));\r\n        return map;\r\n    }\r\n\r\n    private static String buildExpected(String newline, String indent, boolean spaceAfterSeparators) {\r\n        String expected = \"{<EOL><INDENT>\\\"a\\\":<COLON_SPACE>[<EOL><INDENT><INDENT>1,<COMMA_SPACE><EOL><INDENT><INDENT>2<EOL><INDENT>]<EOL>}\";\r\n        String commaSpace = spaceAfterSeparators && newline.isEmpty() ? \" \" : \"\";\r\n        return expected.replace(\"<EOL>\", newline).replace(\"<INDENT>\", indent).replace(\"<COLON_SPACE>\", spaceAfterSeparators ? \" \" : \"\").replace(\"<COMMA_SPACE>\", commaSpace);\r\n    }\r\n\r\n    // Various valid strings that can be used for newline and indent\r\n    private static final String[] TEST_NEWLINES = { \"\", \"\\r\", \"\\n\", \"\\r\\n\", \"\\n\\r\\r\\n\", System.lineSeparator() };\r\n\r\n    private static final String[] TEST_INDENTS = { \"\", \"  \", \"    \", \"\\t\", \" \\t \\t\" };\r\n\r\n    @Test\r\n    public void testDefault() {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        String json = gson.toJson(createInput());\r\n        assertThat(json).isEqualTo(buildExpected(\"\\n\", \"  \", true));\r\n    }\r\n\r\n    @Test\r\n    public void testVariousCombinationsParse() {\r\n        // Mixing various indent and newline styles in the same string, to be parsed.\r\n        String jsonStringMix = \"{\\r\\t'a':\\r\\n[        1,2\\t]\\n}\";\r\n        TypeToken<Map<String, List<Integer>>> inputType = new TypeToken<>() {\r\n        };\r\n        Map<String, List<Integer>> actualParsed;\r\n        // Test all that all combinations of newline can be parsed and generate the same INPUT.\r\n        for (String indent : TEST_INDENTS) {\r\n            for (String newline : TEST_NEWLINES) {\r\n                FormattingStyle style = FormattingStyle.PRETTY.withNewline(newline).withIndent(indent);\r\n                Gson gson = new GsonBuilder().setFormattingStyle(style).create();\r\n                String toParse = buildExpected(newline, indent, true);\r\n                actualParsed = gson.fromJson(toParse, inputType);\r\n                assertThat(actualParsed).isEqualTo(createInput());\r\n                // Parse the mixed string with the gson parsers configured with various newline / indents.\r\n                actualParsed = gson.fromJson(jsonStringMix, inputType);\r\n                assertThat(actualParsed).isEqualTo(createInput());\r\n            }\r\n        }\r\n    }\r\n\r\n    private static String toJson(Object obj, FormattingStyle style) {\r\n        return new GsonBuilder().setFormattingStyle(style).create().toJson(obj);\r\n    }\r\n\r\n    @Test\r\n    public void testFormatCompact() {\r\n        String json = toJson(createInput(), FormattingStyle.COMPACT);\r\n        String expectedJson = buildExpected(\"\", \"\", false);\r\n        assertThat(json).isEqualTo(expectedJson);\r\n        // Sanity check to verify that `buildExpected` works correctly\r\n        assertThat(json).isEqualTo(\"{\\\"a\\\":[1,2]}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFormatPretty() {\r\n        String json = toJson(createInput(), FormattingStyle.PRETTY);\r\n        String expectedJson = buildExpected(\"\\n\", \"  \", true);\r\n        assertThat(json).isEqualTo(expectedJson);\r\n        // Sanity check to verify that `buildExpected` works correctly\r\n        assertThat(json).isEqualTo(//\r\n        \"{\\n\" + //\r\n        \"  \\\"a\\\": [\\n\" + //\r\n        \"    1,\\n\" + //\r\n        \"    2\\n\" + //\r\n        \"  ]\\n\" + \"}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFormatPrettySingleLine() {\r\n        FormattingStyle style = FormattingStyle.COMPACT.withSpaceAfterSeparators(true);\r\n        String json = toJson(createInput(), style);\r\n        String expectedJson = buildExpected(\"\", \"\", true);\r\n        assertThat(json).isEqualTo(expectedJson);\r\n        // Sanity check to verify that `buildExpected` works correctly\r\n        assertThat(json).isEqualTo(\"{\\\"a\\\": [1, 2]}\");\r\n    }\r\n\r\n    @Test\r\n    public void testFormat() {\r\n        for (String newline : TEST_NEWLINES) {\r\n            for (String indent : TEST_INDENTS) {\r\n                for (boolean spaceAfterSeparators : new boolean[] { true, false }) {\r\n                    FormattingStyle style = FormattingStyle.COMPACT.withNewline(newline).withIndent(indent).withSpaceAfterSeparators(spaceAfterSeparators);\r\n                    String json = toJson(createInput(), style);\r\n                    String expectedJson = buildExpected(newline, indent, spaceAfterSeparators);\r\n                    assertThat(json).isEqualTo(expectedJson);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be able to convert {@link FormattingStyle#COMPACT} to {@link FormattingStyle#PRETTY}\r\n     * using the {@code withX} methods.\r\n     */\r\n    @Test\r\n    public void testCompactToPretty() {\r\n        FormattingStyle style = FormattingStyle.COMPACT.withNewline(\"\\n\").withIndent(\"  \").withSpaceAfterSeparators(true);\r\n        String json = toJson(createInput(), style);\r\n        String expectedJson = toJson(createInput(), FormattingStyle.PRETTY);\r\n        assertThat(json).isEqualTo(expectedJson);\r\n    }\r\n\r\n    /**\r\n     * Should be able to convert {@link FormattingStyle#PRETTY} to {@link FormattingStyle#COMPACT}\r\n     * using the {@code withX} methods.\r\n     */\r\n    @Test\r\n    public void testPrettyToCompact() {\r\n        FormattingStyle style = FormattingStyle.PRETTY.withNewline(\"\").withIndent(\"\").withSpaceAfterSeparators(false);\r\n        String json = toJson(createInput(), style);\r\n        String expectedJson = toJson(createInput(), FormattingStyle.COMPACT);\r\n        assertThat(json).isEqualTo(expectedJson);\r\n    }\r\n\r\n    @Test\r\n    public void testStyleValidations() {\r\n        // TBD if we want to accept \\u2028 and \\u2029. For now we don't because JSON specification\r\n        // does not consider them to be newlines\r\n        var e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withNewline(\"\\u2028\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of \\\\n and \\\\r are allowed in newline.\");\r\n        e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withNewline(\"NL\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of \\\\n and \\\\r are allowed in newline.\");\r\n        e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withIndent(\"\\f\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of spaces and tabs are allowed in indent.\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "field",
    "name": "TEST_NEWLINES",
    "start_line": 60,
    "end_line": 62,
    "code": "// Various valid strings that can be used for newline and indent\r\nprivate static final String[] TEST_NEWLINES = { \"\", \"\\r\", \"\\n\", \"\\r\\n\", \"\\n\\r\\r\\n\", System.lineSeparator() };",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "field",
    "name": "TEST_INDENTS",
    "start_line": 63,
    "end_line": 63,
    "code": "private static final String[] TEST_INDENTS = { \"\", \"  \", \"    \", \"\\t\", \" \\t \\t\" };",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "createInput",
    "start_line": 42,
    "end_line": 46,
    "code": "// Create new input object every time to protect against tests accidentally modifying input\r\nprivate static Map<String, List<Integer>> createInput() {\r\n    Map<String, List<Integer>> map = new LinkedHashMap<>();\r\n    map.put(\"a\", Arrays.asList(1, 2));\r\n    return map;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "buildExpected",
    "start_line": 48,
    "end_line": 57,
    "code": "private static String buildExpected(String newline, String indent, boolean spaceAfterSeparators) {\r\n    String expected = \"{<EOL><INDENT>\\\"a\\\":<COLON_SPACE>[<EOL><INDENT><INDENT>1,<COMMA_SPACE><EOL><INDENT><INDENT>2<EOL><INDENT>]<EOL>}\";\r\n    String commaSpace = spaceAfterSeparators && newline.isEmpty() ? \" \" : \"\";\r\n    return expected.replace(\"<EOL>\", newline).replace(\"<INDENT>\", indent).replace(\"<COLON_SPACE>\", spaceAfterSeparators ? \" \" : \"\").replace(\"<COMMA_SPACE>\", commaSpace);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testDefault",
    "start_line": 65,
    "end_line": 70,
    "code": "@Test\r\npublic void testDefault() {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    String json = gson.toJson(createInput());\r\n    assertThat(json).isEqualTo(buildExpected(\"\\n\", \"  \", true));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testVariousCombinationsParse",
    "start_line": 72,
    "end_line": 94,
    "code": "@Test\r\npublic void testVariousCombinationsParse() {\r\n    // Mixing various indent and newline styles in the same string, to be parsed.\r\n    String jsonStringMix = \"{\\r\\t'a':\\r\\n[        1,2\\t]\\n}\";\r\n    TypeToken<Map<String, List<Integer>>> inputType = new TypeToken<>() {\r\n    };\r\n    Map<String, List<Integer>> actualParsed;\r\n    // Test all that all combinations of newline can be parsed and generate the same INPUT.\r\n    for (String indent : TEST_INDENTS) {\r\n        for (String newline : TEST_NEWLINES) {\r\n            FormattingStyle style = FormattingStyle.PRETTY.withNewline(newline).withIndent(indent);\r\n            Gson gson = new GsonBuilder().setFormattingStyle(style).create();\r\n            String toParse = buildExpected(newline, indent, true);\r\n            actualParsed = gson.fromJson(toParse, inputType);\r\n            assertThat(actualParsed).isEqualTo(createInput());\r\n            // Parse the mixed string with the gson parsers configured with various newline / indents.\r\n            actualParsed = gson.fromJson(jsonStringMix, inputType);\r\n            assertThat(actualParsed).isEqualTo(createInput());\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 96,
    "end_line": 98,
    "code": "private static String toJson(Object obj, FormattingStyle style) {\r\n    return new GsonBuilder().setFormattingStyle(style).create().toJson(obj);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testFormatCompact",
    "start_line": 100,
    "end_line": 107,
    "code": "@Test\r\npublic void testFormatCompact() {\r\n    String json = toJson(createInput(), FormattingStyle.COMPACT);\r\n    String expectedJson = buildExpected(\"\", \"\", false);\r\n    assertThat(json).isEqualTo(expectedJson);\r\n    // Sanity check to verify that `buildExpected` works correctly\r\n    assertThat(json).isEqualTo(\"{\\\"a\\\":[1,2]}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testFormatPretty",
    "start_line": 109,
    "end_line": 123,
    "code": "@Test\r\npublic void testFormatPretty() {\r\n    String json = toJson(createInput(), FormattingStyle.PRETTY);\r\n    String expectedJson = buildExpected(\"\\n\", \"  \", true);\r\n    assertThat(json).isEqualTo(expectedJson);\r\n    // Sanity check to verify that `buildExpected` works correctly\r\n    assertThat(json).isEqualTo(//\r\n    \"{\\n\" + //\r\n    \"  \\\"a\\\": [\\n\" + //\r\n    \"    1,\\n\" + //\r\n    \"    2\\n\" + //\r\n    \"  ]\\n\" + \"}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testFormatPrettySingleLine",
    "start_line": 125,
    "end_line": 133,
    "code": "@Test\r\npublic void testFormatPrettySingleLine() {\r\n    FormattingStyle style = FormattingStyle.COMPACT.withSpaceAfterSeparators(true);\r\n    String json = toJson(createInput(), style);\r\n    String expectedJson = buildExpected(\"\", \"\", true);\r\n    assertThat(json).isEqualTo(expectedJson);\r\n    // Sanity check to verify that `buildExpected` works correctly\r\n    assertThat(json).isEqualTo(\"{\\\"a\\\": [1, 2]}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testFormat",
    "start_line": 135,
    "end_line": 152,
    "code": "@Test\r\npublic void testFormat() {\r\n    for (String newline : TEST_NEWLINES) {\r\n        for (String indent : TEST_INDENTS) {\r\n            for (boolean spaceAfterSeparators : new boolean[] { true, false }) {\r\n                FormattingStyle style = FormattingStyle.COMPACT.withNewline(newline).withIndent(indent).withSpaceAfterSeparators(spaceAfterSeparators);\r\n                String json = toJson(createInput(), style);\r\n                String expectedJson = buildExpected(newline, indent, spaceAfterSeparators);\r\n                assertThat(json).isEqualTo(expectedJson);\r\n            }\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testCompactToPretty",
    "start_line": 158,
    "end_line": 166,
    "code": "/**\r\n * Should be able to convert {@link FormattingStyle#COMPACT} to {@link FormattingStyle#PRETTY}\r\n * using the {@code withX} methods.\r\n */\r\n@Test\r\npublic void testCompactToPretty() {\r\n    FormattingStyle style = FormattingStyle.COMPACT.withNewline(\"\\n\").withIndent(\"  \").withSpaceAfterSeparators(true);\r\n    String json = toJson(createInput(), style);\r\n    String expectedJson = toJson(createInput(), FormattingStyle.PRETTY);\r\n    assertThat(json).isEqualTo(expectedJson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testPrettyToCompact",
    "start_line": 172,
    "end_line": 180,
    "code": "/**\r\n * Should be able to convert {@link FormattingStyle#PRETTY} to {@link FormattingStyle#COMPACT}\r\n * using the {@code withX} methods.\r\n */\r\n@Test\r\npublic void testPrettyToCompact() {\r\n    FormattingStyle style = FormattingStyle.PRETTY.withNewline(\"\").withIndent(\"\").withSpaceAfterSeparators(false);\r\n    String json = toJson(createInput(), style);\r\n    String expectedJson = toJson(createInput(), FormattingStyle.COMPACT);\r\n    assertThat(json).isEqualTo(expectedJson);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  },
  {
    "type": "method",
    "name": "testStyleValidations",
    "start_line": 182,
    "end_line": 204,
    "code": "@Test\r\npublic void testStyleValidations() {\r\n    // TBD if we want to accept \\u2028 and \\u2029. For now we don't because JSON specification\r\n    // does not consider them to be newlines\r\n    var e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withNewline(\"\\u2028\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of \\\\n and \\\\r are allowed in newline.\");\r\n    e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withNewline(\"NL\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of \\\\n and \\\\r are allowed in newline.\");\r\n    e = assertThrows(IllegalArgumentException.class, () -> FormattingStyle.PRETTY.withIndent(\"\\f\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Only combinations of spaces and tabs are allowed in indent.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\FormattingStyleTest.java"
  }
]