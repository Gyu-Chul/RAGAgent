[
  {
    "type": "package",
    "name": "com.google.gson.metrics",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.metrics;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.Expose",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.annotations.Expose;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringWriter",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.StringWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.HashMap",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.HashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 31,
    "end_line": 31,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Ignore",
    "start_line": 32,
    "end_line": 32,
    "code": "import org.junit.Ignore;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "class",
    "name": "PerformanceTest",
    "start_line": 42,
    "end_line": 368,
    "code": "/**\r\n * Tests to measure performance for Gson. All tests in this file will be disabled in code. To run\r\n * them remove the {@code @Ignore} annotation from the tests.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\n// allow System.out because test is for manual execution anyway\r\n@SuppressWarnings(\"SystemOut\")\r\npublic class PerformanceTest {\r\n\r\n    private static final int COLLECTION_SIZE = 5000;\r\n\r\n    private static final int NUM_ITERATIONS = 100;\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testDummy() {\r\n        // This is here to prevent Junit for complaining when we disable all tests.\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testStringDeserialization() {\r\n        StringBuilder sb = new StringBuilder(8096);\r\n        sb.append(\"Error Yippie\");\r\n        while (true) {\r\n            try {\r\n                String stackTrace = sb.toString();\r\n                sb.append(stackTrace);\r\n                String json = \"{\\\"message\\\":\\\"Error message.\\\",\" + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\r\n                parseLongJson(json);\r\n                System.out.println(\"Gson could handle a string of size: \" + stackTrace.length());\r\n            } catch (JsonParseException expected) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void parseLongJson(String json) throws JsonParseException {\r\n        ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\r\n        assertThat(target.message).contains(\"Error\");\r\n        assertThat(target.stackTrace).contains(\"Yippie\");\r\n    }\r\n\r\n    private static class ExceptionHolder {\r\n\r\n        public final String message;\r\n\r\n        public final String stackTrace;\r\n\r\n        // For use by Gson\r\n        @SuppressWarnings(\"unused\")\r\n        private ExceptionHolder() {\r\n            this(\"\", \"\");\r\n        }\r\n\r\n        public ExceptionHolder(String message, String stackTrace) {\r\n            this.message = message;\r\n            this.stackTrace = stackTrace;\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static class CollectionEntry {\r\n\r\n        final String name;\r\n\r\n        final String value;\r\n\r\n        // For use by Gson\r\n        private CollectionEntry() {\r\n            this(null, null);\r\n        }\r\n\r\n        CollectionEntry(String name, String value) {\r\n            this.name = name;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n     */\r\n    @Test\r\n    @Ignore\r\n    public void testLargeCollectionSerialization() {\r\n        int count = 1400000;\r\n        List<CollectionEntry> list = new ArrayList<>(count);\r\n        for (int i = 0; i < count; ++i) {\r\n            list.add(new CollectionEntry(\"name\" + i, \"value\" + i));\r\n        }\r\n        String unused = gson.toJson(list);\r\n    }\r\n\r\n    /**\r\n     * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n     */\r\n    @Test\r\n    @Ignore\r\n    public void testLargeCollectionDeserialization() {\r\n        StringBuilder sb = new StringBuilder();\r\n        int count = 87000;\r\n        boolean first = true;\r\n        sb.append('[');\r\n        for (int i = 0; i < count; ++i) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(\"{name:'name\").append(i).append(\"',value:'value\").append(i).append(\"'}\");\r\n        }\r\n        sb.append(']');\r\n        String json = sb.toString();\r\n        Type collectionType = new TypeToken<ArrayList<CollectionEntry>>() {\r\n        }.getType();\r\n        List<CollectionEntry> list = gson.fromJson(json, collectionType);\r\n        assertThat(list).hasSize(count);\r\n    }\r\n\r\n    /**\r\n     * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n     */\r\n    // Last I tested, Gson was able to serialize upto 14MB byte array\r\n    @Test\r\n    @Ignore\r\n    public void testByteArraySerialization() {\r\n        for (int size = 4145152; true; size += 1036288) {\r\n            byte[] ba = new byte[size];\r\n            for (int i = 0; i < size; ++i) {\r\n                ba[i] = 0x05;\r\n            }\r\n            String unused = gson.toJson(ba);\r\n            System.out.printf(\"Gson could serialize a byte array of size: %d\\n\", size);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n     */\r\n    // Last I tested, Gson was able to deserialize a byte array of 11MB\r\n    @Test\r\n    @Ignore\r\n    public void testByteArrayDeserialization() {\r\n        for (int numElements = 10639296; true; numElements += 16384) {\r\n            StringBuilder sb = new StringBuilder(numElements * 2);\r\n            sb.append(\"[\");\r\n            boolean first = true;\r\n            for (int i = 0; i < numElements; ++i) {\r\n                if (first) {\r\n                    first = false;\r\n                } else {\r\n                    sb.append(\",\");\r\n                }\r\n                sb.append(\"5\");\r\n            }\r\n            sb.append(\"]\");\r\n            String json = sb.toString();\r\n            byte[] ba = gson.fromJson(json, byte[].class);\r\n            System.out.printf(\"Gson could deserialize a byte array of size: %d\\n\", ba.length);\r\n        }\r\n    }\r\n\r\n    // The tests to measure serialization and deserialization performance of Gson\r\n    // Based on the discussion at\r\n    // http://groups.google.com/group/google-gson/browse_thread/thread/7a50b17a390dfaeb\r\n    // Test results: 10/19/2009\r\n    // Serialize classes avg time: 60 ms\r\n    // Deserialized classes avg time: 70 ms\r\n    // Serialize exposed classes avg time: 159 ms\r\n    // Deserialized exposed classes avg time: 173 ms\r\n    @Test\r\n    @Ignore\r\n    public void testSerializeClasses() {\r\n        ClassWithList c = new ClassWithList(\"str\");\r\n        for (int i = 0; i < COLLECTION_SIZE; ++i) {\r\n            c.list.add(new ClassWithField(\"element-\" + i));\r\n        }\r\n        StringWriter w = new StringWriter();\r\n        long t1 = System.currentTimeMillis();\r\n        for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n            gson.toJson(c, w);\r\n        }\r\n        long t2 = System.currentTimeMillis();\r\n        long avg = (t2 - t1) / NUM_ITERATIONS;\r\n        System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testDeserializeClasses() {\r\n        String json = buildJsonForClassWithList();\r\n        ClassWithList[] target = new ClassWithList[NUM_ITERATIONS];\r\n        long t1 = System.currentTimeMillis();\r\n        for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n            target[i] = gson.fromJson(json, ClassWithList.class);\r\n        }\r\n        long t2 = System.currentTimeMillis();\r\n        long avg = (t2 - t1) / NUM_ITERATIONS;\r\n        System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testLargeObjectSerializationAndDeserialization() {\r\n        Map<String, Long> largeObject = new HashMap<>();\r\n        for (long l = 0; l < 100000; l++) {\r\n            largeObject.put(\"field\" + l, l);\r\n        }\r\n        long t1 = System.currentTimeMillis();\r\n        String json = gson.toJson(largeObject);\r\n        long t2 = System.currentTimeMillis();\r\n        System.out.printf(\"Large object serialized in: %d ms\\n\", (t2 - t1));\r\n        t1 = System.currentTimeMillis();\r\n        Map<String, Long> unused = gson.fromJson(json, new TypeToken<Map<String, Long>>() {\r\n        }.getType());\r\n        t2 = System.currentTimeMillis();\r\n        System.out.printf(\"Large object deserialized in: %d ms\\n\", (t2 - t1));\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testSerializeExposedClasses() {\r\n        ClassWithListOfObjects c1 = new ClassWithListOfObjects(\"str\");\r\n        for (int i1 = 0; i1 < COLLECTION_SIZE; ++i1) {\r\n            c1.list.add(new ClassWithExposedField(\"element-\" + i1));\r\n        }\r\n        ClassWithListOfObjects c = c1;\r\n        StringWriter w = new StringWriter();\r\n        long t1 = System.currentTimeMillis();\r\n        for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n            gson.toJson(c, w);\r\n        }\r\n        long t2 = System.currentTimeMillis();\r\n        long avg = (t2 - t1) / NUM_ITERATIONS;\r\n        System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testDeserializeExposedClasses() {\r\n        String json = buildJsonForClassWithList();\r\n        ClassWithListOfObjects[] target = new ClassWithListOfObjects[NUM_ITERATIONS];\r\n        long t1 = System.currentTimeMillis();\r\n        for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n            target[i] = gson.fromJson(json, ClassWithListOfObjects.class);\r\n        }\r\n        long t2 = System.currentTimeMillis();\r\n        long avg = (t2 - t1) / NUM_ITERATIONS;\r\n        System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);\r\n    }\r\n\r\n    @Test\r\n    @Ignore\r\n    public void testLargeGsonMapRoundTrip() throws Exception {\r\n        Map<Long, Long> original = new HashMap<>();\r\n        for (long i = 0; i < 1000000; i++) {\r\n            original.put(i, i + 1);\r\n        }\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(original);\r\n        Type longToLong = new TypeToken<Map<Long, Long>>() {\r\n        }.getType();\r\n        Map<Long, Long> unused = gson.fromJson(json, longToLong);\r\n    }\r\n\r\n    private static String buildJsonForClassWithList() {\r\n        StringBuilder sb = new StringBuilder(\"{\");\r\n        sb.append(\"field:\").append(\"'str',\");\r\n        sb.append(\"list:[\");\r\n        boolean first = true;\r\n        for (int i = 0; i < COLLECTION_SIZE; ++i) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(\"{field:'element-\" + i + \"'}\");\r\n        }\r\n        sb.append(']');\r\n        sb.append('}');\r\n        String json = sb.toString();\r\n        return json;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class ClassWithList {\r\n\r\n        final String field;\r\n\r\n        final List<ClassWithField> list = new ArrayList<>(COLLECTION_SIZE);\r\n\r\n        ClassWithList() {\r\n            this(null);\r\n        }\r\n\r\n        ClassWithList(String field) {\r\n            this.field = field;\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class ClassWithField {\r\n\r\n        final String field;\r\n\r\n        ClassWithField() {\r\n            this(\"\");\r\n        }\r\n\r\n        public ClassWithField(String field) {\r\n            this.field = field;\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class ClassWithListOfObjects {\r\n\r\n        @Expose\r\n        final String field;\r\n\r\n        @Expose\r\n        final List<ClassWithExposedField> list = new ArrayList<>(COLLECTION_SIZE);\r\n\r\n        ClassWithListOfObjects() {\r\n            this(null);\r\n        }\r\n\r\n        ClassWithListOfObjects(String field) {\r\n            this.field = field;\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class ClassWithExposedField {\r\n\r\n        @Expose\r\n        final String field;\r\n\r\n        ClassWithExposedField() {\r\n            this(\"\");\r\n        }\r\n\r\n        ClassWithExposedField(String field) {\r\n            this.field = field;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "field",
    "name": "COLLECTION_SIZE",
    "start_line": 44,
    "end_line": 44,
    "code": "private static final int COLLECTION_SIZE = 5000;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "field",
    "name": "NUM_ITERATIONS",
    "start_line": 46,
    "end_line": 46,
    "code": "private static final int NUM_ITERATIONS = 100;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 48,
    "end_line": 48,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 50,
    "end_line": 53,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testDummy",
    "start_line": 55,
    "end_line": 58,
    "code": "@Test\r\npublic void testDummy() {\r\n    // This is here to prevent Junit for complaining when we disable all tests.\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testStringDeserialization",
    "start_line": 60,
    "end_line": 77,
    "code": "@Test\r\n@Ignore\r\npublic void testStringDeserialization() {\r\n    StringBuilder sb = new StringBuilder(8096);\r\n    sb.append(\"Error Yippie\");\r\n    while (true) {\r\n        try {\r\n            String stackTrace = sb.toString();\r\n            sb.append(stackTrace);\r\n            String json = \"{\\\"message\\\":\\\"Error message.\\\",\" + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\r\n            parseLongJson(json);\r\n            System.out.println(\"Gson could handle a string of size: \" + stackTrace.length());\r\n        } catch (JsonParseException expected) {\r\n            break;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "parseLongJson",
    "start_line": 79,
    "end_line": 83,
    "code": "private void parseLongJson(String json) throws JsonParseException {\r\n    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\r\n    assertThat(target.message).contains(\"Error\");\r\n    assertThat(target.stackTrace).contains(\"Yippie\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testLargeCollectionSerialization",
    "start_line": 118,
    "end_line": 127,
    "code": "/**\r\n * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n */\r\n@Test\r\n@Ignore\r\npublic void testLargeCollectionSerialization() {\r\n    int count = 1400000;\r\n    List<CollectionEntry> list = new ArrayList<>(count);\r\n    for (int i = 0; i < count; ++i) {\r\n        list.add(new CollectionEntry(\"name\" + i, \"value\" + i));\r\n    }\r\n    String unused = gson.toJson(list);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testLargeCollectionDeserialization",
    "start_line": 130,
    "end_line": 150,
    "code": "/**\r\n * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n */\r\n@Test\r\n@Ignore\r\npublic void testLargeCollectionDeserialization() {\r\n    StringBuilder sb = new StringBuilder();\r\n    int count = 87000;\r\n    boolean first = true;\r\n    sb.append('[');\r\n    for (int i = 0; i < count; ++i) {\r\n        if (first) {\r\n            first = false;\r\n        } else {\r\n            sb.append(',');\r\n        }\r\n        sb.append(\"{name:'name\").append(i).append(\"',value:'value\").append(i).append(\"'}\");\r\n    }\r\n    sb.append(']');\r\n    String json = sb.toString();\r\n    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>() {\r\n    }.getType();\r\n    List<CollectionEntry> list = gson.fromJson(json, collectionType);\r\n    assertThat(list).hasSize(count);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testByteArraySerialization",
    "start_line": 154,
    "end_line": 165,
    "code": "/**\r\n * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n */\r\n// Last I tested, Gson was able to serialize upto 14MB byte array\r\n@Test\r\n@Ignore\r\npublic void testByteArraySerialization() {\r\n    for (int size = 4145152; true; size += 1036288) {\r\n        byte[] ba = new byte[size];\r\n        for (int i = 0; i < size; ++i) {\r\n            ba[i] = 0x05;\r\n        }\r\n        String unused = gson.toJson(ba);\r\n        System.out.printf(\"Gson could serialize a byte array of size: %d\\n\", size);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testByteArrayDeserialization",
    "start_line": 169,
    "end_line": 189,
    "code": "/**\r\n * Created in response to http://code.google.com/p/google-gson/issues/detail?id=96\r\n */\r\n// Last I tested, Gson was able to deserialize a byte array of 11MB\r\n@Test\r\n@Ignore\r\npublic void testByteArrayDeserialization() {\r\n    for (int numElements = 10639296; true; numElements += 16384) {\r\n        StringBuilder sb = new StringBuilder(numElements * 2);\r\n        sb.append(\"[\");\r\n        boolean first = true;\r\n        for (int i = 0; i < numElements; ++i) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(\",\");\r\n            }\r\n            sb.append(\"5\");\r\n        }\r\n        sb.append(\"]\");\r\n        String json = sb.toString();\r\n        byte[] ba = gson.fromJson(json, byte[].class);\r\n        System.out.printf(\"Gson could deserialize a byte array of size: %d\\n\", ba.length);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeClasses",
    "start_line": 200,
    "end_line": 215,
    "code": "// The tests to measure serialization and deserialization performance of Gson\r\n// Based on the discussion at\r\n// http://groups.google.com/group/google-gson/browse_thread/thread/7a50b17a390dfaeb\r\n// Test results: 10/19/2009\r\n// Serialize classes avg time: 60 ms\r\n// Deserialized classes avg time: 70 ms\r\n// Serialize exposed classes avg time: 159 ms\r\n// Deserialized exposed classes avg time: 173 ms\r\n@Test\r\n@Ignore\r\npublic void testSerializeClasses() {\r\n    ClassWithList c = new ClassWithList(\"str\");\r\n    for (int i = 0; i < COLLECTION_SIZE; ++i) {\r\n        c.list.add(new ClassWithField(\"element-\" + i));\r\n    }\r\n    StringWriter w = new StringWriter();\r\n    long t1 = System.currentTimeMillis();\r\n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n        gson.toJson(c, w);\r\n    }\r\n    long t2 = System.currentTimeMillis();\r\n    long avg = (t2 - t1) / NUM_ITERATIONS;\r\n    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeClasses",
    "start_line": 217,
    "end_line": 229,
    "code": "@Test\r\n@Ignore\r\npublic void testDeserializeClasses() {\r\n    String json = buildJsonForClassWithList();\r\n    ClassWithList[] target = new ClassWithList[NUM_ITERATIONS];\r\n    long t1 = System.currentTimeMillis();\r\n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n        target[i] = gson.fromJson(json, ClassWithList.class);\r\n    }\r\n    long t2 = System.currentTimeMillis();\r\n    long avg = (t2 - t1) / NUM_ITERATIONS;\r\n    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testLargeObjectSerializationAndDeserialization",
    "start_line": 231,
    "end_line": 248,
    "code": "@Test\r\n@Ignore\r\npublic void testLargeObjectSerializationAndDeserialization() {\r\n    Map<String, Long> largeObject = new HashMap<>();\r\n    for (long l = 0; l < 100000; l++) {\r\n        largeObject.put(\"field\" + l, l);\r\n    }\r\n    long t1 = System.currentTimeMillis();\r\n    String json = gson.toJson(largeObject);\r\n    long t2 = System.currentTimeMillis();\r\n    System.out.printf(\"Large object serialized in: %d ms\\n\", (t2 - t1));\r\n    t1 = System.currentTimeMillis();\r\n    Map<String, Long> unused = gson.fromJson(json, new TypeToken<Map<String, Long>>() {\r\n    }.getType());\r\n    t2 = System.currentTimeMillis();\r\n    System.out.printf(\"Large object deserialized in: %d ms\\n\", (t2 - t1));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeExposedClasses",
    "start_line": 250,
    "end_line": 266,
    "code": "@Test\r\n@Ignore\r\npublic void testSerializeExposedClasses() {\r\n    ClassWithListOfObjects c1 = new ClassWithListOfObjects(\"str\");\r\n    for (int i1 = 0; i1 < COLLECTION_SIZE; ++i1) {\r\n        c1.list.add(new ClassWithExposedField(\"element-\" + i1));\r\n    }\r\n    ClassWithListOfObjects c = c1;\r\n    StringWriter w = new StringWriter();\r\n    long t1 = System.currentTimeMillis();\r\n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n        gson.toJson(c, w);\r\n    }\r\n    long t2 = System.currentTimeMillis();\r\n    long avg = (t2 - t1) / NUM_ITERATIONS;\r\n    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeExposedClasses",
    "start_line": 268,
    "end_line": 280,
    "code": "@Test\r\n@Ignore\r\npublic void testDeserializeExposedClasses() {\r\n    String json = buildJsonForClassWithList();\r\n    ClassWithListOfObjects[] target = new ClassWithListOfObjects[NUM_ITERATIONS];\r\n    long t1 = System.currentTimeMillis();\r\n    for (int i = 0; i < NUM_ITERATIONS; ++i) {\r\n        target[i] = gson.fromJson(json, ClassWithListOfObjects.class);\r\n    }\r\n    long t2 = System.currentTimeMillis();\r\n    long avg = (t2 - t1) / NUM_ITERATIONS;\r\n    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "testLargeGsonMapRoundTrip",
    "start_line": 282,
    "end_line": 294,
    "code": "@Test\r\n@Ignore\r\npublic void testLargeGsonMapRoundTrip() throws Exception {\r\n    Map<Long, Long> original = new HashMap<>();\r\n    for (long i = 0; i < 1000000; i++) {\r\n        original.put(i, i + 1);\r\n    }\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(original);\r\n    Type longToLong = new TypeToken<Map<Long, Long>>() {\r\n    }.getType();\r\n    Map<Long, Long> unused = gson.fromJson(json, longToLong);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  },
  {
    "type": "method",
    "name": "buildJsonForClassWithList",
    "start_line": 296,
    "end_line": 313,
    "code": "private static String buildJsonForClassWithList() {\r\n    StringBuilder sb = new StringBuilder(\"{\");\r\n    sb.append(\"field:\").append(\"'str',\");\r\n    sb.append(\"list:[\");\r\n    boolean first = true;\r\n    for (int i = 0; i < COLLECTION_SIZE; ++i) {\r\n        if (first) {\r\n            first = false;\r\n        } else {\r\n            sb.append(',');\r\n        }\r\n        sb.append(\"{field:'element-\" + i + \"'}\");\r\n    }\r\n    sb.append(']');\r\n    sb.append('}');\r\n    String json = sb.toString();\r\n    return json;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\metrics\\PerformanceTest.java"
  }
]