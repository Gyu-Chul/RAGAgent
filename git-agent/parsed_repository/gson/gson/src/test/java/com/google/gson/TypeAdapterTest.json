[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 26,
    "end_line": 26,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "class",
    "name": "TypeAdapterTest",
    "start_line": 28,
    "end_line": 128,
    "code": "public class TypeAdapterTest {\r\n\r\n    @Test\r\n    public void testNullSafe() throws IOException {\r\n        TypeAdapter<String> adapter = assertionErrorAdapter.nullSafe();\r\n        assertThat(adapter.toJson(null)).isEqualTo(\"null\");\r\n        assertThat(adapter.fromJson(\"null\")).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testNullSafe_ReturningSameInstanceOnceNullSafe() {\r\n        TypeAdapter<?> nullSafeAdapter = assertionErrorAdapter.nullSafe();\r\n        assertThat(nullSafeAdapter.nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n        assertThat(nullSafeAdapter.nullSafe().nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n        assertThat(nullSafeAdapter.nullSafe().nullSafe().nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n    }\r\n\r\n    @Test\r\n    public void testNullSafe_ToString() {\r\n        TypeAdapter<?> adapter = assertionErrorAdapter;\r\n        assertThat(adapter.toString()).isEqualTo(\"assertionErrorAdapter\");\r\n        assertThat(adapter.nullSafe().toString()).isEqualTo(\"NullSafeTypeAdapter[assertionErrorAdapter]\");\r\n        assertThat(adapter.nullSafe().nullSafe().toString()).isEqualTo(\"NullSafeTypeAdapter[assertionErrorAdapter]\");\r\n    }\r\n\r\n    private static final TypeAdapter<String> assertionErrorAdapter = new TypeAdapter<>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, String value) {\r\n            throw new AssertionError(\"unexpected call\");\r\n        }\r\n\r\n        @Override\r\n        public String read(JsonReader in) {\r\n            throw new AssertionError(\"unexpected call\");\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"assertionErrorAdapter\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Tests behavior when {@link TypeAdapter#write(JsonWriter, Object)} manually throws {@link\r\n     * IOException} which is not caused by writer usage.\r\n     */\r\n    @Test\r\n    public void testToJson_ThrowingIOException() {\r\n        IOException exception = new IOException(\"test\");\r\n        TypeAdapter<Integer> adapter = new TypeAdapter<>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Integer value) throws IOException {\r\n                throw exception;\r\n            }\r\n\r\n            @Override\r\n            public Integer read(JsonReader in) {\r\n                throw new AssertionError(\"not needed by this test\");\r\n            }\r\n        };\r\n        JsonIOException e = assertThrows(JsonIOException.class, () -> adapter.toJson(1));\r\n        assertThat(e).hasCauseThat().isEqualTo(exception);\r\n        e = assertThrows(JsonIOException.class, () -> adapter.toJsonTree(1));\r\n        assertThat(e).hasCauseThat().isEqualTo(exception);\r\n    }\r\n\r\n    private static final TypeAdapter<String> adapter = new TypeAdapter<>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, String value) throws IOException {\r\n            out.value(value);\r\n        }\r\n\r\n        @Override\r\n        public String read(JsonReader in) throws IOException {\r\n            return in.nextString();\r\n        }\r\n    };\r\n\r\n    // Note: This test just verifies the current behavior; it is a bit questionable\r\n    // whether that behavior is actually desired\r\n    @Test\r\n    public void testFromJson_Reader_TrailingData() throws IOException {\r\n        assertThat(adapter.fromJson(new StringReader(\"\\\"a\\\"1\"))).isEqualTo(\"a\");\r\n    }\r\n\r\n    // Note: This test just verifies the current behavior; it is a bit questionable\r\n    // whether that behavior is actually desired\r\n    @Test\r\n    public void testFromJson_String_TrailingData() throws IOException {\r\n        assertThat(adapter.fromJson(\"\\\"a\\\"1\")).isEqualTo(\"a\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "field",
    "name": "assertionErrorAdapter",
    "start_line": 57,
    "end_line": 73,
    "code": "private static final TypeAdapter<String> assertionErrorAdapter = new TypeAdapter<>() {\r\n\r\n    @Override\r\n    public void write(JsonWriter out, String value) {\r\n        throw new AssertionError(\"unexpected call\");\r\n    }\r\n\r\n    @Override\r\n    public String read(JsonReader in) {\r\n        throw new AssertionError(\"unexpected call\");\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"assertionErrorAdapter\";\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "field",
    "name": "adapter",
    "start_line": 102,
    "end_line": 113,
    "code": "private static final TypeAdapter<String> adapter = new TypeAdapter<>() {\r\n\r\n    @Override\r\n    public void write(JsonWriter out, String value) throws IOException {\r\n        out.value(value);\r\n    }\r\n\r\n    @Override\r\n    public String read(JsonReader in) throws IOException {\r\n        return in.nextString();\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testNullSafe",
    "start_line": 29,
    "end_line": 35,
    "code": "@Test\r\npublic void testNullSafe() throws IOException {\r\n    TypeAdapter<String> adapter = assertionErrorAdapter.nullSafe();\r\n    assertThat(adapter.toJson(null)).isEqualTo(\"null\");\r\n    assertThat(adapter.fromJson(\"null\")).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testNullSafe_ReturningSameInstanceOnceNullSafe",
    "start_line": 37,
    "end_line": 44,
    "code": "@Test\r\npublic void testNullSafe_ReturningSameInstanceOnceNullSafe() {\r\n    TypeAdapter<?> nullSafeAdapter = assertionErrorAdapter.nullSafe();\r\n    assertThat(nullSafeAdapter.nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n    assertThat(nullSafeAdapter.nullSafe().nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n    assertThat(nullSafeAdapter.nullSafe().nullSafe().nullSafe()).isSameInstanceAs(nullSafeAdapter);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testNullSafe_ToString",
    "start_line": 46,
    "end_line": 55,
    "code": "@Test\r\npublic void testNullSafe_ToString() {\r\n    TypeAdapter<?> adapter = assertionErrorAdapter;\r\n    assertThat(adapter.toString()).isEqualTo(\"assertionErrorAdapter\");\r\n    assertThat(adapter.nullSafe().toString()).isEqualTo(\"NullSafeTypeAdapter[assertionErrorAdapter]\");\r\n    assertThat(adapter.nullSafe().nullSafe().toString()).isEqualTo(\"NullSafeTypeAdapter[assertionErrorAdapter]\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testToJson_ThrowingIOException",
    "start_line": 79,
    "end_line": 100,
    "code": "/**\r\n * Tests behavior when {@link TypeAdapter#write(JsonWriter, Object)} manually throws {@link\r\n * IOException} which is not caused by writer usage.\r\n */\r\n@Test\r\npublic void testToJson_ThrowingIOException() {\r\n    IOException exception = new IOException(\"test\");\r\n    TypeAdapter<Integer> adapter = new TypeAdapter<>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Integer value) throws IOException {\r\n            throw exception;\r\n        }\r\n\r\n        @Override\r\n        public Integer read(JsonReader in) {\r\n            throw new AssertionError(\"not needed by this test\");\r\n        }\r\n    };\r\n    JsonIOException e = assertThrows(JsonIOException.class, () -> adapter.toJson(1));\r\n    assertThat(e).hasCauseThat().isEqualTo(exception);\r\n    e = assertThrows(JsonIOException.class, () -> adapter.toJsonTree(1));\r\n    assertThat(e).hasCauseThat().isEqualTo(exception);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testFromJson_Reader_TrailingData",
    "start_line": 117,
    "end_line": 120,
    "code": "// Note: This test just verifies the current behavior; it is a bit questionable\r\n// whether that behavior is actually desired\r\n@Test\r\npublic void testFromJson_Reader_TrailingData() throws IOException {\r\n    assertThat(adapter.fromJson(new StringReader(\"\\\"a\\\"1\"))).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  },
  {
    "type": "method",
    "name": "testFromJson_String_TrailingData",
    "start_line": 124,
    "end_line": 127,
    "code": "// Note: This test just verifies the current behavior; it is a bit questionable\r\n// whether that behavior is actually desired\r\n@Test\r\npublic void testFromJson_String_TrailingData() throws IOException {\r\n    assertThat(adapter.fromJson(\"\\\"a\\\"1\")).isEqualTo(\"a\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\TypeAdapterTest.java"
  }
]