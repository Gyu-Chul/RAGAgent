[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonArray",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParser",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonParser;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Nested",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.common.TestTypes.Nested;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.io.EOFException",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.io.EOFException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 37,
    "end_line": 37,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 38,
    "end_line": 38,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 39,
    "end_line": 39,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "class",
    "name": "JsonParserTest",
    "start_line": 47,
    "end_line": 142,
    "code": "/**\r\n * Functional tests for that use JsonParser and related Gson methods\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class JsonParserTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testParseInvalidJson() {\r\n        var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[[]\", Object[].class));\r\n        assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializingCustomTree() {\r\n        JsonObject obj = new JsonObject();\r\n        obj.addProperty(\"stringValue\", \"foo\");\r\n        obj.addProperty(\"intValue\", 11);\r\n        BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\r\n        assertThat(target.intValue).isEqualTo(11);\r\n        assertThat(target.stringValue).isEqualTo(\"foo\");\r\n    }\r\n\r\n    @Test\r\n    public void testBadTypeForDeserializingCustomTree() {\r\n        JsonObject obj = new JsonObject();\r\n        obj.addProperty(\"stringValue\", \"foo\");\r\n        obj.addProperty(\"intValue\", 11);\r\n        JsonArray array = new JsonArray();\r\n        array.add(obj);\r\n        // BagOfPrimitives should not be an array\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(array, BagOfPrimitives.class));\r\n    }\r\n\r\n    @Test\r\n    public void testBadFieldTypeForCustomDeserializerCustomTree() {\r\n        JsonArray array = new JsonArray();\r\n        array.add(new JsonPrimitive(\"blah\"));\r\n        JsonObject obj = new JsonObject();\r\n        obj.addProperty(\"stringValue\", \"foo\");\r\n        obj.addProperty(\"intValue\", 11);\r\n        obj.add(\"longValue\", array);\r\n        // `longValue` should not be an array\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(obj, BagOfPrimitives.class));\r\n    }\r\n\r\n    @Test\r\n    public void testBadFieldTypeForDeserializingCustomTree() {\r\n        JsonArray array = new JsonArray();\r\n        array.add(new JsonPrimitive(\"blah\"));\r\n        JsonObject primitive1 = new JsonObject();\r\n        primitive1.addProperty(\"string\", \"foo\");\r\n        primitive1.addProperty(\"intValue\", 11);\r\n        JsonObject obj = new JsonObject();\r\n        obj.add(\"primitive1\", primitive1);\r\n        obj.add(\"primitive2\", array);\r\n        // Nested has field BagOfPrimitives which is not an array\r\n        assertThrows(JsonParseException.class, () -> gson.fromJson(obj, Nested.class));\r\n    }\r\n\r\n    @Test\r\n    public void testChangingCustomTreeAndDeserializing() {\r\n        StringReader json = new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\r\n        JsonObject obj = (JsonObject) JsonParser.parseReader(json);\r\n        obj.remove(\"stringValue\");\r\n        obj.addProperty(\"stringValue\", \"fooBar\");\r\n        BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\r\n        assertThat(target.intValue).isEqualTo(10);\r\n        assertThat(target.longValue).isEqualTo(20);\r\n        assertThat(target.stringValue).isEqualTo(\"fooBar\");\r\n    }\r\n\r\n    @Test\r\n    public void testExtraCommasInArrays() {\r\n        TypeToken<List<String>> type = new TypeToken<>() {\r\n        };\r\n        assertThat(gson.fromJson(\"[a,,b,,]\", type)).isEqualTo(Arrays.asList(\"a\", null, \"b\", null, null));\r\n        assertThat(gson.fromJson(\"[,]\", type)).isEqualTo(Arrays.asList(null, null));\r\n        assertThat(gson.fromJson(\"[a,]\", type)).isEqualTo(Arrays.asList(\"a\", null));\r\n    }\r\n\r\n    @Test\r\n    public void testExtraCommasInMaps() {\r\n        Type type = new TypeToken<Map<String, String>>() {\r\n        }.getType();\r\n        var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{a:b,}\", type));\r\n        assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected name at line 1 column 7 path $.\\n\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 48,
    "end_line": 48,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 50,
    "end_line": 53,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testParseInvalidJson",
    "start_line": 55,
    "end_line": 59,
    "code": "@Test\r\npublic void testParseInvalidJson() {\r\n    var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[[]\", Object[].class));\r\n    assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializingCustomTree",
    "start_line": 61,
    "end_line": 69,
    "code": "@Test\r\npublic void testDeserializingCustomTree() {\r\n    JsonObject obj = new JsonObject();\r\n    obj.addProperty(\"stringValue\", \"foo\");\r\n    obj.addProperty(\"intValue\", 11);\r\n    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\r\n    assertThat(target.intValue).isEqualTo(11);\r\n    assertThat(target.stringValue).isEqualTo(\"foo\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testBadTypeForDeserializingCustomTree",
    "start_line": 71,
    "end_line": 80,
    "code": "@Test\r\npublic void testBadTypeForDeserializingCustomTree() {\r\n    JsonObject obj = new JsonObject();\r\n    obj.addProperty(\"stringValue\", \"foo\");\r\n    obj.addProperty(\"intValue\", 11);\r\n    JsonArray array = new JsonArray();\r\n    array.add(obj);\r\n    // BagOfPrimitives should not be an array\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(array, BagOfPrimitives.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testBadFieldTypeForCustomDeserializerCustomTree",
    "start_line": 82,
    "end_line": 93,
    "code": "@Test\r\npublic void testBadFieldTypeForCustomDeserializerCustomTree() {\r\n    JsonArray array = new JsonArray();\r\n    array.add(new JsonPrimitive(\"blah\"));\r\n    JsonObject obj = new JsonObject();\r\n    obj.addProperty(\"stringValue\", \"foo\");\r\n    obj.addProperty(\"intValue\", 11);\r\n    obj.add(\"longValue\", array);\r\n    // `longValue` should not be an array\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(obj, BagOfPrimitives.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testBadFieldTypeForDeserializingCustomTree",
    "start_line": 95,
    "end_line": 109,
    "code": "@Test\r\npublic void testBadFieldTypeForDeserializingCustomTree() {\r\n    JsonArray array = new JsonArray();\r\n    array.add(new JsonPrimitive(\"blah\"));\r\n    JsonObject primitive1 = new JsonObject();\r\n    primitive1.addProperty(\"string\", \"foo\");\r\n    primitive1.addProperty(\"intValue\", 11);\r\n    JsonObject obj = new JsonObject();\r\n    obj.add(\"primitive1\", primitive1);\r\n    obj.add(\"primitive2\", array);\r\n    // Nested has field BagOfPrimitives which is not an array\r\n    assertThrows(JsonParseException.class, () -> gson.fromJson(obj, Nested.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testChangingCustomTreeAndDeserializing",
    "start_line": 111,
    "end_line": 122,
    "code": "@Test\r\npublic void testChangingCustomTreeAndDeserializing() {\r\n    StringReader json = new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\r\n    JsonObject obj = (JsonObject) JsonParser.parseReader(json);\r\n    obj.remove(\"stringValue\");\r\n    obj.addProperty(\"stringValue\", \"fooBar\");\r\n    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);\r\n    assertThat(target.intValue).isEqualTo(10);\r\n    assertThat(target.longValue).isEqualTo(20);\r\n    assertThat(target.stringValue).isEqualTo(\"fooBar\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testExtraCommasInArrays",
    "start_line": 124,
    "end_line": 131,
    "code": "@Test\r\npublic void testExtraCommasInArrays() {\r\n    TypeToken<List<String>> type = new TypeToken<>() {\r\n    };\r\n    assertThat(gson.fromJson(\"[a,,b,,]\", type)).isEqualTo(Arrays.asList(\"a\", null, \"b\", null, null));\r\n    assertThat(gson.fromJson(\"[,]\", type)).isEqualTo(Arrays.asList(null, null));\r\n    assertThat(gson.fromJson(\"[a,]\", type)).isEqualTo(Arrays.asList(\"a\", null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  },
  {
    "type": "method",
    "name": "testExtraCommasInMaps",
    "start_line": 133,
    "end_line": 141,
    "code": "@Test\r\npublic void testExtraCommasInMaps() {\r\n    Type type = new TypeToken<Map<String, String>>() {\r\n    }.getType();\r\n    var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"{a:b,}\", type));\r\n    assertThat(e).hasCauseThat().hasMessageThat().startsWith(\"Expected name at line 1 column 7 path $.\\n\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\JsonParserTest.java"
  }
]