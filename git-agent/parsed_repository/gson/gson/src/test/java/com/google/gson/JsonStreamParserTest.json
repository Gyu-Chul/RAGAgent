[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 19,
    "end_line": 19,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "java.io.EOFException",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.io.EOFException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "java.util.NoSuchElementException",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.util.NoSuchElementException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 23,
    "end_line": 23,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 24,
    "end_line": 24,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "class",
    "name": "JsonStreamParserTest",
    "start_line": 31,
    "end_line": 105,
    "code": "/**\r\n * Unit tests for {@link JsonStreamParser}\r\n *\r\n * @author Inderjeet Singh\r\n */\r\npublic class JsonStreamParserTest {\r\n\r\n    private JsonStreamParser parser;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        parser = new JsonStreamParser(\"'one' 'two'\");\r\n    }\r\n\r\n    @Test\r\n    public void testParseTwoStrings() {\r\n        String actualOne = parser.next().getAsString();\r\n        assertThat(actualOne).isEqualTo(\"one\");\r\n        String actualTwo = parser.next().getAsString();\r\n        assertThat(actualTwo).isEqualTo(\"two\");\r\n    }\r\n\r\n    @Test\r\n    public void testIterator() {\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.next().getAsString()).isEqualTo(\"one\");\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.next().getAsString()).isEqualTo(\"two\");\r\n        assertThat(parser.hasNext()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testNoSideEffectForHasNext() {\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.next().getAsString()).isEqualTo(\"one\");\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThat(parser.next().getAsString()).isEqualTo(\"two\");\r\n        assertThat(parser.hasNext()).isFalse();\r\n        assertThat(parser.hasNext()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testCallingNextBeyondAvailableInput() {\r\n        JsonElement unused1 = parser.next();\r\n        JsonElement unused2 = parser.next();\r\n        // Parser should not go beyond available input\r\n        assertThrows(NoSuchElementException.class, parser::next);\r\n    }\r\n\r\n    @Test\r\n    public void testEmptyInput() {\r\n        JsonStreamParser parser = new JsonStreamParser(\"\");\r\n        JsonIOException e = assertThrows(JsonIOException.class, parser::next);\r\n        assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n        parser = new JsonStreamParser(\"\");\r\n        e = assertThrows(JsonIOException.class, parser::hasNext);\r\n        assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n    }\r\n\r\n    @Test\r\n    public void testIncompleteInput() {\r\n        JsonStreamParser parser = new JsonStreamParser(\"[\");\r\n        assertThat(parser.hasNext()).isTrue();\r\n        assertThrows(JsonSyntaxException.class, parser::next);\r\n    }\r\n\r\n    @Test\r\n    public void testMalformedInput() {\r\n        JsonStreamParser parser = new JsonStreamParser(\":\");\r\n        assertThrows(JsonSyntaxException.class, parser::hasNext);\r\n        parser = new JsonStreamParser(\":\");\r\n        assertThrows(JsonSyntaxException.class, parser::next);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "field",
    "name": "parser",
    "start_line": 32,
    "end_line": 32,
    "code": "private JsonStreamParser parser;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 34,
    "end_line": 37,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    parser = new JsonStreamParser(\"'one' 'two'\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testParseTwoStrings",
    "start_line": 39,
    "end_line": 45,
    "code": "@Test\r\npublic void testParseTwoStrings() {\r\n    String actualOne = parser.next().getAsString();\r\n    assertThat(actualOne).isEqualTo(\"one\");\r\n    String actualTwo = parser.next().getAsString();\r\n    assertThat(actualTwo).isEqualTo(\"two\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testIterator",
    "start_line": 47,
    "end_line": 54,
    "code": "@Test\r\npublic void testIterator() {\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.next().getAsString()).isEqualTo(\"one\");\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.next().getAsString()).isEqualTo(\"two\");\r\n    assertThat(parser.hasNext()).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testNoSideEffectForHasNext",
    "start_line": 56,
    "end_line": 69,
    "code": "@Test\r\npublic void testNoSideEffectForHasNext() {\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.next().getAsString()).isEqualTo(\"one\");\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThat(parser.next().getAsString()).isEqualTo(\"two\");\r\n    assertThat(parser.hasNext()).isFalse();\r\n    assertThat(parser.hasNext()).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testCallingNextBeyondAvailableInput",
    "start_line": 71,
    "end_line": 77,
    "code": "@Test\r\npublic void testCallingNextBeyondAvailableInput() {\r\n    JsonElement unused1 = parser.next();\r\n    JsonElement unused2 = parser.next();\r\n    // Parser should not go beyond available input\r\n    assertThrows(NoSuchElementException.class, parser::next);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testEmptyInput",
    "start_line": 79,
    "end_line": 88,
    "code": "@Test\r\npublic void testEmptyInput() {\r\n    JsonStreamParser parser = new JsonStreamParser(\"\");\r\n    JsonIOException e = assertThrows(JsonIOException.class, parser::next);\r\n    assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n    parser = new JsonStreamParser(\"\");\r\n    e = assertThrows(JsonIOException.class, parser::hasNext);\r\n    assertThat(e).hasCauseThat().isInstanceOf(EOFException.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testIncompleteInput",
    "start_line": 90,
    "end_line": 95,
    "code": "@Test\r\npublic void testIncompleteInput() {\r\n    JsonStreamParser parser = new JsonStreamParser(\"[\");\r\n    assertThat(parser.hasNext()).isTrue();\r\n    assertThrows(JsonSyntaxException.class, parser::next);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  },
  {
    "type": "method",
    "name": "testMalformedInput",
    "start_line": 97,
    "end_line": 104,
    "code": "@Test\r\npublic void testMalformedInput() {\r\n    JsonStreamParser parser = new JsonStreamParser(\":\");\r\n    assertThrows(JsonSyntaxException.class, parser::hasNext);\r\n    parser = new JsonStreamParser(\":\");\r\n    assertThrows(JsonSyntaxException.class, parser::next);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonStreamParserTest.java"
  }
]