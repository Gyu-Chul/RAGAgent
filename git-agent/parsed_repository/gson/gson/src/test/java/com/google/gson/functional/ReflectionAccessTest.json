[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assume.assumeTrue",
    "start_line": 21,
    "end_line": 21,
    "code": "import static org.junit.Assume.assumeTrue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonIOException",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonIOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.ReflectPermission",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.lang.reflect.ReflectPermission;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.net.URL",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.net.URL;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.net.URLClassLoader",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.net.URLClassLoader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.security.Permission",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.security.Permission;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 35,
    "end_line": 35,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "java.util.concurrent.atomic.AtomicBoolean",
    "start_line": 36,
    "end_line": 36,
    "code": "import java.util.concurrent.atomic.AtomicBoolean;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 37,
    "end_line": 37,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "class",
    "name": "ReflectionAccessTest",
    "start_line": 39,
    "end_line": 173,
    "code": "public class ReflectionAccessTest {\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static class ClassWithPrivateMembers {\r\n\r\n        private String s;\r\n\r\n        private ClassWithPrivateMembers() {\r\n        }\r\n    }\r\n\r\n    private static Class<?> loadClassWithDifferentClassLoader(Class<?> c) throws Exception {\r\n        URL url = c.getProtectionDomain().getCodeSource().getLocation();\r\n        URLClassLoader classLoader = new URLClassLoader(new URL[] { url }, null);\r\n        return classLoader.loadClass(c.getName());\r\n    }\r\n\r\n    // java.lang.SecurityManager deprecation in Java 17\r\n    @SuppressWarnings(\"removal\")\r\n    @Test\r\n    public void testRestrictiveSecurityManager() throws Exception {\r\n        // Skip for newer Java versions where `System.setSecurityManager` is unsupported\r\n        assumeTrue(Runtime.version().feature() <= 17);\r\n        // Must use separate class loader, otherwise permission is not checked, see\r\n        // Class.getDeclaredFields()\r\n        Class<?> clazz = loadClassWithDifferentClassLoader(ClassWithPrivateMembers.class);\r\n        Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\r\n        Permission suppressAccessChecks = new ReflectPermission(\"suppressAccessChecks\");\r\n        SecurityManager original = System.getSecurityManager();\r\n        SecurityManager restrictiveManager = new SecurityManager() {\r\n\r\n            @Override\r\n            public void checkPermission(Permission perm) {\r\n                if (accessDeclaredMembers.equals(perm)) {\r\n                    throw new SecurityException(\"Gson: no-member-access\");\r\n                }\r\n                if (suppressAccessChecks.equals(perm)) {\r\n                    throw new SecurityException(\"Gson: no-suppress-access-check\");\r\n                }\r\n            }\r\n        };\r\n        System.setSecurityManager(restrictiveManager);\r\n        try {\r\n            Gson gson = new Gson();\r\n            // Getting reflection based adapter should fail\r\n            var e = assertThrows(SecurityException.class, () -> gson.getAdapter(clazz));\r\n            assertThat(e).hasMessageThat().isEqualTo(\"Gson: no-member-access\");\r\n            AtomicBoolean wasReadCalled = new AtomicBoolean(false);\r\n            Gson gson2 = new GsonBuilder().registerTypeAdapter(clazz, new TypeAdapter<Object>() {\r\n\r\n                @Override\r\n                public void write(JsonWriter out, Object value) throws IOException {\r\n                    out.value(\"custom-write\");\r\n                }\r\n\r\n                @Override\r\n                public Object read(JsonReader in) throws IOException {\r\n                    in.skipValue();\r\n                    wasReadCalled.set(true);\r\n                    return null;\r\n                }\r\n            }).create();\r\n            assertThat(gson2.toJson(null, clazz)).isEqualTo(\"\\\"custom-write\\\"\");\r\n            assertThat(gson2.fromJson(\"{}\", clazz)).isNull();\r\n            assertThat(wasReadCalled.get()).isTrue();\r\n        } finally {\r\n            System.setSecurityManager(original);\r\n        }\r\n    }\r\n\r\n    private static JsonIOException assertInaccessibleException(String json, Class<?> toDeserialize) {\r\n        Gson gson = new Gson();\r\n        try {\r\n            Object unused = gson.fromJson(json, toDeserialize);\r\n            throw new AssertionError(\"Missing exception; test has to be run with `--illegal-access=deny`\");\r\n        } catch (JsonSyntaxException e) {\r\n            throw new AssertionError(\"Unexpected exception; test has to be run with `--illegal-access=deny`\", e);\r\n        } catch (JsonIOException expected) {\r\n            assertThat(expected).hasMessageThat().endsWith(\"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible\");\r\n            // Return exception for further assertions\r\n            return expected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test serializing an instance of a non-accessible internal class, but where Gson supports\r\n     * serializing one of its superinterfaces.\r\n     *\r\n     * <p>Here {@link Collections#emptyList()} is used which returns an instance of the internal class\r\n     * {@code java.util.Collections.EmptyList}. Gson should serialize the object as {@code List}\r\n     * despite the internal class not being accessible.\r\n     *\r\n     * <p>See https://github.com/google/gson/issues/1875\r\n     */\r\n    @Test\r\n    public void testSerializeInternalImplementationObject() {\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(Collections.emptyList());\r\n        assertThat(json).isEqualTo(\"[]\");\r\n        // But deserialization should fail\r\n        Class<?> internalClass = Collections.emptyList().getClass();\r\n        JsonIOException exception = assertInaccessibleException(\"[]\", internalClass);\r\n        // Don't check exact class name because it is a JDK implementation detail\r\n        assertThat(exception).hasMessageThat().startsWith(\"Failed making constructor '\");\r\n        assertThat(exception).hasMessageThat().contains(\"' accessible; either increase its visibility or\" + \" write a custom InstanceCreator or TypeAdapter for its declaring type: \");\r\n    }\r\n\r\n    @Test\r\n    public void testInaccessibleField() {\r\n        JsonIOException exception = assertInaccessibleException(\"{}\", Throwable.class);\r\n        // Don't check exact field name because it is a JDK implementation detail\r\n        assertThat(exception).hasMessageThat().startsWith(\"Failed making field 'java.lang.Throwable#\");\r\n        assertThat(exception).hasMessageThat().contains(\"' accessible; either increase its visibility or\" + \" write a custom TypeAdapter for its declaring type.\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "method",
    "name": "loadClassWithDifferentClassLoader",
    "start_line": 47,
    "end_line": 51,
    "code": "private static Class<?> loadClassWithDifferentClassLoader(Class<?> c) throws Exception {\r\n    URL url = c.getProtectionDomain().getCodeSource().getLocation();\r\n    URLClassLoader classLoader = new URLClassLoader(new URL[] { url }, null);\r\n    return classLoader.loadClass(c.getName());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "method",
    "name": "testRestrictiveSecurityManager",
    "start_line": 53,
    "end_line": 112,
    "code": "// java.lang.SecurityManager deprecation in Java 17\r\n@SuppressWarnings(\"removal\")\r\n@Test\r\npublic void testRestrictiveSecurityManager() throws Exception {\r\n    // Skip for newer Java versions where `System.setSecurityManager` is unsupported\r\n    assumeTrue(Runtime.version().feature() <= 17);\r\n    // Must use separate class loader, otherwise permission is not checked, see\r\n    // Class.getDeclaredFields()\r\n    Class<?> clazz = loadClassWithDifferentClassLoader(ClassWithPrivateMembers.class);\r\n    Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\r\n    Permission suppressAccessChecks = new ReflectPermission(\"suppressAccessChecks\");\r\n    SecurityManager original = System.getSecurityManager();\r\n    SecurityManager restrictiveManager = new SecurityManager() {\r\n\r\n        @Override\r\n        public void checkPermission(Permission perm) {\r\n            if (accessDeclaredMembers.equals(perm)) {\r\n                throw new SecurityException(\"Gson: no-member-access\");\r\n            }\r\n            if (suppressAccessChecks.equals(perm)) {\r\n                throw new SecurityException(\"Gson: no-suppress-access-check\");\r\n            }\r\n        }\r\n    };\r\n    System.setSecurityManager(restrictiveManager);\r\n    try {\r\n        Gson gson = new Gson();\r\n        // Getting reflection based adapter should fail\r\n        var e = assertThrows(SecurityException.class, () -> gson.getAdapter(clazz));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Gson: no-member-access\");\r\n        AtomicBoolean wasReadCalled = new AtomicBoolean(false);\r\n        Gson gson2 = new GsonBuilder().registerTypeAdapter(clazz, new TypeAdapter<Object>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Object value) throws IOException {\r\n                out.value(\"custom-write\");\r\n            }\r\n\r\n            @Override\r\n            public Object read(JsonReader in) throws IOException {\r\n                in.skipValue();\r\n                wasReadCalled.set(true);\r\n                return null;\r\n            }\r\n        }).create();\r\n        assertThat(gson2.toJson(null, clazz)).isEqualTo(\"\\\"custom-write\\\"\");\r\n        assertThat(gson2.fromJson(\"{}\", clazz)).isNull();\r\n        assertThat(wasReadCalled.get()).isTrue();\r\n    } finally {\r\n        System.setSecurityManager(original);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "method",
    "name": "assertInaccessibleException",
    "start_line": 114,
    "end_line": 132,
    "code": "private static JsonIOException assertInaccessibleException(String json, Class<?> toDeserialize) {\r\n    Gson gson = new Gson();\r\n    try {\r\n        Object unused = gson.fromJson(json, toDeserialize);\r\n        throw new AssertionError(\"Missing exception; test has to be run with `--illegal-access=deny`\");\r\n    } catch (JsonSyntaxException e) {\r\n        throw new AssertionError(\"Unexpected exception; test has to be run with `--illegal-access=deny`\", e);\r\n    } catch (JsonIOException expected) {\r\n        assertThat(expected).hasMessageThat().endsWith(\"\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible\");\r\n        // Return exception for further assertions\r\n        return expected;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeInternalImplementationObject",
    "start_line": 144,
    "end_line": 160,
    "code": "/**\r\n * Test serializing an instance of a non-accessible internal class, but where Gson supports\r\n * serializing one of its superinterfaces.\r\n *\r\n * <p>Here {@link Collections#emptyList()} is used which returns an instance of the internal class\r\n * {@code java.util.Collections.EmptyList}. Gson should serialize the object as {@code List}\r\n * despite the internal class not being accessible.\r\n *\r\n * <p>See https://github.com/google/gson/issues/1875\r\n */\r\n@Test\r\npublic void testSerializeInternalImplementationObject() {\r\n    Gson gson = new Gson();\r\n    String json = gson.toJson(Collections.emptyList());\r\n    assertThat(json).isEqualTo(\"[]\");\r\n    // But deserialization should fail\r\n    Class<?> internalClass = Collections.emptyList().getClass();\r\n    JsonIOException exception = assertInaccessibleException(\"[]\", internalClass);\r\n    // Don't check exact class name because it is a JDK implementation detail\r\n    assertThat(exception).hasMessageThat().startsWith(\"Failed making constructor '\");\r\n    assertThat(exception).hasMessageThat().contains(\"' accessible; either increase its visibility or\" + \" write a custom InstanceCreator or TypeAdapter for its declaring type: \");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  },
  {
    "type": "method",
    "name": "testInaccessibleField",
    "start_line": 162,
    "end_line": 172,
    "code": "@Test\r\npublic void testInaccessibleField() {\r\n    JsonIOException exception = assertInaccessibleException(\"{}\", Throwable.class);\r\n    // Don't check exact field name because it is a JDK implementation detail\r\n    assertThat(exception).hasMessageThat().startsWith(\"Failed making field 'java.lang.Throwable#\");\r\n    assertThat(exception).hasMessageThat().contains(\"' accessible; either increase its visibility or\" + \" write a custom TypeAdapter for its declaring type.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\ReflectionAccessTest.java"
  }
]