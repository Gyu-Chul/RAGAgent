[
  {
    "type": "package",
    "name": "com.google.gson.internal",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Constructor",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.lang.reflect.Constructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Method",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.lang.reflect.Method;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.ParameterizedType",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.lang.reflect.ParameterizedType;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Properties",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.Properties;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 28,
    "end_line": 28,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "class",
    "name": "GsonTypesTest",
    "start_line": 30,
    "end_line": 158,
    "code": "// for dummy classes A, B, ...\r\n@SuppressWarnings(\"ClassNamedLikeTypeParameter\")\r\npublic final class GsonTypesTest {\r\n\r\n    @Test\r\n    public void testWildcardBoundsInvalid() {\r\n        String expectedMessage = \"Primitive type is not allowed\";\r\n        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> GsonTypes.subtypeOf(int.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n        e = assertThrows(IllegalArgumentException.class, () -> GsonTypes.supertypeOf(int.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    }\r\n\r\n    @Test\r\n    public void testNewParameterizedTypeWithoutOwner() throws Exception {\r\n        // List<A>. List is a top-level class\r\n        ParameterizedType type = GsonTypes.newParameterizedTypeWithOwner(null, List.class, A.class);\r\n        assertThat(type.getOwnerType()).isNull();\r\n        assertThat(type.getRawType()).isEqualTo(List.class);\r\n        assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n        // A<B>. A is a static inner class.\r\n        type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, B.class);\r\n        assertThat(getFirstTypeArgument(type)).isEqualTo(B.class);\r\n        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, // NonStaticInner<A> is not allowed without owner\r\n        () -> GsonTypes.newParameterizedTypeWithOwner(null, NonStaticInner.class, A.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Must specify owner type for \" + NonStaticInner.class);\r\n        type = GsonTypes.newParameterizedTypeWithOwner(GsonTypesTest.class, NonStaticInner.class, A.class);\r\n        assertThat(type.getOwnerType()).isEqualTo(GsonTypesTest.class);\r\n        assertThat(type.getRawType()).isEqualTo(NonStaticInner.class);\r\n        assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n        final class D {\r\n        }\r\n        // D<A> is allowed since D has no owner type\r\n        type = GsonTypes.newParameterizedTypeWithOwner(null, D.class, A.class);\r\n        assertThat(type.getOwnerType()).isNull();\r\n        assertThat(type.getRawType()).isEqualTo(D.class);\r\n        assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n        // A<D> is allowed.\r\n        type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, D.class);\r\n        assertThat(getFirstTypeArgument(type)).isEqualTo(D.class);\r\n    }\r\n\r\n    @Test\r\n    public void testGetFirstTypeArgument() throws Exception {\r\n        assertThat(getFirstTypeArgument(A.class)).isNull();\r\n        Type type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);\r\n        assertThat(getFirstTypeArgument(type)).isEqualTo(B.class);\r\n    }\r\n\r\n    private static final class A {\r\n    }\r\n\r\n    private static final class B {\r\n    }\r\n\r\n    private static final class C {\r\n    }\r\n\r\n    @SuppressWarnings({ \"ClassCanBeStatic\", \"UnusedTypeParameter\" })\r\n    private final class NonStaticInner<T> {\r\n    }\r\n\r\n    /**\r\n     * Given a parameterized type {@code A<B, C>}, returns B. If the specified type is not a generic\r\n     * type, returns null.\r\n     */\r\n    public static Type getFirstTypeArgument(Type type) throws Exception {\r\n        if (!(type instanceof ParameterizedType)) {\r\n            return null;\r\n        }\r\n        ParameterizedType ptype = (ParameterizedType) type;\r\n        Type[] actualTypeArguments = ptype.getActualTypeArguments();\r\n        if (actualTypeArguments.length == 0) {\r\n            return null;\r\n        }\r\n        return GsonTypes.canonicalize(actualTypeArguments[0]);\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsOnMethodTypeVariables() throws Exception {\r\n        Method m1 = TypeVariableTest.class.getMethod(\"method\");\r\n        Method m2 = TypeVariableTest.class.getMethod(\"method\");\r\n        Type rt1 = m1.getGenericReturnType();\r\n        Type rt2 = m2.getGenericReturnType();\r\n        assertThat(GsonTypes.equals(rt1, rt2)).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsOnConstructorParameterTypeVariables() throws Exception {\r\n        Constructor<TypeVariableTest> c1 = TypeVariableTest.class.getConstructor(Object.class);\r\n        Constructor<TypeVariableTest> c2 = TypeVariableTest.class.getConstructor(Object.class);\r\n        Type rt1 = c1.getGenericParameterTypes()[0];\r\n        Type rt2 = c2.getGenericParameterTypes()[0];\r\n        assertThat(GsonTypes.equals(rt1, rt2)).isTrue();\r\n    }\r\n\r\n    private static final class TypeVariableTest {\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        public <T> TypeVariableTest(T parameter) {\r\n        }\r\n\r\n        @SuppressWarnings({ \"unused\", \"TypeParameterUnusedInFormals\" })\r\n        public <T> T method() {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testGetMapKeyAndValueTypesForPropertiesSubclass() throws Exception {\r\n        class CustomProperties extends Properties {\r\n\r\n            private static final long serialVersionUID = 4112578634029874840L;\r\n        }\r\n        Type[] types = GsonTypes.getMapKeyAndValueTypes(CustomProperties.class, CustomProperties.class);\r\n        assertThat(types[0]).isEqualTo(String.class);\r\n        assertThat(types[1]).isEqualTo(String.class);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testWildcardBoundsInvalid",
    "start_line": 32,
    "end_line": 41,
    "code": "@Test\r\npublic void testWildcardBoundsInvalid() {\r\n    String expectedMessage = \"Primitive type is not allowed\";\r\n    IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> GsonTypes.subtypeOf(int.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n    e = assertThrows(IllegalArgumentException.class, () -> GsonTypes.supertypeOf(int.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(expectedMessage);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testNewParameterizedTypeWithoutOwner",
    "start_line": 43,
    "end_line": 79,
    "code": "@Test\r\npublic void testNewParameterizedTypeWithoutOwner() throws Exception {\r\n    // List<A>. List is a top-level class\r\n    ParameterizedType type = GsonTypes.newParameterizedTypeWithOwner(null, List.class, A.class);\r\n    assertThat(type.getOwnerType()).isNull();\r\n    assertThat(type.getRawType()).isEqualTo(List.class);\r\n    assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n    // A<B>. A is a static inner class.\r\n    type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, B.class);\r\n    assertThat(getFirstTypeArgument(type)).isEqualTo(B.class);\r\n    IllegalArgumentException e = assertThrows(IllegalArgumentException.class, // NonStaticInner<A> is not allowed without owner\r\n    () -> GsonTypes.newParameterizedTypeWithOwner(null, NonStaticInner.class, A.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Must specify owner type for \" + NonStaticInner.class);\r\n    type = GsonTypes.newParameterizedTypeWithOwner(GsonTypesTest.class, NonStaticInner.class, A.class);\r\n    assertThat(type.getOwnerType()).isEqualTo(GsonTypesTest.class);\r\n    assertThat(type.getRawType()).isEqualTo(NonStaticInner.class);\r\n    assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n    final class D {\r\n    }\r\n    // D<A> is allowed since D has no owner type\r\n    type = GsonTypes.newParameterizedTypeWithOwner(null, D.class, A.class);\r\n    assertThat(type.getOwnerType()).isNull();\r\n    assertThat(type.getRawType()).isEqualTo(D.class);\r\n    assertThat(type.getActualTypeArguments()).asList().containsExactly(A.class);\r\n    // A<D> is allowed.\r\n    type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, D.class);\r\n    assertThat(getFirstTypeArgument(type)).isEqualTo(D.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testGetFirstTypeArgument",
    "start_line": 81,
    "end_line": 87,
    "code": "@Test\r\npublic void testGetFirstTypeArgument() throws Exception {\r\n    assertThat(getFirstTypeArgument(A.class)).isNull();\r\n    Type type = GsonTypes.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);\r\n    assertThat(getFirstTypeArgument(type)).isEqualTo(B.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "getFirstTypeArgument",
    "start_line": 102,
    "end_line": 112,
    "code": "/**\r\n * Given a parameterized type {@code A<B, C>}, returns B. If the specified type is not a generic\r\n * type, returns null.\r\n */\r\npublic static Type getFirstTypeArgument(Type type) throws Exception {\r\n    if (!(type instanceof ParameterizedType)) {\r\n        return null;\r\n    }\r\n    ParameterizedType ptype = (ParameterizedType) type;\r\n    Type[] actualTypeArguments = ptype.getActualTypeArguments();\r\n    if (actualTypeArguments.length == 0) {\r\n        return null;\r\n    }\r\n    return GsonTypes.canonicalize(actualTypeArguments[0]);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsOnMethodTypeVariables",
    "start_line": 114,
    "end_line": 123,
    "code": "@Test\r\npublic void testEqualsOnMethodTypeVariables() throws Exception {\r\n    Method m1 = TypeVariableTest.class.getMethod(\"method\");\r\n    Method m2 = TypeVariableTest.class.getMethod(\"method\");\r\n    Type rt1 = m1.getGenericReturnType();\r\n    Type rt2 = m2.getGenericReturnType();\r\n    assertThat(GsonTypes.equals(rt1, rt2)).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsOnConstructorParameterTypeVariables",
    "start_line": 125,
    "end_line": 134,
    "code": "@Test\r\npublic void testEqualsOnConstructorParameterTypeVariables() throws Exception {\r\n    Constructor<TypeVariableTest> c1 = TypeVariableTest.class.getConstructor(Object.class);\r\n    Constructor<TypeVariableTest> c2 = TypeVariableTest.class.getConstructor(Object.class);\r\n    Type rt1 = c1.getGenericParameterTypes()[0];\r\n    Type rt2 = c2.getGenericParameterTypes()[0];\r\n    assertThat(GsonTypes.equals(rt1, rt2)).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  },
  {
    "type": "method",
    "name": "testGetMapKeyAndValueTypesForPropertiesSubclass",
    "start_line": 147,
    "end_line": 157,
    "code": "@Test\r\npublic void testGetMapKeyAndValueTypesForPropertiesSubclass() throws Exception {\r\n    class CustomProperties extends Properties {\r\n\r\n        private static final long serialVersionUID = 4112578634029874840L;\r\n    }\r\n    Type[] types = GsonTypes.getMapKeyAndValueTypes(CustomProperties.class, CustomProperties.class);\r\n    assertThat(types[0]).isEqualTo(String.class);\r\n    assertThat(types[1]).isEqualTo(String.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\internal\\GsonTypesTest.java"
  }
]