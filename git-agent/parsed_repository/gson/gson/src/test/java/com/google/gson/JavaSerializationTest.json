[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ByteArrayInputStream",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.io.ByteArrayInputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ByteArrayOutputStream",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.ByteArrayOutputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ObjectInputStream",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.io.ObjectInputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.io.ObjectOutputStream",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.ObjectOutputStream;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 30,
    "end_line": 30,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "class",
    "name": "JavaSerializationTest",
    "start_line": 37,
    "end_line": 78,
    "code": "/**\r\n * Check that Gson doesn't return non-serializable data types.\r\n *\r\n * @author Jesse Wilson\r\n */\r\npublic final class JavaSerializationTest {\r\n\r\n    private final Gson gson = new Gson();\r\n\r\n    @Test\r\n    public void testMapIsSerializable() throws Exception {\r\n        Type type = new TypeToken<Map<String, Integer>>() {\r\n        }.getType();\r\n        Map<String, Integer> map = gson.fromJson(\"{\\\"b\\\":1,\\\"c\\\":2,\\\"a\\\":3}\", type);\r\n        Map<String, Integer> serialized = serializedCopy(map);\r\n        assertThat(serialized).isEqualTo(map);\r\n        // Also check that the iteration order is retained.\r\n        assertThat(serialized.keySet()).containsExactly(\"b\", \"c\", \"a\").inOrder();\r\n    }\r\n\r\n    @Test\r\n    public void testListIsSerializable() throws Exception {\r\n        Type type = new TypeToken<List<String>>() {\r\n        }.getType();\r\n        List<String> list = gson.fromJson(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", type);\r\n        List<String> serialized = serializedCopy(list);\r\n        assertThat(serialized).isEqualTo(list);\r\n    }\r\n\r\n    @Test\r\n    public void testNumberIsSerializable() throws Exception {\r\n        Type type = new TypeToken<List<Number>>() {\r\n        }.getType();\r\n        List<Number> list = gson.fromJson(\"[1,3.14,6.673e-11]\", type);\r\n        List<Number> serialized = serializedCopy(list);\r\n        assertThat(serialized.get(0).doubleValue()).isEqualTo(1.0);\r\n        assertThat(serialized.get(1).doubleValue()).isEqualTo(3.14);\r\n        assertThat(serialized.get(2).doubleValue()).isEqualTo(6.673e-11);\r\n    }\r\n\r\n    // Serialization promises to return the same type.\r\n    @SuppressWarnings(\"unchecked\")\r\n    private static <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {\r\n        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\r\n        ObjectOutputStream out = new ObjectOutputStream(bytesOut);\r\n        out.writeObject(object);\r\n        out.close();\r\n        ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());\r\n        ObjectInputStream in = new ObjectInputStream(bytesIn);\r\n        return (T) in.readObject();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 38,
    "end_line": 38,
    "code": "private final Gson gson = new Gson();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testMapIsSerializable",
    "start_line": 40,
    "end_line": 48,
    "code": "@Test\r\npublic void testMapIsSerializable() throws Exception {\r\n    Type type = new TypeToken<Map<String, Integer>>() {\r\n    }.getType();\r\n    Map<String, Integer> map = gson.fromJson(\"{\\\"b\\\":1,\\\"c\\\":2,\\\"a\\\":3}\", type);\r\n    Map<String, Integer> serialized = serializedCopy(map);\r\n    assertThat(serialized).isEqualTo(map);\r\n    // Also check that the iteration order is retained.\r\n    assertThat(serialized.keySet()).containsExactly(\"b\", \"c\", \"a\").inOrder();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testListIsSerializable",
    "start_line": 50,
    "end_line": 56,
    "code": "@Test\r\npublic void testListIsSerializable() throws Exception {\r\n    Type type = new TypeToken<List<String>>() {\r\n    }.getType();\r\n    List<String> list = gson.fromJson(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", type);\r\n    List<String> serialized = serializedCopy(list);\r\n    assertThat(serialized).isEqualTo(list);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "method",
    "name": "testNumberIsSerializable",
    "start_line": 58,
    "end_line": 66,
    "code": "@Test\r\npublic void testNumberIsSerializable() throws Exception {\r\n    Type type = new TypeToken<List<Number>>() {\r\n    }.getType();\r\n    List<Number> list = gson.fromJson(\"[1,3.14,6.673e-11]\", type);\r\n    List<Number> serialized = serializedCopy(list);\r\n    assertThat(serialized.get(0).doubleValue()).isEqualTo(1.0);\r\n    assertThat(serialized.get(1).doubleValue()).isEqualTo(3.14);\r\n    assertThat(serialized.get(2).doubleValue()).isEqualTo(6.673e-11);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  },
  {
    "type": "method",
    "name": "serializedCopy",
    "start_line": 68,
    "end_line": 77,
    "code": "// Serialization promises to return the same type.\r\n@SuppressWarnings(\"unchecked\")\r\nprivate static <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {\r\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\r\n    ObjectOutputStream out = new ObjectOutputStream(bytesOut);\r\n    out.writeObject(object);\r\n    out.close();\r\n    ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());\r\n    ObjectInputStream in = new ObjectInputStream(bytesIn);\r\n    return (T) in.readObject();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JavaSerializationTest.java"
  }
]