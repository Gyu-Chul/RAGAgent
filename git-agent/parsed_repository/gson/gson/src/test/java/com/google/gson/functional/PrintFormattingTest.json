[
  {
    "type": "package",
    "name": "com.google.gson.functional",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.BagOfPrimitives",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.common.TestTypes.BagOfPrimitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.ClassWithTransientFields",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.common.TestTypes.ClassWithTransientFields;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.Nested",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.common.TestTypes.Nested;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.TestTypes.PrimitiveArray",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.common.TestTypes.PrimitiveArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 30,
    "end_line": 30,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 31,
    "end_line": 31,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "class",
    "name": "PrintFormattingTest",
    "start_line": 39,
    "end_line": 87,
    "code": "/**\r\n * Functional tests for print formatting.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic class PrintFormattingTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        gson = new Gson();\r\n    }\r\n\r\n    @Test\r\n    public void testCompactFormattingLeavesNoWhiteSpace() {\r\n        List<Object> list = new ArrayList<>();\r\n        list.add(new BagOfPrimitives());\r\n        list.add(new Nested());\r\n        list.add(new PrimitiveArray());\r\n        list.add(new ClassWithTransientFields<>());\r\n        String json = gson.toJson(list);\r\n        assertContainsNoWhiteSpace(json);\r\n    }\r\n\r\n    @Test\r\n    public void testJsonObjectWithNullValues() {\r\n        JsonObject obj = new JsonObject();\r\n        obj.addProperty(\"field1\", \"value1\");\r\n        obj.addProperty(\"field2\", (String) null);\r\n        String json = gson.toJson(obj);\r\n        assertThat(json).contains(\"field1\");\r\n        assertThat(json).doesNotContain(\"field2\");\r\n    }\r\n\r\n    @Test\r\n    public void testJsonObjectWithNullValuesSerialized() {\r\n        gson = new GsonBuilder().serializeNulls().create();\r\n        JsonObject obj = new JsonObject();\r\n        obj.addProperty(\"field1\", \"value1\");\r\n        obj.addProperty(\"field2\", (String) null);\r\n        String json = gson.toJson(obj);\r\n        assertThat(json).contains(\"field1\");\r\n        assertThat(json).contains(\"field2\");\r\n    }\r\n\r\n    @SuppressWarnings(\"LoopOverCharArray\")\r\n    private static void assertContainsNoWhiteSpace(String str) {\r\n        for (char c : str.toCharArray()) {\r\n            assertThat(Character.isWhitespace(c)).isFalse();\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 41,
    "end_line": 41,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 43,
    "end_line": 46,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    gson = new Gson();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "method",
    "name": "testCompactFormattingLeavesNoWhiteSpace",
    "start_line": 48,
    "end_line": 58,
    "code": "@Test\r\npublic void testCompactFormattingLeavesNoWhiteSpace() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new BagOfPrimitives());\r\n    list.add(new Nested());\r\n    list.add(new PrimitiveArray());\r\n    list.add(new ClassWithTransientFields<>());\r\n    String json = gson.toJson(list);\r\n    assertContainsNoWhiteSpace(json);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "method",
    "name": "testJsonObjectWithNullValues",
    "start_line": 60,
    "end_line": 68,
    "code": "@Test\r\npublic void testJsonObjectWithNullValues() {\r\n    JsonObject obj = new JsonObject();\r\n    obj.addProperty(\"field1\", \"value1\");\r\n    obj.addProperty(\"field2\", (String) null);\r\n    String json = gson.toJson(obj);\r\n    assertThat(json).contains(\"field1\");\r\n    assertThat(json).doesNotContain(\"field2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "method",
    "name": "testJsonObjectWithNullValuesSerialized",
    "start_line": 70,
    "end_line": 79,
    "code": "@Test\r\npublic void testJsonObjectWithNullValuesSerialized() {\r\n    gson = new GsonBuilder().serializeNulls().create();\r\n    JsonObject obj = new JsonObject();\r\n    obj.addProperty(\"field1\", \"value1\");\r\n    obj.addProperty(\"field2\", (String) null);\r\n    String json = gson.toJson(obj);\r\n    assertThat(json).contains(\"field1\");\r\n    assertThat(json).contains(\"field2\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  },
  {
    "type": "method",
    "name": "assertContainsNoWhiteSpace",
    "start_line": 81,
    "end_line": 86,
    "code": "@SuppressWarnings(\"LoopOverCharArray\")\r\nprivate static void assertContainsNoWhiteSpace(String str) {\r\n    for (char c : str.toCharArray()) {\r\n        assertThat(Character.isWhitespace(c)).isFalse();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\functional\\PrintFormattingTest.java"
  }
]