[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.testing.EqualsTester",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.common.testing.EqualsTester;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.MoreAsserts",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.common.MoreAsserts;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.AbstractMap.SimpleEntry",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.util.AbstractMap.SimpleEntry;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayDeque",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.ArrayDeque;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Deque",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.util.Deque;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Iterator",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.Iterator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map.Entry",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Map.Entry;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Set",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.Set;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 34,
    "end_line": 34,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "class",
    "name": "JsonObjectTest",
    "start_line": 41,
    "end_line": 358,
    "code": "/**\r\n * Unit test for the {@link JsonObject} class.\r\n *\r\n * @author Joel Leitch\r\n */\r\npublic class JsonObjectTest {\r\n\r\n    @Test\r\n    public void testAddingAndRemovingObjectProperties() {\r\n        JsonObject jsonObj = new JsonObject();\r\n        String propertyName = \"property\";\r\n        assertThat(jsonObj.has(propertyName)).isFalse();\r\n        assertThat(jsonObj.get(propertyName)).isNull();\r\n        JsonPrimitive value = new JsonPrimitive(\"blah\");\r\n        jsonObj.add(propertyName, value);\r\n        assertThat(jsonObj.get(propertyName)).isEqualTo(value);\r\n        JsonElement removedElement = jsonObj.remove(propertyName);\r\n        assertThat(removedElement).isEqualTo(value);\r\n        assertThat(jsonObj.has(propertyName)).isFalse();\r\n        assertThat(jsonObj.get(propertyName)).isNull();\r\n        assertThat(jsonObj.remove(propertyName)).isNull();\r\n    }\r\n\r\n    @Test\r\n    public void testAddingNullPropertyValue() {\r\n        String propertyName = \"property\";\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.add(propertyName, null);\r\n        assertThat(jsonObj.has(propertyName)).isTrue();\r\n        JsonElement jsonElement = jsonObj.get(propertyName);\r\n        assertThat(jsonElement).isNotNull();\r\n        assertThat(jsonElement.isJsonNull()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testAddingNullOrEmptyPropertyName() {\r\n        JsonObject jsonObj = new JsonObject();\r\n        // Should not allow null property names\r\n        assertThrows(NullPointerException.class, () -> jsonObj.add(null, JsonNull.INSTANCE));\r\n        jsonObj.add(\"\", JsonNull.INSTANCE);\r\n        jsonObj.add(\"   \\t\", JsonNull.INSTANCE);\r\n        assertThat(jsonObj.keySet()).containsExactly(\"\", \"   \\t\");\r\n    }\r\n\r\n    @Test\r\n    public void testAddingBooleanProperties() {\r\n        String propertyName = \"property\";\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.addProperty(propertyName, true);\r\n        assertThat(jsonObj.has(propertyName)).isTrue();\r\n        JsonElement jsonElement = jsonObj.get(propertyName);\r\n        assertThat(jsonElement).isNotNull();\r\n        assertThat(jsonElement.getAsBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testAddingStringProperties() {\r\n        String propertyName = \"property\";\r\n        String value = \"blah\";\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.addProperty(propertyName, value);\r\n        assertThat(jsonObj.has(propertyName)).isTrue();\r\n        JsonElement jsonElement = jsonObj.get(propertyName);\r\n        assertThat(jsonElement).isNotNull();\r\n        assertThat(jsonElement.getAsString()).isEqualTo(value);\r\n    }\r\n\r\n    @Test\r\n    public void testAddingCharacterProperties() {\r\n        String propertyName = \"property\";\r\n        char value = 'a';\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.addProperty(propertyName, value);\r\n        assertThat(jsonObj.has(propertyName)).isTrue();\r\n        JsonElement jsonElement = jsonObj.get(propertyName);\r\n        assertThat(jsonElement).isNotNull();\r\n        assertThat(jsonElement.getAsString()).isEqualTo(String.valueOf(value));\r\n        @SuppressWarnings(\"deprecation\")\r\n        char character = jsonElement.getAsCharacter();\r\n        assertThat(character).isEqualTo(value);\r\n    }\r\n\r\n    /**\r\n     * From bug report http://code.google.com/p/google-gson/issues/detail?id=182\r\n     */\r\n    @Test\r\n    public void testPropertyWithQuotes() {\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.add(\"a\\\"b\", new JsonPrimitive(\"c\\\"d\"));\r\n        String json = new Gson().toJson(jsonObj);\r\n        assertThat(json).isEqualTo(\"{\\\"a\\\\\\\"b\\\":\\\"c\\\\\\\"d\\\"}\");\r\n    }\r\n\r\n    /**\r\n     * From issue 227.\r\n     */\r\n    @Test\r\n    public void testWritePropertyWithEmptyStringName() {\r\n        JsonObject jsonObj = new JsonObject();\r\n        jsonObj.add(\"\", new JsonPrimitive(true));\r\n        assertThat(new Gson().toJson(jsonObj)).isEqualTo(\"{\\\"\\\":true}\");\r\n    }\r\n\r\n    @Test\r\n    public void testReadPropertyWithEmptyStringName() {\r\n        JsonObject jsonObj = JsonParser.parseString(\"{\\\"\\\":true}\").getAsJsonObject();\r\n        assertThat(jsonObj.get(\"\").getAsBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsOnEmptyObject() {\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsNonEmptyObject() {\r\n        JsonObject a = new JsonObject();\r\n        JsonObject b = new JsonObject();\r\n        new EqualsTester().addEqualityGroup(a).testEquals();\r\n        a.add(\"foo\", new JsonObject());\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n        b.add(\"foo\", new JsonObject());\r\n        MoreAsserts.assertEqualsAndHashCode(a, b);\r\n        a.add(\"bar\", new JsonObject());\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n        b.add(\"bar\", JsonNull.INSTANCE);\r\n        assertThat(a.equals(b)).isFalse();\r\n        assertThat(b.equals(a)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsHashCodeIgnoringOrder() {\r\n        JsonObject a = new JsonObject();\r\n        JsonObject b = new JsonObject();\r\n        a.addProperty(\"1\", true);\r\n        b.addProperty(\"2\", false);\r\n        a.addProperty(\"2\", false);\r\n        b.addProperty(\"1\", true);\r\n        assertThat(new ArrayList<>(a.keySet())).containsExactly(\"1\", \"2\").inOrder();\r\n        assertThat(new ArrayList<>(b.keySet())).containsExactly(\"2\", \"1\").inOrder();\r\n        MoreAsserts.assertEqualsAndHashCode(a, b);\r\n    }\r\n\r\n    @Test\r\n    public void testSize() {\r\n        JsonObject o = new JsonObject();\r\n        assertThat(o.size()).isEqualTo(0);\r\n        o.add(\"Hello\", new JsonPrimitive(1));\r\n        assertThat(o.size()).isEqualTo(1);\r\n        o.add(\"Hi\", new JsonPrimitive(1));\r\n        assertThat(o.size()).isEqualTo(2);\r\n        o.remove(\"Hello\");\r\n        assertThat(o.size()).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void testIsEmpty() {\r\n        JsonObject o = new JsonObject();\r\n        assertThat(o.isEmpty()).isTrue();\r\n        o.add(\"Hello\", new JsonPrimitive(1));\r\n        assertThat(o.isEmpty()).isFalse();\r\n        o.remove(\"Hello\");\r\n        assertThat(o.isEmpty()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testDeepCopy() {\r\n        JsonObject original = new JsonObject();\r\n        JsonArray firstEntry = new JsonArray();\r\n        original.add(\"key\", firstEntry);\r\n        JsonObject copy = original.deepCopy();\r\n        firstEntry.add(new JsonPrimitive(\"z\"));\r\n        assertThat(original.get(\"key\").getAsJsonArray()).hasSize(1);\r\n        assertThat(copy.get(\"key\").getAsJsonArray()).hasSize(0);\r\n    }\r\n\r\n    /**\r\n     * From issue 941\r\n     */\r\n    @Test\r\n    public void testKeySet() {\r\n        JsonObject a = new JsonObject();\r\n        assertThat(a.keySet()).hasSize(0);\r\n        a.add(\"foo\", new JsonArray());\r\n        a.add(\"bar\", new JsonObject());\r\n        assertThat(a.size()).isEqualTo(2);\r\n        assertThat(a.keySet()).hasSize(2);\r\n        assertThat(a.keySet()).containsExactly(\"foo\", \"bar\").inOrder();\r\n        a.addProperty(\"1\", true);\r\n        a.addProperty(\"2\", false);\r\n        // Insertion order should be preserved by keySet()\r\n        Deque<String> expectedKeys = new ArrayDeque<>(Arrays.asList(\"foo\", \"bar\", \"1\", \"2\"));\r\n        // Note: Must wrap in ArrayList because Deque implementations do not implement `equals`\r\n        assertThat(new ArrayList<>(a.keySet())).isEqualTo(new ArrayList<>(expectedKeys));\r\n        Iterator<String> iterator = a.keySet().iterator();\r\n        // Remove keys one by one\r\n        for (int i = a.size(); i >= 1; i--) {\r\n            assertThat(iterator.hasNext()).isTrue();\r\n            assertThat(iterator.next()).isEqualTo(expectedKeys.getFirst());\r\n            iterator.remove();\r\n            expectedKeys.removeFirst();\r\n            assertThat(a.size()).isEqualTo(i - 1);\r\n            assertThat(new ArrayList<>(a.keySet())).isEqualTo(new ArrayList<>(expectedKeys));\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testEntrySet() {\r\n        JsonObject o = new JsonObject();\r\n        assertThat(o.entrySet()).hasSize(0);\r\n        o.addProperty(\"b\", true);\r\n        Set<?> expectedEntries = Collections.singleton(new SimpleEntry<>(\"b\", new JsonPrimitive(true)));\r\n        assertThat(o.entrySet()).isEqualTo(expectedEntries);\r\n        assertThat(o.entrySet()).hasSize(1);\r\n        o.addProperty(\"a\", false);\r\n        // Insertion order should be preserved by entrySet()\r\n        List<?> expectedEntriesList = Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(true)), new SimpleEntry<>(\"a\", new JsonPrimitive(false)));\r\n        assertThat(new ArrayList<>(o.entrySet())).isEqualTo(expectedEntriesList);\r\n        Iterator<Entry<String, JsonElement>> iterator = o.entrySet().iterator();\r\n        // Test behavior of Entry.setValue\r\n        for (int i = 0; i < o.size(); i++) {\r\n            Entry<String, JsonElement> entry = iterator.next();\r\n            entry.setValue(new JsonPrimitive(i));\r\n            assertThat(entry.getValue()).isEqualTo(new JsonPrimitive(i));\r\n        }\r\n        expectedEntriesList = Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(0)), new SimpleEntry<>(\"a\", new JsonPrimitive(1)));\r\n        assertThat(new ArrayList<>(o.entrySet())).isEqualTo(expectedEntriesList);\r\n        Entry<String, JsonElement> entry = o.entrySet().iterator().next();\r\n        // null value is not permitted, only JsonNull is supported\r\n        // This intentionally deviates from the behavior of the other JsonObject methods which\r\n        // implicitly convert null -> JsonNull, to match more closely the contract of Map.Entry\r\n        var e = assertThrows(NullPointerException.class, () -> entry.setValue(null));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n        assertThat(entry.getValue()).isNotNull();\r\n        o.addProperty(\"key1\", 1);\r\n        o.addProperty(\"key2\", 2);\r\n        Deque<?> expectedEntriesQueue = new ArrayDeque<>(Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(0)), new SimpleEntry<>(\"a\", new JsonPrimitive(1)), new SimpleEntry<>(\"key1\", new JsonPrimitive(1)), new SimpleEntry<>(\"key2\", new JsonPrimitive(2))));\r\n        // Note: Must wrap in ArrayList because Deque implementations do not implement `equals`\r\n        assertThat(new ArrayList<>(o.entrySet())).isEqualTo(new ArrayList<>(expectedEntriesQueue));\r\n        iterator = o.entrySet().iterator();\r\n        // Remove entries one by one\r\n        for (int i = o.size(); i >= 1; i--) {\r\n            assertThat(iterator.hasNext()).isTrue();\r\n            assertThat(iterator.next()).isEqualTo(expectedEntriesQueue.getFirst());\r\n            iterator.remove();\r\n            expectedEntriesQueue.removeFirst();\r\n            assertThat(o.size()).isEqualTo(i - 1);\r\n            assertThat(new ArrayList<>(o.entrySet())).isEqualTo(new ArrayList<>(expectedEntriesQueue));\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testToString() {\r\n        JsonObject object = new JsonObject();\r\n        assertThat(object.toString()).isEqualTo(\"{}\");\r\n        object.add(\"a\", JsonNull.INSTANCE);\r\n        object.addProperty(\"b\\0\", Float.NaN);\r\n        JsonArray nestedArray = new JsonArray();\r\n        nestedArray.add('\"');\r\n        object.add(\"c\", nestedArray);\r\n        JsonObject nestedObject = new JsonObject();\r\n        nestedObject.addProperty(\"n\\0\", 1);\r\n        object.add(\"d\", nestedObject);\r\n        assertThat(object.toString()).isEqualTo(\"{\\\"a\\\":null,\\\"b\\\\u0000\\\":NaN,\\\"c\\\":[\\\"\\\\\\\"\\\"],\\\"d\\\":{\\\"n\\\\u0000\\\":1}}\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingAndRemovingObjectProperties",
    "start_line": 43,
    "end_line": 60,
    "code": "@Test\r\npublic void testAddingAndRemovingObjectProperties() {\r\n    JsonObject jsonObj = new JsonObject();\r\n    String propertyName = \"property\";\r\n    assertThat(jsonObj.has(propertyName)).isFalse();\r\n    assertThat(jsonObj.get(propertyName)).isNull();\r\n    JsonPrimitive value = new JsonPrimitive(\"blah\");\r\n    jsonObj.add(propertyName, value);\r\n    assertThat(jsonObj.get(propertyName)).isEqualTo(value);\r\n    JsonElement removedElement = jsonObj.remove(propertyName);\r\n    assertThat(removedElement).isEqualTo(value);\r\n    assertThat(jsonObj.has(propertyName)).isFalse();\r\n    assertThat(jsonObj.get(propertyName)).isNull();\r\n    assertThat(jsonObj.remove(propertyName)).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingNullPropertyValue",
    "start_line": 62,
    "end_line": 73,
    "code": "@Test\r\npublic void testAddingNullPropertyValue() {\r\n    String propertyName = \"property\";\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.add(propertyName, null);\r\n    assertThat(jsonObj.has(propertyName)).isTrue();\r\n    JsonElement jsonElement = jsonObj.get(propertyName);\r\n    assertThat(jsonElement).isNotNull();\r\n    assertThat(jsonElement.isJsonNull()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingNullOrEmptyPropertyName",
    "start_line": 75,
    "end_line": 84,
    "code": "@Test\r\npublic void testAddingNullOrEmptyPropertyName() {\r\n    JsonObject jsonObj = new JsonObject();\r\n    // Should not allow null property names\r\n    assertThrows(NullPointerException.class, () -> jsonObj.add(null, JsonNull.INSTANCE));\r\n    jsonObj.add(\"\", JsonNull.INSTANCE);\r\n    jsonObj.add(\"   \\t\", JsonNull.INSTANCE);\r\n    assertThat(jsonObj.keySet()).containsExactly(\"\", \"   \\t\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingBooleanProperties",
    "start_line": 86,
    "end_line": 97,
    "code": "@Test\r\npublic void testAddingBooleanProperties() {\r\n    String propertyName = \"property\";\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.addProperty(propertyName, true);\r\n    assertThat(jsonObj.has(propertyName)).isTrue();\r\n    JsonElement jsonElement = jsonObj.get(propertyName);\r\n    assertThat(jsonElement).isNotNull();\r\n    assertThat(jsonElement.getAsBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingStringProperties",
    "start_line": 99,
    "end_line": 112,
    "code": "@Test\r\npublic void testAddingStringProperties() {\r\n    String propertyName = \"property\";\r\n    String value = \"blah\";\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.addProperty(propertyName, value);\r\n    assertThat(jsonObj.has(propertyName)).isTrue();\r\n    JsonElement jsonElement = jsonObj.get(propertyName);\r\n    assertThat(jsonElement).isNotNull();\r\n    assertThat(jsonElement.getAsString()).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testAddingCharacterProperties",
    "start_line": 114,
    "end_line": 131,
    "code": "@Test\r\npublic void testAddingCharacterProperties() {\r\n    String propertyName = \"property\";\r\n    char value = 'a';\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.addProperty(propertyName, value);\r\n    assertThat(jsonObj.has(propertyName)).isTrue();\r\n    JsonElement jsonElement = jsonObj.get(propertyName);\r\n    assertThat(jsonElement).isNotNull();\r\n    assertThat(jsonElement.getAsString()).isEqualTo(String.valueOf(value));\r\n    @SuppressWarnings(\"deprecation\")\r\n    char character = jsonElement.getAsCharacter();\r\n    assertThat(character).isEqualTo(value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testPropertyWithQuotes",
    "start_line": 134,
    "end_line": 140,
    "code": "/**\r\n * From bug report http://code.google.com/p/google-gson/issues/detail?id=182\r\n */\r\n@Test\r\npublic void testPropertyWithQuotes() {\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.add(\"a\\\"b\", new JsonPrimitive(\"c\\\"d\"));\r\n    String json = new Gson().toJson(jsonObj);\r\n    assertThat(json).isEqualTo(\"{\\\"a\\\\\\\"b\\\":\\\"c\\\\\\\"d\\\"}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testWritePropertyWithEmptyStringName",
    "start_line": 143,
    "end_line": 148,
    "code": "/**\r\n * From issue 227.\r\n */\r\n@Test\r\npublic void testWritePropertyWithEmptyStringName() {\r\n    JsonObject jsonObj = new JsonObject();\r\n    jsonObj.add(\"\", new JsonPrimitive(true));\r\n    assertThat(new Gson().toJson(jsonObj)).isEqualTo(\"{\\\"\\\":true}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testReadPropertyWithEmptyStringName",
    "start_line": 150,
    "end_line": 154,
    "code": "@Test\r\npublic void testReadPropertyWithEmptyStringName() {\r\n    JsonObject jsonObj = JsonParser.parseString(\"{\\\"\\\":true}\").getAsJsonObject();\r\n    assertThat(jsonObj.get(\"\").getAsBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsOnEmptyObject",
    "start_line": 156,
    "end_line": 159,
    "code": "@Test\r\npublic void testEqualsOnEmptyObject() {\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsNonEmptyObject",
    "start_line": 161,
    "end_line": 182,
    "code": "@Test\r\npublic void testEqualsNonEmptyObject() {\r\n    JsonObject a = new JsonObject();\r\n    JsonObject b = new JsonObject();\r\n    new EqualsTester().addEqualityGroup(a).testEquals();\r\n    a.add(\"foo\", new JsonObject());\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n    b.add(\"foo\", new JsonObject());\r\n    MoreAsserts.assertEqualsAndHashCode(a, b);\r\n    a.add(\"bar\", new JsonObject());\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n    b.add(\"bar\", JsonNull.INSTANCE);\r\n    assertThat(a.equals(b)).isFalse();\r\n    assertThat(b.equals(a)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsHashCodeIgnoringOrder",
    "start_line": 184,
    "end_line": 199,
    "code": "@Test\r\npublic void testEqualsHashCodeIgnoringOrder() {\r\n    JsonObject a = new JsonObject();\r\n    JsonObject b = new JsonObject();\r\n    a.addProperty(\"1\", true);\r\n    b.addProperty(\"2\", false);\r\n    a.addProperty(\"2\", false);\r\n    b.addProperty(\"1\", true);\r\n    assertThat(new ArrayList<>(a.keySet())).containsExactly(\"1\", \"2\").inOrder();\r\n    assertThat(new ArrayList<>(b.keySet())).containsExactly(\"2\", \"1\").inOrder();\r\n    MoreAsserts.assertEqualsAndHashCode(a, b);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testSize",
    "start_line": 201,
    "end_line": 214,
    "code": "@Test\r\npublic void testSize() {\r\n    JsonObject o = new JsonObject();\r\n    assertThat(o.size()).isEqualTo(0);\r\n    o.add(\"Hello\", new JsonPrimitive(1));\r\n    assertThat(o.size()).isEqualTo(1);\r\n    o.add(\"Hi\", new JsonPrimitive(1));\r\n    assertThat(o.size()).isEqualTo(2);\r\n    o.remove(\"Hello\");\r\n    assertThat(o.size()).isEqualTo(1);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testIsEmpty",
    "start_line": 216,
    "end_line": 226,
    "code": "@Test\r\npublic void testIsEmpty() {\r\n    JsonObject o = new JsonObject();\r\n    assertThat(o.isEmpty()).isTrue();\r\n    o.add(\"Hello\", new JsonPrimitive(1));\r\n    assertThat(o.isEmpty()).isFalse();\r\n    o.remove(\"Hello\");\r\n    assertThat(o.isEmpty()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testDeepCopy",
    "start_line": 228,
    "end_line": 239,
    "code": "@Test\r\npublic void testDeepCopy() {\r\n    JsonObject original = new JsonObject();\r\n    JsonArray firstEntry = new JsonArray();\r\n    original.add(\"key\", firstEntry);\r\n    JsonObject copy = original.deepCopy();\r\n    firstEntry.add(new JsonPrimitive(\"z\"));\r\n    assertThat(original.get(\"key\").getAsJsonArray()).hasSize(1);\r\n    assertThat(copy.get(\"key\").getAsJsonArray()).hasSize(0);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testKeySet",
    "start_line": 242,
    "end_line": 273,
    "code": "/**\r\n * From issue 941\r\n */\r\n@Test\r\npublic void testKeySet() {\r\n    JsonObject a = new JsonObject();\r\n    assertThat(a.keySet()).hasSize(0);\r\n    a.add(\"foo\", new JsonArray());\r\n    a.add(\"bar\", new JsonObject());\r\n    assertThat(a.size()).isEqualTo(2);\r\n    assertThat(a.keySet()).hasSize(2);\r\n    assertThat(a.keySet()).containsExactly(\"foo\", \"bar\").inOrder();\r\n    a.addProperty(\"1\", true);\r\n    a.addProperty(\"2\", false);\r\n    // Insertion order should be preserved by keySet()\r\n    Deque<String> expectedKeys = new ArrayDeque<>(Arrays.asList(\"foo\", \"bar\", \"1\", \"2\"));\r\n    // Note: Must wrap in ArrayList because Deque implementations do not implement `equals`\r\n    assertThat(new ArrayList<>(a.keySet())).isEqualTo(new ArrayList<>(expectedKeys));\r\n    Iterator<String> iterator = a.keySet().iterator();\r\n    // Remove keys one by one\r\n    for (int i = a.size(); i >= 1; i--) {\r\n        assertThat(iterator.hasNext()).isTrue();\r\n        assertThat(iterator.next()).isEqualTo(expectedKeys.getFirst());\r\n        iterator.remove();\r\n        expectedKeys.removeFirst();\r\n        assertThat(a.size()).isEqualTo(i - 1);\r\n        assertThat(new ArrayList<>(a.keySet())).isEqualTo(new ArrayList<>(expectedKeys));\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testEntrySet",
    "start_line": 275,
    "end_line": 340,
    "code": "@Test\r\npublic void testEntrySet() {\r\n    JsonObject o = new JsonObject();\r\n    assertThat(o.entrySet()).hasSize(0);\r\n    o.addProperty(\"b\", true);\r\n    Set<?> expectedEntries = Collections.singleton(new SimpleEntry<>(\"b\", new JsonPrimitive(true)));\r\n    assertThat(o.entrySet()).isEqualTo(expectedEntries);\r\n    assertThat(o.entrySet()).hasSize(1);\r\n    o.addProperty(\"a\", false);\r\n    // Insertion order should be preserved by entrySet()\r\n    List<?> expectedEntriesList = Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(true)), new SimpleEntry<>(\"a\", new JsonPrimitive(false)));\r\n    assertThat(new ArrayList<>(o.entrySet())).isEqualTo(expectedEntriesList);\r\n    Iterator<Entry<String, JsonElement>> iterator = o.entrySet().iterator();\r\n    // Test behavior of Entry.setValue\r\n    for (int i = 0; i < o.size(); i++) {\r\n        Entry<String, JsonElement> entry = iterator.next();\r\n        entry.setValue(new JsonPrimitive(i));\r\n        assertThat(entry.getValue()).isEqualTo(new JsonPrimitive(i));\r\n    }\r\n    expectedEntriesList = Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(0)), new SimpleEntry<>(\"a\", new JsonPrimitive(1)));\r\n    assertThat(new ArrayList<>(o.entrySet())).isEqualTo(expectedEntriesList);\r\n    Entry<String, JsonElement> entry = o.entrySet().iterator().next();\r\n    // null value is not permitted, only JsonNull is supported\r\n    // This intentionally deviates from the behavior of the other JsonObject methods which\r\n    // implicitly convert null -> JsonNull, to match more closely the contract of Map.Entry\r\n    var e = assertThrows(NullPointerException.class, () -> entry.setValue(null));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"value == null\");\r\n    assertThat(entry.getValue()).isNotNull();\r\n    o.addProperty(\"key1\", 1);\r\n    o.addProperty(\"key2\", 2);\r\n    Deque<?> expectedEntriesQueue = new ArrayDeque<>(Arrays.asList(new SimpleEntry<>(\"b\", new JsonPrimitive(0)), new SimpleEntry<>(\"a\", new JsonPrimitive(1)), new SimpleEntry<>(\"key1\", new JsonPrimitive(1)), new SimpleEntry<>(\"key2\", new JsonPrimitive(2))));\r\n    // Note: Must wrap in ArrayList because Deque implementations do not implement `equals`\r\n    assertThat(new ArrayList<>(o.entrySet())).isEqualTo(new ArrayList<>(expectedEntriesQueue));\r\n    iterator = o.entrySet().iterator();\r\n    // Remove entries one by one\r\n    for (int i = o.size(); i >= 1; i--) {\r\n        assertThat(iterator.hasNext()).isTrue();\r\n        assertThat(iterator.next()).isEqualTo(expectedEntriesQueue.getFirst());\r\n        iterator.remove();\r\n        expectedEntriesQueue.removeFirst();\r\n        assertThat(o.size()).isEqualTo(i - 1);\r\n        assertThat(new ArrayList<>(o.entrySet())).isEqualTo(new ArrayList<>(expectedEntriesQueue));\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  },
  {
    "type": "method",
    "name": "testToString",
    "start_line": 342,
    "end_line": 357,
    "code": "@Test\r\npublic void testToString() {\r\n    JsonObject object = new JsonObject();\r\n    assertThat(object.toString()).isEqualTo(\"{}\");\r\n    object.add(\"a\", JsonNull.INSTANCE);\r\n    object.addProperty(\"b\\0\", Float.NaN);\r\n    JsonArray nestedArray = new JsonArray();\r\n    nestedArray.add('\"');\r\n    object.add(\"c\", nestedArray);\r\n    JsonObject nestedObject = new JsonObject();\r\n    nestedObject.addProperty(\"n\\0\", 1);\r\n    object.add(\"d\", nestedObject);\r\n    assertThat(object.toString()).isEqualTo(\"{\\\"a\\\":null,\\\"b\\\\u0000\\\":NaN,\\\"c\\\":[\\\"\\\\\\\"\\\"],\\\"d\\\":{\\\"n\\\\u0000\\\":1}}\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonObjectTest.java"
  }
]