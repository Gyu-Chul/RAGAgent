[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.Keep",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.errorprone.annotations.Keep;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.Since",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.annotations.Since;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.Until",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.annotations.Until;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Excluder",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.Excluder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 26,
    "end_line": 26,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "class",
    "name": "VersionExclusionStrategyTest",
    "start_line": 33,
    "end_line": 121,
    "code": "/**\r\n * Unit tests for the {@link Excluder} class.\r\n *\r\n * @author Joel Leitch\r\n */\r\npublic class VersionExclusionStrategyTest {\r\n\r\n    private static final double VERSION = 5.0D;\r\n\r\n    private static void assertIncludesClass(Excluder excluder, Class<?> c) {\r\n        assertThat(excluder.excludeClass(c, true)).isFalse();\r\n        assertThat(excluder.excludeClass(c, false)).isFalse();\r\n    }\r\n\r\n    private static void assertExcludesClass(Excluder excluder, Class<?> c) {\r\n        assertThat(excluder.excludeClass(c, true)).isTrue();\r\n        assertThat(excluder.excludeClass(c, false)).isTrue();\r\n    }\r\n\r\n    private static void assertIncludesField(Excluder excluder, Field f) {\r\n        assertThat(excluder.excludeField(f, true)).isFalse();\r\n        assertThat(excluder.excludeField(f, false)).isFalse();\r\n    }\r\n\r\n    private static void assertExcludesField(Excluder excluder, Field f) {\r\n        assertThat(excluder.excludeField(f, true)).isTrue();\r\n        assertThat(excluder.excludeField(f, false)).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testSameVersion() throws Exception {\r\n        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION);\r\n        assertIncludesClass(excluder, MockClassSince.class);\r\n        assertIncludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n        // Until version is exclusive\r\n        assertExcludesClass(excluder, MockClassUntil.class);\r\n        assertExcludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n        assertIncludesClass(excluder, MockClassBoth.class);\r\n        assertIncludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n    }\r\n\r\n    @Test\r\n    public void testNewerVersion() throws Exception {\r\n        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION + 5);\r\n        assertIncludesClass(excluder, MockClassSince.class);\r\n        assertIncludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n        assertExcludesClass(excluder, MockClassUntil.class);\r\n        assertExcludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n        assertExcludesClass(excluder, MockClassBoth.class);\r\n        assertExcludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n    }\r\n\r\n    @Test\r\n    public void testOlderVersion() throws Exception {\r\n        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION - 5);\r\n        assertExcludesClass(excluder, MockClassSince.class);\r\n        assertExcludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n        assertIncludesClass(excluder, MockClassUntil.class);\r\n        assertIncludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n        assertExcludesClass(excluder, MockClassBoth.class);\r\n        assertExcludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n    }\r\n\r\n    @Since(VERSION)\r\n    private static class MockClassSince {\r\n\r\n        @Since(VERSION)\r\n        @Keep\r\n        public final int someField = 0;\r\n    }\r\n\r\n    @Until(VERSION)\r\n    private static class MockClassUntil {\r\n\r\n        @Until(VERSION)\r\n        @Keep\r\n        public final int someField = 0;\r\n    }\r\n\r\n    @Since(VERSION)\r\n    @Until(VERSION + 2)\r\n    private static class MockClassBoth {\r\n\r\n        @Since(VERSION)\r\n        @Until(VERSION + 2)\r\n        @Keep\r\n        public final int someField = 0;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "field",
    "name": "VERSION",
    "start_line": 34,
    "end_line": 34,
    "code": "private static final double VERSION = 5.0D;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "assertIncludesClass",
    "start_line": 36,
    "end_line": 39,
    "code": "private static void assertIncludesClass(Excluder excluder, Class<?> c) {\r\n    assertThat(excluder.excludeClass(c, true)).isFalse();\r\n    assertThat(excluder.excludeClass(c, false)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "assertExcludesClass",
    "start_line": 41,
    "end_line": 44,
    "code": "private static void assertExcludesClass(Excluder excluder, Class<?> c) {\r\n    assertThat(excluder.excludeClass(c, true)).isTrue();\r\n    assertThat(excluder.excludeClass(c, false)).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "assertIncludesField",
    "start_line": 46,
    "end_line": 49,
    "code": "private static void assertIncludesField(Excluder excluder, Field f) {\r\n    assertThat(excluder.excludeField(f, true)).isFalse();\r\n    assertThat(excluder.excludeField(f, false)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "assertExcludesField",
    "start_line": 51,
    "end_line": 54,
    "code": "private static void assertExcludesField(Excluder excluder, Field f) {\r\n    assertThat(excluder.excludeField(f, true)).isTrue();\r\n    assertThat(excluder.excludeField(f, false)).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "testSameVersion",
    "start_line": 56,
    "end_line": 68,
    "code": "@Test\r\npublic void testSameVersion() throws Exception {\r\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION);\r\n    assertIncludesClass(excluder, MockClassSince.class);\r\n    assertIncludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n    // Until version is exclusive\r\n    assertExcludesClass(excluder, MockClassUntil.class);\r\n    assertExcludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n    assertIncludesClass(excluder, MockClassBoth.class);\r\n    assertIncludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "testNewerVersion",
    "start_line": 70,
    "end_line": 81,
    "code": "@Test\r\npublic void testNewerVersion() throws Exception {\r\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION + 5);\r\n    assertIncludesClass(excluder, MockClassSince.class);\r\n    assertIncludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n    assertExcludesClass(excluder, MockClassUntil.class);\r\n    assertExcludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n    assertExcludesClass(excluder, MockClassBoth.class);\r\n    assertExcludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  },
  {
    "type": "method",
    "name": "testOlderVersion",
    "start_line": 83,
    "end_line": 94,
    "code": "@Test\r\npublic void testOlderVersion() throws Exception {\r\n    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION - 5);\r\n    assertExcludesClass(excluder, MockClassSince.class);\r\n    assertExcludesField(excluder, MockClassSince.class.getField(\"someField\"));\r\n    assertIncludesClass(excluder, MockClassUntil.class);\r\n    assertIncludesField(excluder, MockClassUntil.class.getField(\"someField\"));\r\n    assertExcludesClass(excluder, MockClassBoth.class);\r\n    assertExcludesField(excluder, MockClassBoth.class.getField(\"someField\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\VersionExclusionStrategyTest.java"
  }
]