[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertWithMessage",
    "start_line": 20,
    "end_line": 20,
    "code": "import static com.google.common.truth.Truth.assertWithMessage;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 21,
    "end_line": 21,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.common.MoreAsserts",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.common.MoreAsserts;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 26,
    "end_line": 26,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "class",
    "name": "JsonPrimitiveTest",
    "start_line": 33,
    "end_line": 367,
    "code": "/**\r\n * Unit test for the {@link JsonPrimitive} class.\r\n *\r\n * @author Joel Leitch\r\n */\r\npublic class JsonPrimitiveTest {\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    @Test\r\n    public void testNulls() {\r\n        assertThrows(NullPointerException.class, () -> new JsonPrimitive((Boolean) null));\r\n        assertThrows(NullPointerException.class, () -> new JsonPrimitive((Number) null));\r\n        assertThrows(NullPointerException.class, () -> new JsonPrimitive((String) null));\r\n        assertThrows(NullPointerException.class, () -> new JsonPrimitive((Character) null));\r\n    }\r\n\r\n    @Test\r\n    public void testBoolean() {\r\n        JsonPrimitive json = new JsonPrimitive(true);\r\n        assertThat(json.isBoolean()).isTrue();\r\n        assertThat(json.getAsBoolean()).isTrue();\r\n        // Extra support for booleans\r\n        json = new JsonPrimitive(1);\r\n        assertThat(json.getAsBoolean()).isFalse();\r\n        json = new JsonPrimitive(\"1\");\r\n        assertThat(json.getAsBoolean()).isFalse();\r\n        json = new JsonPrimitive(\"true\");\r\n        assertThat(json.getAsBoolean()).isTrue();\r\n        json = new JsonPrimitive(\"TrUe\");\r\n        assertThat(json.getAsBoolean()).isTrue();\r\n        json = new JsonPrimitive(\"1.3\");\r\n        assertThat(json.getAsBoolean()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testParsingStringAsBoolean() {\r\n        JsonPrimitive json = new JsonPrimitive(\"true\");\r\n        assertThat(json.isBoolean()).isFalse();\r\n        assertThat(json.getAsBoolean()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testParsingStringAsNumber() {\r\n        JsonPrimitive json = new JsonPrimitive(\"1\");\r\n        assertThat(json.isNumber()).isFalse();\r\n        assertThat(json.getAsDouble()).isEqualTo(1.0);\r\n        assertThat(json.getAsFloat()).isEqualTo(1F);\r\n        assertThat(json.getAsInt()).isEqualTo(1);\r\n        assertThat(json.getAsLong()).isEqualTo(1L);\r\n        assertThat(json.getAsShort()).isEqualTo((short) 1);\r\n        assertThat(json.getAsByte()).isEqualTo((byte) 1);\r\n        assertThat(json.getAsBigInteger()).isEqualTo(new BigInteger(\"1\"));\r\n        assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal(\"1\"));\r\n    }\r\n\r\n    @Test\r\n    public void testAsNumber_Boolean() {\r\n        JsonPrimitive json = new JsonPrimitive(true);\r\n        var e = assertThrows(UnsupportedOperationException.class, () -> json.getAsNumber());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Primitive is neither a number nor a string\");\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Test\r\n    public void testStringsAndChar() {\r\n        JsonPrimitive json = new JsonPrimitive(\"abc\");\r\n        assertThat(json.isString()).isTrue();\r\n        assertThat(json.getAsCharacter()).isEqualTo('a');\r\n        assertThat(json.getAsString()).isEqualTo(\"abc\");\r\n        json = new JsonPrimitive('z');\r\n        assertThat(json.isString()).isTrue();\r\n        assertThat(json.getAsCharacter()).isEqualTo('z');\r\n        assertThat(json.getAsString()).isEqualTo(\"z\");\r\n        json = new JsonPrimitive(true);\r\n        assertThat(json.getAsString()).isEqualTo(\"true\");\r\n        JsonPrimitive emptyString = new JsonPrimitive(\"\");\r\n        assertThat(emptyString.getAsString()).isEqualTo(\"\");\r\n        var e = assertThrows(UnsupportedOperationException.class, () -> emptyString.getAsCharacter());\r\n        assertThat(e).hasMessageThat().isEqualTo(\"String value is empty\");\r\n    }\r\n\r\n    @Test\r\n    public void testExponential() {\r\n        JsonPrimitive json = new JsonPrimitive(\"1E+7\");\r\n        assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal(\"1E+7\"));\r\n        assertThat(json.getAsDouble()).isEqualTo(1E+7);\r\n        // Integers can not handle exponents like this\r\n        assertThrows(NumberFormatException.class, () -> json.getAsInt());\r\n    }\r\n\r\n    @Test\r\n    public void testByteEqualsShort() {\r\n        JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive((short) 10);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testByteEqualsInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(10);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testByteEqualsLong() {\r\n        JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(10L);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testByteEqualsBigInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testShortEqualsInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(10);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testShortEqualsLong() {\r\n        JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(10L);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testShortEqualsBigInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testIntegerEqualsLong() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10);\r\n        JsonPrimitive p2 = new JsonPrimitive(10L);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testIntegerEqualsBigInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testLongEqualsBigInteger() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10L);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testFloatEqualsDouble() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10.25F);\r\n        JsonPrimitive p2 = new JsonPrimitive(10.25D);\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testFloatEqualsBigDecimal() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10.25F);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testDoubleEqualsBigDecimal() {\r\n        JsonPrimitive p1 = new JsonPrimitive(10.25D);\r\n        JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\r\n        assertThat(p1).isEqualTo(p2);\r\n        assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n    }\r\n\r\n    @Test\r\n    public void testToString() {\r\n        JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\r\n        assertThat(json.toString()).isEqualTo(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\");\r\n        json = new JsonPrimitive(\"\");\r\n        assertThat(json.toString()).isEqualTo(\"\\\"\\\"\");\r\n        json = new JsonPrimitive(new BigDecimal(\"1.333\"));\r\n        assertThat(json.toString()).isEqualTo(\"1.333\");\r\n        // Preserves trailing 0\r\n        json = new JsonPrimitive(new BigDecimal(\"1.0000\"));\r\n        assertThat(json.toString()).isEqualTo(\"1.0000\");\r\n        json = new JsonPrimitive(Float.NaN);\r\n        assertThat(json.toString()).isEqualTo(\"NaN\");\r\n        json = new JsonPrimitive(Double.NEGATIVE_INFINITY);\r\n        assertThat(json.toString()).isEqualTo(\"-Infinity\");\r\n        json = new JsonPrimitive('a');\r\n        assertThat(json.toString()).isEqualTo(\"\\\"a\\\"\");\r\n        json = new JsonPrimitive('\\0');\r\n        assertThat(json.toString()).isEqualTo(\"\\\"\\\\u0000\\\"\");\r\n        json = new JsonPrimitive(true);\r\n        assertThat(json.toString()).isEqualTo(\"true\");\r\n    }\r\n\r\n    @Test\r\n    public void testEquals() {\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"A\"), new JsonPrimitive(\"A\"));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY), new JsonPrimitive(Float.NEGATIVE_INFINITY));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY), new JsonPrimitive(Float.POSITIVE_INFINITY));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY), new JsonPrimitive(Double.NEGATIVE_INFINITY));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY), new JsonPrimitive(Double.POSITIVE_INFINITY));\r\n        assertThat(new JsonPrimitive(\"a\").equals(new JsonPrimitive(\"b\"))).isFalse();\r\n        assertThat(new JsonPrimitive(true).equals(new JsonPrimitive(false))).isFalse();\r\n        assertThat(new JsonPrimitive(0).equals(new JsonPrimitive(1))).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsAcrossTypes() {\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"a\"), new JsonPrimitive('a'));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigDecimal(\"0\")), new JsonPrimitive(0));\r\n        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsIntegerAndBigInteger() {\r\n        JsonPrimitive a = new JsonPrimitive(5L);\r\n        JsonPrimitive b = new JsonPrimitive(new BigInteger(\"18446744073709551621\"));\r\n        assertWithMessage(\"%s not equals %s\", a, b).that(a.equals(b)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsDoesNotEquateStringAndNonStringTypes() {\r\n        assertThat(new JsonPrimitive(\"true\").equals(new JsonPrimitive(true))).isFalse();\r\n        assertThat(new JsonPrimitive(\"0\").equals(new JsonPrimitive(0))).isFalse();\r\n        assertThat(new JsonPrimitive(\"NaN\").equals(new JsonPrimitive(Float.NaN))).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testDeepCopy() {\r\n        JsonPrimitive a = new JsonPrimitive(\"a\");\r\n        // Primitives are immutable!\r\n        assertThat(a).isSameInstanceAs(a.deepCopy());\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalEquals() {\r\n        JsonPrimitive small = new JsonPrimitive(1.0);\r\n        JsonPrimitive large = new JsonPrimitive(2.0);\r\n        assertThat(small.equals(large)).isFalse();\r\n        BigDecimal doubleMax = BigDecimal.valueOf(Double.MAX_VALUE);\r\n        JsonPrimitive smallDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal(\"100.0\")));\r\n        JsonPrimitive largeDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal(\"200.0\")));\r\n        assertThat(smallDecimal.equals(largeDecimal)).isFalse();\r\n    }\r\n\r\n    @Test\r\n    public void testBigDecimalEqualsZero() {\r\n        assertThat(new JsonPrimitive(new BigDecimal(\"0.0\")).equals(new JsonPrimitive(new BigDecimal(\"0.00\")))).isTrue();\r\n        assertThat(new JsonPrimitive(new BigDecimal(\"0.00\")).equals(new JsonPrimitive(Double.valueOf(\"0.00\")))).isTrue();\r\n    }\r\n\r\n    /**\r\n     * Verifies that {@link JsonPrimitive#equals(Object)} is <i>transitive</i> for {@link BigDecimal},\r\n     * as required by the {@link Object#equals(Object)} documentation.\r\n     */\r\n    @Test\r\n    public void testBigDecimalEqualsTransitive() {\r\n        JsonPrimitive x = new JsonPrimitive(new BigDecimal(\"0\"));\r\n        JsonPrimitive y = new JsonPrimitive(0.0d);\r\n        JsonPrimitive z = new JsonPrimitive(new BigDecimal(\"0.00\"));\r\n        assertThat(x.equals(y)).isTrue();\r\n        assertThat(y.equals(z)).isTrue();\r\n        // ... implies\r\n        assertThat(x.equals(z)).isTrue();\r\n    }\r\n\r\n    @Test\r\n    public void testEqualsDoubleNaNAndBigDecimal() {\r\n        assertThat(new JsonPrimitive(Double.NaN).equals(new JsonPrimitive(new BigDecimal(\"1.0\")))).isFalse();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testNulls",
    "start_line": 35,
    "end_line": 42,
    "code": "@SuppressWarnings(\"unused\")\r\n@Test\r\npublic void testNulls() {\r\n    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Boolean) null));\r\n    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Number) null));\r\n    assertThrows(NullPointerException.class, () -> new JsonPrimitive((String) null));\r\n    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Character) null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBoolean",
    "start_line": 44,
    "end_line": 66,
    "code": "@Test\r\npublic void testBoolean() {\r\n    JsonPrimitive json = new JsonPrimitive(true);\r\n    assertThat(json.isBoolean()).isTrue();\r\n    assertThat(json.getAsBoolean()).isTrue();\r\n    // Extra support for booleans\r\n    json = new JsonPrimitive(1);\r\n    assertThat(json.getAsBoolean()).isFalse();\r\n    json = new JsonPrimitive(\"1\");\r\n    assertThat(json.getAsBoolean()).isFalse();\r\n    json = new JsonPrimitive(\"true\");\r\n    assertThat(json.getAsBoolean()).isTrue();\r\n    json = new JsonPrimitive(\"TrUe\");\r\n    assertThat(json.getAsBoolean()).isTrue();\r\n    json = new JsonPrimitive(\"1.3\");\r\n    assertThat(json.getAsBoolean()).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testParsingStringAsBoolean",
    "start_line": 68,
    "end_line": 74,
    "code": "@Test\r\npublic void testParsingStringAsBoolean() {\r\n    JsonPrimitive json = new JsonPrimitive(\"true\");\r\n    assertThat(json.isBoolean()).isFalse();\r\n    assertThat(json.getAsBoolean()).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testParsingStringAsNumber",
    "start_line": 76,
    "end_line": 89,
    "code": "@Test\r\npublic void testParsingStringAsNumber() {\r\n    JsonPrimitive json = new JsonPrimitive(\"1\");\r\n    assertThat(json.isNumber()).isFalse();\r\n    assertThat(json.getAsDouble()).isEqualTo(1.0);\r\n    assertThat(json.getAsFloat()).isEqualTo(1F);\r\n    assertThat(json.getAsInt()).isEqualTo(1);\r\n    assertThat(json.getAsLong()).isEqualTo(1L);\r\n    assertThat(json.getAsShort()).isEqualTo((short) 1);\r\n    assertThat(json.getAsByte()).isEqualTo((byte) 1);\r\n    assertThat(json.getAsBigInteger()).isEqualTo(new BigInteger(\"1\"));\r\n    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal(\"1\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testAsNumber_Boolean",
    "start_line": 91,
    "end_line": 96,
    "code": "@Test\r\npublic void testAsNumber_Boolean() {\r\n    JsonPrimitive json = new JsonPrimitive(true);\r\n    var e = assertThrows(UnsupportedOperationException.class, () -> json.getAsNumber());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Primitive is neither a number nor a string\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testStringsAndChar",
    "start_line": 98,
    "end_line": 119,
    "code": "@SuppressWarnings(\"deprecation\")\r\n@Test\r\npublic void testStringsAndChar() {\r\n    JsonPrimitive json = new JsonPrimitive(\"abc\");\r\n    assertThat(json.isString()).isTrue();\r\n    assertThat(json.getAsCharacter()).isEqualTo('a');\r\n    assertThat(json.getAsString()).isEqualTo(\"abc\");\r\n    json = new JsonPrimitive('z');\r\n    assertThat(json.isString()).isTrue();\r\n    assertThat(json.getAsCharacter()).isEqualTo('z');\r\n    assertThat(json.getAsString()).isEqualTo(\"z\");\r\n    json = new JsonPrimitive(true);\r\n    assertThat(json.getAsString()).isEqualTo(\"true\");\r\n    JsonPrimitive emptyString = new JsonPrimitive(\"\");\r\n    assertThat(emptyString.getAsString()).isEqualTo(\"\");\r\n    var e = assertThrows(UnsupportedOperationException.class, () -> emptyString.getAsCharacter());\r\n    assertThat(e).hasMessageThat().isEqualTo(\"String value is empty\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testExponential",
    "start_line": 121,
    "end_line": 130,
    "code": "@Test\r\npublic void testExponential() {\r\n    JsonPrimitive json = new JsonPrimitive(\"1E+7\");\r\n    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal(\"1E+7\"));\r\n    assertThat(json.getAsDouble()).isEqualTo(1E+7);\r\n    // Integers can not handle exponents like this\r\n    assertThrows(NumberFormatException.class, () -> json.getAsInt());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteEqualsShort",
    "start_line": 132,
    "end_line": 138,
    "code": "@Test\r\npublic void testByteEqualsShort() {\r\n    JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive((short) 10);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteEqualsInteger",
    "start_line": 140,
    "end_line": 146,
    "code": "@Test\r\npublic void testByteEqualsInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(10);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteEqualsLong",
    "start_line": 148,
    "end_line": 154,
    "code": "@Test\r\npublic void testByteEqualsLong() {\r\n    JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(10L);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testByteEqualsBigInteger",
    "start_line": 156,
    "end_line": 162,
    "code": "@Test\r\npublic void testByteEqualsBigInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive((byte) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortEqualsInteger",
    "start_line": 164,
    "end_line": 170,
    "code": "@Test\r\npublic void testShortEqualsInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(10);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortEqualsLong",
    "start_line": 172,
    "end_line": 178,
    "code": "@Test\r\npublic void testShortEqualsLong() {\r\n    JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(10L);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testShortEqualsBigInteger",
    "start_line": 180,
    "end_line": 186,
    "code": "@Test\r\npublic void testShortEqualsBigInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive((short) 10);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testIntegerEqualsLong",
    "start_line": 188,
    "end_line": 194,
    "code": "@Test\r\npublic void testIntegerEqualsLong() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10);\r\n    JsonPrimitive p2 = new JsonPrimitive(10L);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testIntegerEqualsBigInteger",
    "start_line": 196,
    "end_line": 202,
    "code": "@Test\r\npublic void testIntegerEqualsBigInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testLongEqualsBigInteger",
    "start_line": 204,
    "end_line": 210,
    "code": "@Test\r\npublic void testLongEqualsBigInteger() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10L);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatEqualsDouble",
    "start_line": 212,
    "end_line": 218,
    "code": "@Test\r\npublic void testFloatEqualsDouble() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10.25F);\r\n    JsonPrimitive p2 = new JsonPrimitive(10.25D);\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testFloatEqualsBigDecimal",
    "start_line": 220,
    "end_line": 226,
    "code": "@Test\r\npublic void testFloatEqualsBigDecimal() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10.25F);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDoubleEqualsBigDecimal",
    "start_line": 228,
    "end_line": 234,
    "code": "@Test\r\npublic void testDoubleEqualsBigDecimal() {\r\n    JsonPrimitive p1 = new JsonPrimitive(10.25D);\r\n    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\r\n    assertThat(p1).isEqualTo(p2);\r\n    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testToString",
    "start_line": 236,
    "end_line": 265,
    "code": "@Test\r\npublic void testToString() {\r\n    JsonPrimitive json = new JsonPrimitive(\"Some\\nEscaped\\nValue\");\r\n    assertThat(json.toString()).isEqualTo(\"\\\"Some\\\\nEscaped\\\\nValue\\\"\");\r\n    json = new JsonPrimitive(\"\");\r\n    assertThat(json.toString()).isEqualTo(\"\\\"\\\"\");\r\n    json = new JsonPrimitive(new BigDecimal(\"1.333\"));\r\n    assertThat(json.toString()).isEqualTo(\"1.333\");\r\n    // Preserves trailing 0\r\n    json = new JsonPrimitive(new BigDecimal(\"1.0000\"));\r\n    assertThat(json.toString()).isEqualTo(\"1.0000\");\r\n    json = new JsonPrimitive(Float.NaN);\r\n    assertThat(json.toString()).isEqualTo(\"NaN\");\r\n    json = new JsonPrimitive(Double.NEGATIVE_INFINITY);\r\n    assertThat(json.toString()).isEqualTo(\"-Infinity\");\r\n    json = new JsonPrimitive('a');\r\n    assertThat(json.toString()).isEqualTo(\"\\\"a\\\"\");\r\n    json = new JsonPrimitive('\\0');\r\n    assertThat(json.toString()).isEqualTo(\"\\\"\\\\u0000\\\"\");\r\n    json = new JsonPrimitive(true);\r\n    assertThat(json.toString()).isEqualTo(\"true\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testEquals",
    "start_line": 267,
    "end_line": 287,
    "code": "@Test\r\npublic void testEquals() {\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"A\"), new JsonPrimitive(\"A\"));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY), new JsonPrimitive(Float.NEGATIVE_INFINITY));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY), new JsonPrimitive(Float.POSITIVE_INFINITY));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY), new JsonPrimitive(Double.NEGATIVE_INFINITY));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY), new JsonPrimitive(Double.POSITIVE_INFINITY));\r\n    assertThat(new JsonPrimitive(\"a\").equals(new JsonPrimitive(\"b\"))).isFalse();\r\n    assertThat(new JsonPrimitive(true).equals(new JsonPrimitive(false))).isFalse();\r\n    assertThat(new JsonPrimitive(0).equals(new JsonPrimitive(1))).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsAcrossTypes",
    "start_line": 289,
    "end_line": 299,
    "code": "@Test\r\npublic void testEqualsAcrossTypes() {\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(\"a\"), new JsonPrimitive('a'));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(\"0\")), new JsonPrimitive(0));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigDecimal(\"0\")), new JsonPrimitive(0));\r\n    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsIntegerAndBigInteger",
    "start_line": 301,
    "end_line": 306,
    "code": "@Test\r\npublic void testEqualsIntegerAndBigInteger() {\r\n    JsonPrimitive a = new JsonPrimitive(5L);\r\n    JsonPrimitive b = new JsonPrimitive(new BigInteger(\"18446744073709551621\"));\r\n    assertWithMessage(\"%s not equals %s\", a, b).that(a.equals(b)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsDoesNotEquateStringAndNonStringTypes",
    "start_line": 308,
    "end_line": 313,
    "code": "@Test\r\npublic void testEqualsDoesNotEquateStringAndNonStringTypes() {\r\n    assertThat(new JsonPrimitive(\"true\").equals(new JsonPrimitive(true))).isFalse();\r\n    assertThat(new JsonPrimitive(\"0\").equals(new JsonPrimitive(0))).isFalse();\r\n    assertThat(new JsonPrimitive(\"NaN\").equals(new JsonPrimitive(Float.NaN))).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testDeepCopy",
    "start_line": 315,
    "end_line": 319,
    "code": "@Test\r\npublic void testDeepCopy() {\r\n    JsonPrimitive a = new JsonPrimitive(\"a\");\r\n    // Primitives are immutable!\r\n    assertThat(a).isSameInstanceAs(a.deepCopy());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalEquals",
    "start_line": 321,
    "end_line": 331,
    "code": "@Test\r\npublic void testBigDecimalEquals() {\r\n    JsonPrimitive small = new JsonPrimitive(1.0);\r\n    JsonPrimitive large = new JsonPrimitive(2.0);\r\n    assertThat(small.equals(large)).isFalse();\r\n    BigDecimal doubleMax = BigDecimal.valueOf(Double.MAX_VALUE);\r\n    JsonPrimitive smallDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal(\"100.0\")));\r\n    JsonPrimitive largeDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal(\"200.0\")));\r\n    assertThat(smallDecimal.equals(largeDecimal)).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalEqualsZero",
    "start_line": 333,
    "end_line": 344,
    "code": "@Test\r\npublic void testBigDecimalEqualsZero() {\r\n    assertThat(new JsonPrimitive(new BigDecimal(\"0.0\")).equals(new JsonPrimitive(new BigDecimal(\"0.00\")))).isTrue();\r\n    assertThat(new JsonPrimitive(new BigDecimal(\"0.00\")).equals(new JsonPrimitive(Double.valueOf(\"0.00\")))).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testBigDecimalEqualsTransitive",
    "start_line": 350,
    "end_line": 360,
    "code": "/**\r\n * Verifies that {@link JsonPrimitive#equals(Object)} is <i>transitive</i> for {@link BigDecimal},\r\n * as required by the {@link Object#equals(Object)} documentation.\r\n */\r\n@Test\r\npublic void testBigDecimalEqualsTransitive() {\r\n    JsonPrimitive x = new JsonPrimitive(new BigDecimal(\"0\"));\r\n    JsonPrimitive y = new JsonPrimitive(0.0d);\r\n    JsonPrimitive z = new JsonPrimitive(new BigDecimal(\"0.00\"));\r\n    assertThat(x.equals(y)).isTrue();\r\n    assertThat(y.equals(z)).isTrue();\r\n    // ... implies\r\n    assertThat(x.equals(z)).isTrue();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  },
  {
    "type": "method",
    "name": "testEqualsDoubleNaNAndBigDecimal",
    "start_line": 362,
    "end_line": 366,
    "code": "@Test\r\npublic void testEqualsDoubleNaNAndBigDecimal() {\r\n    assertThat(new JsonPrimitive(Double.NaN).equals(new JsonPrimitive(new BigDecimal(\"1.0\")))).isFalse();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\test\\java\\com\\google\\gson\\JsonPrimitiveTest.java"
  }
]