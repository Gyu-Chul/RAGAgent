[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 19,
    "end_line": 19,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  },
  {
    "type": "import",
    "name": "java.util.Locale",
    "start_line": 20,
    "end_line": 20,
    "code": "import java.util.Locale;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  },
  {
    "type": "enum",
    "name": "FieldNamingPolicy",
    "start_line": 31,
    "end_line": 213,
    "code": "/**\r\n * An enumeration that defines a few standard naming conventions for JSON field names. This\r\n * enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder} to configure a\r\n * {@link com.google.gson.Gson} instance to properly translate Java field names into the desired\r\n * JSON field names.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic enum FieldNamingPolicy implements FieldNamingStrategy {\r\n\r\n    /**\r\n     * Using this naming policy with Gson will ensure that the field name is unchanged.\r\n     */\r\n    IDENTITY {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return f.getName();\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will ensure that the first \"letter\" of the Java field name\r\n     * is capitalized when serialized to its JSON form.\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; SomeFieldName\r\n     *   <li>_someFieldName ---&gt; _SomeFieldName\r\n     * </ul>\r\n     */\r\n    UPPER_CAMEL_CASE {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return upperCaseFirstLetter(f.getName());\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will ensure that the first \"letter\" of the Java field name\r\n     * is capitalized when serialized to its JSON form and the words will be separated by a space.\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; Some Field Name\r\n     *   <li>_someFieldName ---&gt; _Some Field Name\r\n     * </ul>\r\n     *\r\n     * @since 1.4\r\n     */\r\n    UPPER_CAMEL_CASE_WITH_SPACES {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return upperCaseFirstLetter(separateCamelCase(f.getName(), ' '));\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will modify the Java Field name from its camel cased form to\r\n     * an upper case field name where each word is separated by an underscore (_).\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; SOME_FIELD_NAME\r\n     *   <li>_someFieldName ---&gt; _SOME_FIELD_NAME\r\n     *   <li>aStringField ---&gt; A_STRING_FIELD\r\n     *   <li>aURL ---&gt; A_U_R_L\r\n     * </ul>\r\n     *\r\n     * @since 2.9.0\r\n     */\r\n    UPPER_CASE_WITH_UNDERSCORES {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return separateCamelCase(f.getName(), '_').toUpperCase(Locale.ENGLISH);\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will modify the Java Field name from its camel cased form to\r\n     * a lower case field name where each word is separated by an underscore (_).\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; some_field_name\r\n     *   <li>_someFieldName ---&gt; _some_field_name\r\n     *   <li>aStringField ---&gt; a_string_field\r\n     *   <li>aURL ---&gt; a_u_r_l\r\n     * </ul>\r\n     */\r\n    LOWER_CASE_WITH_UNDERSCORES {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return separateCamelCase(f.getName(), '_').toLowerCase(Locale.ENGLISH);\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will modify the Java Field name from its camel cased form to\r\n     * a lower case field name where each word is separated by a dash (-).\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; some-field-name\r\n     *   <li>_someFieldName ---&gt; _some-field-name\r\n     *   <li>aStringField ---&gt; a-string-field\r\n     *   <li>aURL ---&gt; a-u-r-l\r\n     * </ul>\r\n     *\r\n     * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in\r\n     * expressions. This requires that a field named with dashes is always accessed as a quoted\r\n     * property like {@code myobject['my-field']}. Accessing it as an object field {@code\r\n     * myobject.my-field} will result in an unintended JavaScript expression.\r\n     *\r\n     * @since 1.4\r\n     */\r\n    LOWER_CASE_WITH_DASHES {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return separateCamelCase(f.getName(), '-').toLowerCase(Locale.ENGLISH);\r\n        }\r\n    }\r\n    ,\r\n    /**\r\n     * Using this naming policy with Gson will modify the Java Field name from its camel cased form to\r\n     * a lower case field name where each word is separated by a dot (.).\r\n     *\r\n     * <p>Here are a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":\r\n     *\r\n     * <ul>\r\n     *   <li>someFieldName ---&gt; some.field.name\r\n     *   <li>_someFieldName ---&gt; _some.field.name\r\n     *   <li>aStringField ---&gt; a.string.field\r\n     *   <li>aURL ---&gt; a.u.r.l\r\n     * </ul>\r\n     *\r\n     * Using dots in JavaScript is not recommended since dot is also used for a member sign in\r\n     * expressions. This requires that a field named with dots is always accessed as a quoted property\r\n     * like {@code myobject['my.field']}. Accessing it as an object field {@code myobject.my.field}\r\n     * will result in an unintended JavaScript expression.\r\n     *\r\n     * @since 2.8.4\r\n     */\r\n    LOWER_CASE_WITH_DOTS {\r\n\r\n        @Override\r\n        public String translateName(Field f) {\r\n            return separateCamelCase(f.getName(), '.').toLowerCase(Locale.ENGLISH);\r\n        }\r\n    }\r\n    ;\r\n\r\n    /**\r\n     * Converts the field name that uses camel-case define word separation into separate words that\r\n     * are separated by the provided {@code separator}.\r\n     */\r\n    static String separateCamelCase(String name, char separator) {\r\n        StringBuilder translation = new StringBuilder();\r\n        for (int i = 0, length = name.length(); i < length; i++) {\r\n            char character = name.charAt(i);\r\n            if (Character.isUpperCase(character) && translation.length() != 0) {\r\n                translation.append(separator);\r\n            }\r\n            translation.append(character);\r\n        }\r\n        return translation.toString();\r\n    }\r\n\r\n    /**\r\n     * Ensures the JSON field names begins with an upper case letter.\r\n     */\r\n    static String upperCaseFirstLetter(String s) {\r\n        int length = s.length();\r\n        for (int i = 0; i < length; i++) {\r\n            char c = s.charAt(i);\r\n            if (Character.isLetter(c)) {\r\n                if (Character.isUpperCase(c)) {\r\n                    return s;\r\n                }\r\n                char uppercased = Character.toUpperCase(c);\r\n                // For leading letter only need one substring\r\n                if (i == 0) {\r\n                    return uppercased + s.substring(1);\r\n                } else {\r\n                    return s.substring(0, i) + uppercased + s.substring(i + 1);\r\n                }\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  },
  {
    "type": "method",
    "name": "separateCamelCase",
    "start_line": 179,
    "end_line": 189,
    "code": "/**\r\n * Converts the field name that uses camel-case define word separation into separate words that\r\n * are separated by the provided {@code separator}.\r\n */\r\nstatic String separateCamelCase(String name, char separator) {\r\n    StringBuilder translation = new StringBuilder();\r\n    for (int i = 0, length = name.length(); i < length; i++) {\r\n        char character = name.charAt(i);\r\n        if (Character.isUpperCase(character) && translation.length() != 0) {\r\n            translation.append(separator);\r\n        }\r\n        translation.append(character);\r\n    }\r\n    return translation.toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  },
  {
    "type": "method",
    "name": "upperCaseFirstLetter",
    "start_line": 192,
    "end_line": 212,
    "code": "/**\r\n * Ensures the JSON field names begins with an upper case letter.\r\n */\r\nstatic String upperCaseFirstLetter(String s) {\r\n    int length = s.length();\r\n    for (int i = 0; i < length; i++) {\r\n        char c = s.charAt(i);\r\n        if (Character.isLetter(c)) {\r\n            if (Character.isUpperCase(c)) {\r\n                return s;\r\n            }\r\n            char uppercased = Character.toUpperCase(c);\r\n            // For leading letter only need one substring\r\n            if (i == 0) {\r\n                return uppercased + s.substring(1);\r\n            } else {\r\n                return s.substring(0, i) + uppercased + s.substring(i + 1);\r\n            }\r\n        }\r\n    }\r\n    return s;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldNamingPolicy.java"
  }
]