[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.NumberLimits",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.internal.NumberLimits;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "class",
    "name": "JsonPrimitive",
    "start_line": 35,
    "end_line": 328,
    "code": "/**\r\n * A class representing a JSON primitive value. A primitive value is either a String, a Java\r\n * primitive, or a Java primitive wrapper type.\r\n *\r\n * <p>See the {@link JsonElement} documentation for details on how to convert {@code JsonPrimitive}\r\n * and generally any {@code JsonElement} from and to JSON.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic final class JsonPrimitive extends JsonElement {\r\n\r\n    private final Object value;\r\n\r\n    /**\r\n     * Create a primitive containing a boolean value.\r\n     *\r\n     * @param bool the value to create the primitive with.\r\n     */\r\n    // \"deprecation\" suppression for superclass constructor\r\n    // \"UnnecessaryBoxedVariable\" Error Prone warning is correct since method does not accept\r\n    // null, but cannot be changed anymore since this is public API\r\n    @SuppressWarnings({ \"deprecation\", \"UnnecessaryBoxedVariable\" })\r\n    public JsonPrimitive(Boolean bool) {\r\n        value = Objects.requireNonNull(bool);\r\n    }\r\n\r\n    /**\r\n     * Create a primitive containing a {@link Number}.\r\n     *\r\n     * @param number the value to create the primitive with.\r\n     */\r\n    // superclass constructor\r\n    @SuppressWarnings(\"deprecation\")\r\n    public JsonPrimitive(Number number) {\r\n        value = Objects.requireNonNull(number);\r\n    }\r\n\r\n    /**\r\n     * Create a primitive containing a String value.\r\n     *\r\n     * @param string the value to create the primitive with.\r\n     */\r\n    // superclass constructor\r\n    @SuppressWarnings(\"deprecation\")\r\n    public JsonPrimitive(String string) {\r\n        value = Objects.requireNonNull(string);\r\n    }\r\n\r\n    /**\r\n     * Create a primitive containing a character. The character is turned into a one character String\r\n     * since JSON only supports String.\r\n     *\r\n     * @param c the value to create the primitive with.\r\n     */\r\n    // \"deprecation\" suppression for superclass constructor\r\n    // \"UnnecessaryBoxedVariable\" Error Prone warning is correct since method does not accept\r\n    // null, but cannot be changed anymore since this is public API\r\n    @SuppressWarnings({ \"deprecation\", \"UnnecessaryBoxedVariable\" })\r\n    public JsonPrimitive(Character c) {\r\n        // convert characters to strings since in JSON, characters are represented as a single\r\n        // character string\r\n        value = Objects.requireNonNull(c).toString();\r\n    }\r\n\r\n    /**\r\n     * Returns the same value as primitives are immutable.\r\n     *\r\n     * @since 2.8.2\r\n     */\r\n    @Override\r\n    public JsonPrimitive deepCopy() {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Check whether this primitive contains a boolean value.\r\n     *\r\n     * @return true if this primitive contains a boolean value, false otherwise.\r\n     */\r\n    public boolean isBoolean() {\r\n        return value instanceof Boolean;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this element as a boolean value. If this primitive {@linkplain\r\n     * #isBoolean() is not a boolean}, the string value is parsed using {@link\r\n     * Boolean#parseBoolean(String)}. This means {@code \"true\"} (ignoring case) is considered {@code\r\n     * true} and any other value is considered {@code false}.\r\n     */\r\n    @Override\r\n    public boolean getAsBoolean() {\r\n        if (isBoolean()) {\r\n            return (Boolean) value;\r\n        }\r\n        // Check to see if the value as a String is \"true\" in any case.\r\n        return Boolean.parseBoolean(getAsString());\r\n    }\r\n\r\n    /**\r\n     * Check whether this primitive contains a Number.\r\n     *\r\n     * @return true if this primitive contains a Number, false otherwise.\r\n     */\r\n    public boolean isNumber() {\r\n        return value instanceof Number;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this element as a {@link Number}. If this primitive {@linkplain\r\n     * #isString() is a string}, a lazily parsed {@code Number} is constructed which parses the string\r\n     * when any of its methods are called (which can lead to a {@link NumberFormatException}).\r\n     *\r\n     * @throws UnsupportedOperationException if this primitive is neither a number nor a string.\r\n     */\r\n    @Override\r\n    public Number getAsNumber() {\r\n        if (value instanceof Number) {\r\n            return (Number) value;\r\n        } else if (value instanceof String) {\r\n            return new LazilyParsedNumber((String) value);\r\n        }\r\n        throw new UnsupportedOperationException(\"Primitive is neither a number nor a string\");\r\n    }\r\n\r\n    /**\r\n     * Check whether this primitive contains a String value.\r\n     *\r\n     * @return true if this primitive contains a String value, false otherwise.\r\n     */\r\n    public boolean isString() {\r\n        return value instanceof String;\r\n    }\r\n\r\n    // Don't add Javadoc, inherit it from super implementation; no exceptions are thrown here\r\n    @Override\r\n    public String getAsString() {\r\n        if (value instanceof String) {\r\n            return (String) value;\r\n        } else if (isNumber()) {\r\n            return getAsNumber().toString();\r\n        } else if (isBoolean()) {\r\n            return ((Boolean) value).toString();\r\n        }\r\n        throw new AssertionError(\"Unexpected value type: \" + value.getClass());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public double getAsDouble() {\r\n        return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public BigDecimal getAsBigDecimal() {\r\n        return value instanceof BigDecimal ? (BigDecimal) value : NumberLimits.parseBigDecimal(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public BigInteger getAsBigInteger() {\r\n        return value instanceof BigInteger ? (BigInteger) value : isIntegral(this) ? BigInteger.valueOf(this.getAsNumber().longValue()) : NumberLimits.parseBigInteger(this.getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public float getAsFloat() {\r\n        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this element as a primitive long.\r\n     *\r\n     * @return this element as a primitive long.\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public long getAsLong() {\r\n        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public short getAsShort() {\r\n        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public int getAsInt() {\r\n        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws NumberFormatException {@inheritDoc}\r\n     */\r\n    @Override\r\n    public byte getAsByte() {\r\n        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\r\n    }\r\n\r\n    /**\r\n     * @throws UnsupportedOperationException if the string value of this primitive is empty.\r\n     * @deprecated This method is misleading, as it does not get this element as a char but rather as\r\n     *     a string's first character.\r\n     */\r\n    @Deprecated\r\n    @Override\r\n    public char getAsCharacter() {\r\n        String s = getAsString();\r\n        if (s.isEmpty()) {\r\n            throw new UnsupportedOperationException(\"String value is empty\");\r\n        } else {\r\n            return s.charAt(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the hash code of this object.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        if (value == null) {\r\n            return 31;\r\n        }\r\n        // Using recommended hashing algorithm from Effective Java for longs and doubles\r\n        if (isIntegral(this)) {\r\n            long value = getAsNumber().longValue();\r\n            return (int) (value ^ (value >>> 32));\r\n        }\r\n        if (value instanceof Number) {\r\n            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\r\n            return (int) (value ^ (value >>> 32));\r\n        }\r\n        return value.hashCode();\r\n    }\r\n\r\n    /**\r\n     * Returns whether the other object is equal to this. This method only considers the other object\r\n     * to be equal if it is an instance of {@code JsonPrimitive} and has an equal value.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) {\r\n            return true;\r\n        }\r\n        if (obj == null || getClass() != obj.getClass()) {\r\n            return false;\r\n        }\r\n        JsonPrimitive other = (JsonPrimitive) obj;\r\n        if (value == null) {\r\n            return other.value == null;\r\n        }\r\n        if (isIntegral(this) && isIntegral(other)) {\r\n            return (this.value instanceof BigInteger || other.value instanceof BigInteger) ? this.getAsBigInteger().equals(other.getAsBigInteger()) : this.getAsNumber().longValue() == other.getAsNumber().longValue();\r\n        }\r\n        if (value instanceof Number && other.value instanceof Number) {\r\n            if (value instanceof BigDecimal && other.value instanceof BigDecimal) {\r\n                // Uses compareTo to ignore scale of values, e.g. `0` and `0.00` should be considered equal\r\n                return this.getAsBigDecimal().compareTo(other.getAsBigDecimal()) == 0;\r\n            }\r\n            double thisAsDouble = this.getAsDouble();\r\n            double otherAsDouble = other.getAsDouble();\r\n            // Don't use Double.compare(double, double) because that considers -0.0 and +0.0 not equal\r\n            return (thisAsDouble == otherAsDouble) || (Double.isNaN(thisAsDouble) && Double.isNaN(otherAsDouble));\r\n        }\r\n        return value.equals(other.value);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified number is an integral type (Long, Integer, Short, Byte,\r\n     * BigInteger)\r\n     */\r\n    private static boolean isIntegral(JsonPrimitive primitive) {\r\n        if (primitive.value instanceof Number) {\r\n            Number number = (Number) primitive.value;\r\n            return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n        }\r\n        return false;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "field",
    "name": "value",
    "start_line": 37,
    "end_line": 37,
    "code": "private final Object value;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "constructor",
    "name": "JsonPrimitive",
    "start_line": 47,
    "end_line": 50,
    "code": "/**\r\n * Create a primitive containing a boolean value.\r\n *\r\n * @param bool the value to create the primitive with.\r\n */\r\n// \"deprecation\" suppression for superclass constructor\r\n// \"UnnecessaryBoxedVariable\" Error Prone warning is correct since method does not accept\r\n// null, but cannot be changed anymore since this is public API\r\n@SuppressWarnings({ \"deprecation\", \"UnnecessaryBoxedVariable\" })\r\npublic JsonPrimitive(Boolean bool) {\r\n    value = Objects.requireNonNull(bool);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "constructor",
    "name": "JsonPrimitive",
    "start_line": 57,
    "end_line": 60,
    "code": "/**\r\n * Create a primitive containing a {@link Number}.\r\n *\r\n * @param number the value to create the primitive with.\r\n */\r\n// superclass constructor\r\n@SuppressWarnings(\"deprecation\")\r\npublic JsonPrimitive(Number number) {\r\n    value = Objects.requireNonNull(number);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "constructor",
    "name": "JsonPrimitive",
    "start_line": 67,
    "end_line": 70,
    "code": "/**\r\n * Create a primitive containing a String value.\r\n *\r\n * @param string the value to create the primitive with.\r\n */\r\n// superclass constructor\r\n@SuppressWarnings(\"deprecation\")\r\npublic JsonPrimitive(String string) {\r\n    value = Objects.requireNonNull(string);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "constructor",
    "name": "JsonPrimitive",
    "start_line": 81,
    "end_line": 86,
    "code": "/**\r\n * Create a primitive containing a character. The character is turned into a one character String\r\n * since JSON only supports String.\r\n *\r\n * @param c the value to create the primitive with.\r\n */\r\n// \"deprecation\" suppression for superclass constructor\r\n// \"UnnecessaryBoxedVariable\" Error Prone warning is correct since method does not accept\r\n// null, but cannot be changed anymore since this is public API\r\n@SuppressWarnings({ \"deprecation\", \"UnnecessaryBoxedVariable\" })\r\npublic JsonPrimitive(Character c) {\r\n    // convert characters to strings since in JSON, characters are represented as a single\r\n    // character string\r\n    value = Objects.requireNonNull(c).toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "deepCopy",
    "start_line": 93,
    "end_line": 96,
    "code": "/**\r\n * Returns the same value as primitives are immutable.\r\n *\r\n * @since 2.8.2\r\n */\r\n@Override\r\npublic JsonPrimitive deepCopy() {\r\n    return this;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "isBoolean",
    "start_line": 103,
    "end_line": 105,
    "code": "/**\r\n * Check whether this primitive contains a boolean value.\r\n *\r\n * @return true if this primitive contains a boolean value, false otherwise.\r\n */\r\npublic boolean isBoolean() {\r\n    return value instanceof Boolean;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsBoolean",
    "start_line": 113,
    "end_line": 120,
    "code": "/**\r\n * Convenience method to get this element as a boolean value. If this primitive {@linkplain\r\n * #isBoolean() is not a boolean}, the string value is parsed using {@link\r\n * Boolean#parseBoolean(String)}. This means {@code \"true\"} (ignoring case) is considered {@code\r\n * true} and any other value is considered {@code false}.\r\n */\r\n@Override\r\npublic boolean getAsBoolean() {\r\n    if (isBoolean()) {\r\n        return (Boolean) value;\r\n    }\r\n    // Check to see if the value as a String is \"true\" in any case.\r\n    return Boolean.parseBoolean(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "isNumber",
    "start_line": 127,
    "end_line": 129,
    "code": "/**\r\n * Check whether this primitive contains a Number.\r\n *\r\n * @return true if this primitive contains a Number, false otherwise.\r\n */\r\npublic boolean isNumber() {\r\n    return value instanceof Number;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsNumber",
    "start_line": 138,
    "end_line": 146,
    "code": "/**\r\n * Convenience method to get this element as a {@link Number}. If this primitive {@linkplain\r\n * #isString() is a string}, a lazily parsed {@code Number} is constructed which parses the string\r\n * when any of its methods are called (which can lead to a {@link NumberFormatException}).\r\n *\r\n * @throws UnsupportedOperationException if this primitive is neither a number nor a string.\r\n */\r\n@Override\r\npublic Number getAsNumber() {\r\n    if (value instanceof Number) {\r\n        return (Number) value;\r\n    } else if (value instanceof String) {\r\n        return new LazilyParsedNumber((String) value);\r\n    }\r\n    throw new UnsupportedOperationException(\"Primitive is neither a number nor a string\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "isString",
    "start_line": 153,
    "end_line": 155,
    "code": "/**\r\n * Check whether this primitive contains a String value.\r\n *\r\n * @return true if this primitive contains a String value, false otherwise.\r\n */\r\npublic boolean isString() {\r\n    return value instanceof String;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsString",
    "start_line": 158,
    "end_line": 168,
    "code": "// Don't add Javadoc, inherit it from super implementation; no exceptions are thrown here\r\n@Override\r\npublic String getAsString() {\r\n    if (value instanceof String) {\r\n        return (String) value;\r\n    } else if (isNumber()) {\r\n        return getAsNumber().toString();\r\n    } else if (isBoolean()) {\r\n        return ((Boolean) value).toString();\r\n    }\r\n    throw new AssertionError(\"Unexpected value type: \" + value.getClass());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsDouble",
    "start_line": 173,
    "end_line": 176,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic double getAsDouble() {\r\n    return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsBigDecimal",
    "start_line": 181,
    "end_line": 186,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic BigDecimal getAsBigDecimal() {\r\n    return value instanceof BigDecimal ? (BigDecimal) value : NumberLimits.parseBigDecimal(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsBigInteger",
    "start_line": 191,
    "end_line": 198,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic BigInteger getAsBigInteger() {\r\n    return value instanceof BigInteger ? (BigInteger) value : isIntegral(this) ? BigInteger.valueOf(this.getAsNumber().longValue()) : NumberLimits.parseBigInteger(this.getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsFloat",
    "start_line": 203,
    "end_line": 206,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic float getAsFloat() {\r\n    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsLong",
    "start_line": 214,
    "end_line": 217,
    "code": "/**\r\n * Convenience method to get this element as a primitive long.\r\n *\r\n * @return this element as a primitive long.\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic long getAsLong() {\r\n    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsShort",
    "start_line": 222,
    "end_line": 225,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic short getAsShort() {\r\n    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsInt",
    "start_line": 230,
    "end_line": 233,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic int getAsInt() {\r\n    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsByte",
    "start_line": 238,
    "end_line": 241,
    "code": "/**\r\n * @throws NumberFormatException {@inheritDoc}\r\n */\r\n@Override\r\npublic byte getAsByte() {\r\n    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "getAsCharacter",
    "start_line": 248,
    "end_line": 257,
    "code": "/**\r\n * @throws UnsupportedOperationException if the string value of this primitive is empty.\r\n * @deprecated This method is misleading, as it does not get this element as a char but rather as\r\n *     a string's first character.\r\n */\r\n@Deprecated\r\n@Override\r\npublic char getAsCharacter() {\r\n    String s = getAsString();\r\n    if (s.isEmpty()) {\r\n        throw new UnsupportedOperationException(\"String value is empty\");\r\n    } else {\r\n        return s.charAt(0);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "hashCode",
    "start_line": 260,
    "end_line": 275,
    "code": "/**\r\n * Returns the hash code of this object.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    if (value == null) {\r\n        return 31;\r\n    }\r\n    // Using recommended hashing algorithm from Effective Java for longs and doubles\r\n    if (isIntegral(this)) {\r\n        long value = getAsNumber().longValue();\r\n        return (int) (value ^ (value >>> 32));\r\n    }\r\n    if (value instanceof Number) {\r\n        long value = Double.doubleToLongBits(getAsNumber().doubleValue());\r\n        return (int) (value ^ (value >>> 32));\r\n    }\r\n    return value.hashCode();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "equals",
    "start_line": 281,
    "end_line": 311,
    "code": "/**\r\n * Returns whether the other object is equal to this. This method only considers the other object\r\n * to be equal if it is an instance of {@code JsonPrimitive} and has an equal value.\r\n */\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null || getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    JsonPrimitive other = (JsonPrimitive) obj;\r\n    if (value == null) {\r\n        return other.value == null;\r\n    }\r\n    if (isIntegral(this) && isIntegral(other)) {\r\n        return (this.value instanceof BigInteger || other.value instanceof BigInteger) ? this.getAsBigInteger().equals(other.getAsBigInteger()) : this.getAsNumber().longValue() == other.getAsNumber().longValue();\r\n    }\r\n    if (value instanceof Number && other.value instanceof Number) {\r\n        if (value instanceof BigDecimal && other.value instanceof BigDecimal) {\r\n            // Uses compareTo to ignore scale of values, e.g. `0` and `0.00` should be considered equal\r\n            return this.getAsBigDecimal().compareTo(other.getAsBigDecimal()) == 0;\r\n        }\r\n        double thisAsDouble = this.getAsDouble();\r\n        double otherAsDouble = other.getAsDouble();\r\n        // Don't use Double.compare(double, double) because that considers -0.0 and +0.0 not equal\r\n        return (thisAsDouble == otherAsDouble) || (Double.isNaN(thisAsDouble) && Double.isNaN(otherAsDouble));\r\n    }\r\n    return value.equals(other.value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  },
  {
    "type": "method",
    "name": "isIntegral",
    "start_line": 317,
    "end_line": 327,
    "code": "/**\r\n * Returns true if the specified number is an integral type (Long, Integer, Short, Byte,\r\n * BigInteger)\r\n */\r\nprivate static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonPrimitive.java"
  }
]