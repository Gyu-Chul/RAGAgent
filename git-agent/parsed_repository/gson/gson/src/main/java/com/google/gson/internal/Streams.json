[
  {
    "type": "package",
    "name": "com.google.gson.internal",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonIOException",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.JsonIOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonNull",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.JsonNull;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.TypeAdapters",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.bind.TypeAdapters;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.MalformedJsonException",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.MalformedJsonException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "java.io.EOFException",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.EOFException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "java.io.Writer",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.io.Writer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "class",
    "name": "Streams",
    "start_line": 35,
    "end_line": 159,
    "code": "/**\r\n * Reads and writes GSON parse trees over streams.\r\n */\r\npublic final class Streams {\r\n\r\n    private Streams() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    /**\r\n     * Takes a reader in any state and returns the next value as a JsonElement.\r\n     */\r\n    public static JsonElement parse(JsonReader reader) throws JsonParseException {\r\n        boolean isEmpty = true;\r\n        try {\r\n            JsonToken unused = reader.peek();\r\n            isEmpty = false;\r\n            return TypeAdapters.JSON_ELEMENT.read(reader);\r\n        } catch (EOFException e) {\r\n            /*\r\n       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\r\n       * empty documents instead of throwing.\r\n       */\r\n            if (isEmpty) {\r\n                return JsonNull.INSTANCE;\r\n            }\r\n            // The stream ended prematurely so it is likely a syntax error.\r\n            throw new JsonSyntaxException(e);\r\n        } catch (MalformedJsonException e) {\r\n            throw new JsonSyntaxException(e);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        } catch (NumberFormatException e) {\r\n            throw new JsonSyntaxException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the JSON element to the writer, recursively.\r\n     */\r\n    public static void write(JsonElement element, JsonWriter writer) throws IOException {\r\n        TypeAdapters.JSON_ELEMENT.write(writer, element);\r\n    }\r\n\r\n    public static Writer writerForAppendable(Appendable appendable) {\r\n        return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);\r\n    }\r\n\r\n    /**\r\n     * Adapts an {@link Appendable} so it can be passed anywhere a {@link Writer} is used.\r\n     */\r\n    private static final class AppendableWriter extends Writer {\r\n\r\n        private final Appendable appendable;\r\n\r\n        private final CurrentWrite currentWrite = new CurrentWrite();\r\n\r\n        AppendableWriter(Appendable appendable) {\r\n            this.appendable = appendable;\r\n        }\r\n\r\n        // this is intentionally ungrouped, see comment below\r\n        @SuppressWarnings(\"UngroupedOverloads\")\r\n        @Override\r\n        public void write(char[] chars, int offset, int length) throws IOException {\r\n            currentWrite.setChars(chars);\r\n            appendable.append(currentWrite, offset, offset + length);\r\n        }\r\n\r\n        @Override\r\n        public void flush() {\r\n        }\r\n\r\n        @Override\r\n        public void close() {\r\n        }\r\n\r\n        // Override these methods for better performance\r\n        // They would otherwise unnecessarily create Strings or char arrays\r\n        @Override\r\n        public void write(int i) throws IOException {\r\n            appendable.append((char) i);\r\n        }\r\n\r\n        @Override\r\n        public void write(String str, int off, int len) throws IOException {\r\n            // Appendable.append turns null -> \"null\", which is not desired here\r\n            Objects.requireNonNull(str);\r\n            appendable.append(str, off, off + len);\r\n        }\r\n\r\n        @Override\r\n        public Writer append(CharSequence csq) throws IOException {\r\n            appendable.append(csq);\r\n            return this;\r\n        }\r\n\r\n        @Override\r\n        public Writer append(CharSequence csq, int start, int end) throws IOException {\r\n            appendable.append(csq, start, end);\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * A mutable char sequence pointing at a single char[].\r\n         */\r\n        private static class CurrentWrite implements CharSequence {\r\n\r\n            private char[] chars;\r\n\r\n            private String cachedString;\r\n\r\n            void setChars(char[] chars) {\r\n                this.chars = chars;\r\n                this.cachedString = null;\r\n            }\r\n\r\n            @Override\r\n            public int length() {\r\n                return chars.length;\r\n            }\r\n\r\n            @Override\r\n            public char charAt(int i) {\r\n                return chars[i];\r\n            }\r\n\r\n            @Override\r\n            public CharSequence subSequence(int start, int end) {\r\n                return new String(chars, start, end - start);\r\n            }\r\n\r\n            // Must return string representation to satisfy toString() contract\r\n            @Override\r\n            public String toString() {\r\n                if (cachedString == null) {\r\n                    cachedString = new String(chars);\r\n                }\r\n                return cachedString;\r\n            }\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "constructor",
    "name": "Streams",
    "start_line": 36,
    "end_line": 38,
    "code": "private Streams() {\r\n    throw new UnsupportedOperationException();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "method",
    "name": "parse",
    "start_line": 41,
    "end_line": 64,
    "code": "/**\r\n * Takes a reader in any state and returns the next value as a JsonElement.\r\n */\r\npublic static JsonElement parse(JsonReader reader) throws JsonParseException {\r\n    boolean isEmpty = true;\r\n    try {\r\n        JsonToken unused = reader.peek();\r\n        isEmpty = false;\r\n        return TypeAdapters.JSON_ELEMENT.read(reader);\r\n    } catch (EOFException e) {\r\n        /*\r\n       * For compatibility with JSON 1.5 and earlier, we return a JsonNull for\r\n       * empty documents instead of throwing.\r\n       */\r\n        if (isEmpty) {\r\n            return JsonNull.INSTANCE;\r\n        }\r\n        // The stream ended prematurely so it is likely a syntax error.\r\n        throw new JsonSyntaxException(e);\r\n    } catch (MalformedJsonException e) {\r\n        throw new JsonSyntaxException(e);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    } catch (NumberFormatException e) {\r\n        throw new JsonSyntaxException(e);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "method",
    "name": "write",
    "start_line": 67,
    "end_line": 69,
    "code": "/**\r\n * Writes the JSON element to the writer, recursively.\r\n */\r\npublic static void write(JsonElement element, JsonWriter writer) throws IOException {\r\n    TypeAdapters.JSON_ELEMENT.write(writer, element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  },
  {
    "type": "method",
    "name": "writerForAppendable",
    "start_line": 71,
    "end_line": 73,
    "code": "public static Writer writerForAppendable(Appendable appendable) {\r\n    return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\Streams.java"
  }
]