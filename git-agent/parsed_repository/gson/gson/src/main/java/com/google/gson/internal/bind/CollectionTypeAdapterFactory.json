[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.ConstructorConstructor",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.internal.ConstructorConstructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.GsonTypes",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.internal.GsonTypes;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.ObjectConstructor",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.ObjectConstructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "class",
    "name": "CollectionTypeAdapterFactory",
    "start_line": 34,
    "end_line": 105,
    "code": "/**\r\n * Adapt a homogeneous collection of objects.\r\n */\r\npublic final class CollectionTypeAdapterFactory implements TypeAdapterFactory {\r\n\r\n    private final ConstructorConstructor constructorConstructor;\r\n\r\n    public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\r\n        this.constructorConstructor = constructorConstructor;\r\n    }\r\n\r\n    @Override\r\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\r\n        Type type = typeToken.getType();\r\n        Class<? super T> rawType = typeToken.getRawType();\r\n        if (!Collection.class.isAssignableFrom(rawType)) {\r\n            return null;\r\n        }\r\n        Type elementType = GsonTypes.getCollectionElementType(type, rawType);\r\n        TypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));\r\n        TypeAdapter<?> wrappedTypeAdapter = new TypeAdapterRuntimeTypeWrapper<>(gson, elementTypeAdapter, elementType);\r\n        // Don't allow Unsafe usage to create instance; instances might be in broken state and calling\r\n        // Collection methods could lead to confusing exceptions\r\n        boolean allowUnsafe = false;\r\n        ObjectConstructor<T> constructor = constructorConstructor.get(typeToken, allowUnsafe);\r\n        // create() doesn't define a type parameter\r\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n        TypeAdapter<T> result = new Adapter(wrappedTypeAdapter, constructor);\r\n        return result;\r\n    }\r\n\r\n    private static final class Adapter<E> extends TypeAdapter<Collection<E>> {\r\n\r\n        private final TypeAdapter<E> elementTypeAdapter;\r\n\r\n        private final ObjectConstructor<? extends Collection<E>> constructor;\r\n\r\n        public Adapter(TypeAdapter<E> elementTypeAdapter, ObjectConstructor<? extends Collection<E>> constructor) {\r\n            this.elementTypeAdapter = elementTypeAdapter;\r\n            this.constructor = constructor;\r\n        }\r\n\r\n        @Override\r\n        public Collection<E> read(JsonReader in) throws IOException {\r\n            if (in.peek() == JsonToken.NULL) {\r\n                in.nextNull();\r\n                return null;\r\n            }\r\n            Collection<E> collection = constructor.construct();\r\n            in.beginArray();\r\n            while (in.hasNext()) {\r\n                E instance = elementTypeAdapter.read(in);\r\n                collection.add(instance);\r\n            }\r\n            in.endArray();\r\n            return collection;\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Collection<E> collection) throws IOException {\r\n            if (collection == null) {\r\n                out.nullValue();\r\n                return;\r\n            }\r\n            out.beginArray();\r\n            for (E element : collection) {\r\n                elementTypeAdapter.write(out, element);\r\n            }\r\n            out.endArray();\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "field",
    "name": "constructorConstructor",
    "start_line": 35,
    "end_line": 35,
    "code": "private final ConstructorConstructor constructorConstructor;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "constructor",
    "name": "CollectionTypeAdapterFactory",
    "start_line": 37,
    "end_line": 39,
    "code": "public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\r\n    this.constructorConstructor = constructorConstructor;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  },
  {
    "type": "method",
    "name": "create",
    "start_line": 41,
    "end_line": 62,
    "code": "@Override\r\npublic <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\r\n    Type type = typeToken.getType();\r\n    Class<? super T> rawType = typeToken.getRawType();\r\n    if (!Collection.class.isAssignableFrom(rawType)) {\r\n        return null;\r\n    }\r\n    Type elementType = GsonTypes.getCollectionElementType(type, rawType);\r\n    TypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));\r\n    TypeAdapter<?> wrappedTypeAdapter = new TypeAdapterRuntimeTypeWrapper<>(gson, elementTypeAdapter, elementType);\r\n    // Don't allow Unsafe usage to create instance; instances might be in broken state and calling\r\n    // Collection methods could lead to confusing exceptions\r\n    boolean allowUnsafe = false;\r\n    ObjectConstructor<T> constructor = constructorConstructor.get(typeToken, allowUnsafe);\r\n    // create() doesn't define a type parameter\r\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n    TypeAdapter<T> result = new Adapter(wrappedTypeAdapter, constructor);\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\CollectionTypeAdapterFactory.java"
  }
]