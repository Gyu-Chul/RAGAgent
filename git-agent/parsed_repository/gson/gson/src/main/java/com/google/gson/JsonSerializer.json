[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonSerializer.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 19,
    "end_line": 19,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonSerializer.java"
  },
  {
    "type": "interface",
    "name": "JsonSerializer",
    "start_line": 74,
    "end_line": 91,
    "code": "/**\r\n * Interface representing a custom serializer for JSON. You should write a custom serializer, if you\r\n * are not happy with the default serialization done by Gson. You will also need to register this\r\n * serializer through {@link com.google.gson.GsonBuilder#registerTypeAdapter(Type, Object)}.\r\n *\r\n * <p>Let us look at example where defining a serializer will be useful. The {@code Id} class\r\n * defined below has two fields: {@code clazz} and {@code value}.\r\n *\r\n * <pre>\r\n * public class Id&lt;T&gt; {\r\n *   private final Class&lt;T&gt; clazz;\r\n *   private final long value;\r\n *\r\n *   public Id(Class&lt;T&gt; clazz, long value) {\r\n *     this.clazz = clazz;\r\n *     this.value = value;\r\n *   }\r\n *\r\n *   public long getValue() {\r\n *     return value;\r\n *   }\r\n * }\r\n * </pre>\r\n *\r\n * <p>The default serialization of {@code Id(com.foo.MyObject.class, 20L)} will be <code>\r\n * {\"clazz\":\"com.foo.MyObject\",\"value\":20}</code>. Suppose, you just want the output to be the value\r\n * instead, which is {@code 20} in this case. You can achieve that by writing a custom serializer:\r\n *\r\n * <pre>\r\n * class IdSerializer implements JsonSerializer&lt;Id&gt; {\r\n *   public JsonElement serialize(Id id, Type typeOfId, JsonSerializationContext context) {\r\n *     return new JsonPrimitive(id.getValue());\r\n *   }\r\n * }\r\n * </pre>\r\n *\r\n * <p>You will also need to register {@code IdSerializer} with Gson as follows:\r\n *\r\n * <pre>\r\n * Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdSerializer()).create();\r\n * </pre>\r\n *\r\n * <p>Serializers should be stateless and thread-safe, otherwise the thread-safety guarantees of\r\n * {@link Gson} might not apply.\r\n *\r\n * <p>New applications should prefer {@link TypeAdapter}, whose streaming API is more efficient than\r\n * this interface's tree API.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n * @param <T> type for which the serializer is being registered. It is possible that a serializer\r\n *     may be asked to serialize a specific generic type of the T.\r\n */\r\npublic interface JsonSerializer<T> {\r\n\r\n    /**\r\n     * Gson invokes this call-back method during serialization when it encounters a field of the\r\n     * specified type.\r\n     *\r\n     * <p>In the implementation of this call-back method, you should consider invoking {@link\r\n     * JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any\r\n     * non-trivial field of the {@code src} object. However, you should never invoke it on the {@code\r\n     * src} object itself since that will cause an infinite loop (Gson will call your call-back method\r\n     * again).\r\n     *\r\n     * @param src the object that needs to be converted to Json.\r\n     * @param typeOfSrc the actual type (fully genericized version) of the source object.\r\n     * @return a JsonElement corresponding to the specified object.\r\n     */\r\n    public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonSerializer.java"
  },
  {
    "type": "method",
    "name": "serialize",
    "start_line": 90,
    "end_line": 90,
    "code": "/**\r\n * Gson invokes this call-back method during serialization when it encounters a field of the\r\n * specified type.\r\n *\r\n * <p>In the implementation of this call-back method, you should consider invoking {@link\r\n * JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any\r\n * non-trivial field of the {@code src} object. However, you should never invoke it on the {@code\r\n * src} object itself since that will cause an infinite loop (Gson will call your call-back method\r\n * again).\r\n *\r\n * @param src the object that needs to be converted to Json.\r\n * @param typeOfSrc the actual type (fully genericized version) of the source object.\r\n * @return a JsonElement corresponding to the specified object.\r\n */\r\npublic JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context);",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonSerializer.java"
  }
]