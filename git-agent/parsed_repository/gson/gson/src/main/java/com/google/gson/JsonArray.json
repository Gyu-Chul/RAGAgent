[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.CanIgnoreReturnValue",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.NonNullElementWrapperList",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.internal.NonNullElementWrapperList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "java.util.Iterator",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.util.Iterator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "class",
    "name": "JsonArray",
    "start_line": 42,
    "end_line": 436,
    "code": "/**\r\n * A class representing an array type in JSON. An array is a list of {@link JsonElement}s each of\r\n * which can be of a different type. This is an ordered list, meaning that the order in which\r\n * elements are added is preserved. This class does not support {@code null} values. If {@code null}\r\n * is provided as element argument to any of the methods, it is converted to a {@link JsonNull}.\r\n *\r\n * <p>{@code JsonArray} only implements the {@link Iterable} interface but not the {@link List}\r\n * interface. A {@code List} view of it can be obtained with {@link #asList()}.\r\n *\r\n * <p>See the {@link JsonElement} documentation for details on how to convert {@code JsonArray} and\r\n * generally any {@code JsonElement} from and to JSON.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic final class JsonArray extends JsonElement implements Iterable<JsonElement> {\r\n\r\n    private final ArrayList<JsonElement> elements;\r\n\r\n    /**\r\n     * Creates an empty JsonArray.\r\n     */\r\n    // superclass constructor\r\n    @SuppressWarnings(\"deprecation\")\r\n    public JsonArray() {\r\n        elements = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Creates an empty JsonArray with the desired initial capacity.\r\n     *\r\n     * @param capacity initial capacity.\r\n     * @throws IllegalArgumentException if the {@code capacity} is negative\r\n     * @since 2.8.1\r\n     */\r\n    // superclass constructor\r\n    @SuppressWarnings(\"deprecation\")\r\n    public JsonArray(int capacity) {\r\n        elements = new ArrayList<>(capacity);\r\n    }\r\n\r\n    /**\r\n     * Creates a deep copy of this element and all its children.\r\n     *\r\n     * @since 2.8.2\r\n     */\r\n    @Override\r\n    public JsonArray deepCopy() {\r\n        if (!elements.isEmpty()) {\r\n            JsonArray result = new JsonArray(elements.size());\r\n            for (JsonElement element : elements) {\r\n                result.add(element.deepCopy());\r\n            }\r\n            return result;\r\n        }\r\n        return new JsonArray();\r\n    }\r\n\r\n    /**\r\n     * Adds the specified boolean to self.\r\n     *\r\n     * @param bool the boolean that needs to be added to the array.\r\n     * @since 2.4\r\n     */\r\n    public void add(Boolean bool) {\r\n        elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));\r\n    }\r\n\r\n    /**\r\n     * Adds the specified character to self.\r\n     *\r\n     * @param character the character that needs to be added to the array.\r\n     * @since 2.4\r\n     */\r\n    public void add(Character character) {\r\n        elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\r\n    }\r\n\r\n    /**\r\n     * Adds the specified number to self.\r\n     *\r\n     * @param number the number that needs to be added to the array.\r\n     * @since 2.4\r\n     */\r\n    public void add(Number number) {\r\n        elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));\r\n    }\r\n\r\n    /**\r\n     * Adds the specified string to self.\r\n     *\r\n     * @param string the string that needs to be added to the array.\r\n     * @since 2.4\r\n     */\r\n    public void add(String string) {\r\n        elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\r\n    }\r\n\r\n    /**\r\n     * Adds the specified element to self.\r\n     *\r\n     * @param element the element that needs to be added to the array.\r\n     */\r\n    public void add(JsonElement element) {\r\n        if (element == null) {\r\n            element = JsonNull.INSTANCE;\r\n        }\r\n        elements.add(element);\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements of the specified array to self.\r\n     *\r\n     * @param array the array whose elements need to be added to the array.\r\n     */\r\n    public void addAll(JsonArray array) {\r\n        elements.addAll(array.elements);\r\n    }\r\n\r\n    /**\r\n     * Replaces the element at the specified position in this array with the specified element.\r\n     *\r\n     * @param index index of the element to replace\r\n     * @param element element to be stored at the specified position\r\n     * @return the element previously at the specified position\r\n     * @throws IndexOutOfBoundsException if the specified index is outside the array bounds\r\n     */\r\n    @CanIgnoreReturnValue\r\n    public JsonElement set(int index, JsonElement element) {\r\n        return elements.set(index, element == null ? JsonNull.INSTANCE : element);\r\n    }\r\n\r\n    /**\r\n     * Removes the first occurrence of the specified element from this array, if it is present. If the\r\n     * array does not contain the element, it is unchanged.\r\n     *\r\n     * @param element element to be removed from this array, if present\r\n     * @return true if this array contained the specified element, false otherwise\r\n     * @since 2.3\r\n     */\r\n    @CanIgnoreReturnValue\r\n    public boolean remove(JsonElement element) {\r\n        return elements.remove(element);\r\n    }\r\n\r\n    /**\r\n     * Removes the element at the specified position in this array. Shifts any subsequent elements to\r\n     * the left (subtracts one from their indices). Returns the element that was removed from the\r\n     * array.\r\n     *\r\n     * @param index index the index of the element to be removed\r\n     * @return the element previously at the specified position\r\n     * @throws IndexOutOfBoundsException if the specified index is outside the array bounds\r\n     * @since 2.3\r\n     */\r\n    @CanIgnoreReturnValue\r\n    public JsonElement remove(int index) {\r\n        return elements.remove(index);\r\n    }\r\n\r\n    /**\r\n     * Returns true if this array contains the specified element.\r\n     *\r\n     * @return true if this array contains the specified element.\r\n     * @param element whose presence in this array is to be tested\r\n     * @since 2.3\r\n     */\r\n    public boolean contains(JsonElement element) {\r\n        return elements.contains(element);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of elements in the array.\r\n     *\r\n     * @return the number of elements in the array.\r\n     */\r\n    public int size() {\r\n        return elements.size();\r\n    }\r\n\r\n    /**\r\n     * Returns true if the array is empty.\r\n     *\r\n     * @return true if the array is empty.\r\n     * @since 2.8.7\r\n     */\r\n    public boolean isEmpty() {\r\n        return elements.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,\r\n     * the iterator navigates the elements in the order they were inserted.\r\n     *\r\n     * @return an iterator to navigate the elements of the array.\r\n     */\r\n    @Override\r\n    public Iterator<JsonElement> iterator() {\r\n        return elements.iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th element of the array.\r\n     *\r\n     * @param i the index of the element that is being sought.\r\n     * @return the element present at the i-th index.\r\n     * @throws IndexOutOfBoundsException if {@code i} is negative or greater than or equal to the\r\n     *     {@link #size()} of the array.\r\n     */\r\n    public JsonElement get(int i) {\r\n        return elements.get(i);\r\n    }\r\n\r\n    private JsonElement getAsSingleElement() {\r\n        int size = elements.size();\r\n        if (size == 1) {\r\n            return elements.get(0);\r\n        }\r\n        throw new IllegalStateException(\"Array must have size 1, but has size \" + size);\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a {@link Number} if it contains a single element. This\r\n     * method calls {@link JsonElement#getAsNumber()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a number if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public Number getAsNumber() {\r\n        return getAsSingleElement().getAsNumber();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a {@link String} if it contains a single element. This\r\n     * method calls {@link JsonElement#getAsString()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a String if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public String getAsString() {\r\n        return getAsSingleElement().getAsString();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a double if it contains a single element. This method\r\n     * calls {@link JsonElement#getAsDouble()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a double if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public double getAsDouble() {\r\n        return getAsSingleElement().getAsDouble();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a {@link BigDecimal} if it contains a single element.\r\n     * This method calls {@link JsonElement#getAsBigDecimal()} on the element, therefore any of the\r\n     * exceptions declared by that method can occur.\r\n     *\r\n     * @return this element as a {@link BigDecimal} if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     * @since 1.2\r\n     */\r\n    @Override\r\n    public BigDecimal getAsBigDecimal() {\r\n        return getAsSingleElement().getAsBigDecimal();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a {@link BigInteger} if it contains a single element.\r\n     * This method calls {@link JsonElement#getAsBigInteger()} on the element, therefore any of the\r\n     * exceptions declared by that method can occur.\r\n     *\r\n     * @return this element as a {@link BigInteger} if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     * @since 1.2\r\n     */\r\n    @Override\r\n    public BigInteger getAsBigInteger() {\r\n        return getAsSingleElement().getAsBigInteger();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a float if it contains a single element. This method\r\n     * calls {@link JsonElement#getAsFloat()} on the element, therefore any of the exceptions declared\r\n     * by that method can occur.\r\n     *\r\n     * @return this element as a float if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public float getAsFloat() {\r\n        return getAsSingleElement().getAsFloat();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a long if it contains a single element. This method\r\n     * calls {@link JsonElement#getAsLong()} on the element, therefore any of the exceptions declared\r\n     * by that method can occur.\r\n     *\r\n     * @return this element as a long if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public long getAsLong() {\r\n        return getAsSingleElement().getAsLong();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as an integer if it contains a single element. This method\r\n     * calls {@link JsonElement#getAsInt()} on the element, therefore any of the exceptions declared\r\n     * by that method can occur.\r\n     *\r\n     * @return this element as an integer if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public int getAsInt() {\r\n        return getAsSingleElement().getAsInt();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a primitive byte if it contains a single element. This\r\n     * method calls {@link JsonElement#getAsByte()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a primitive byte if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public byte getAsByte() {\r\n        return getAsSingleElement().getAsByte();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a character if it contains a single element. This\r\n     * method calls {@link JsonElement#getAsCharacter()} on the element, therefore any of the\r\n     * exceptions declared by that method can occur.\r\n     *\r\n     * @return this element as a primitive short if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     * @deprecated This method is misleading, as it does not get this element as a char but rather as\r\n     *     a string's first character.\r\n     */\r\n    @Deprecated\r\n    @Override\r\n    public char getAsCharacter() {\r\n        return getAsSingleElement().getAsCharacter();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a primitive short if it contains a single element. This\r\n     * method calls {@link JsonElement#getAsShort()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a primitive short if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public short getAsShort() {\r\n        return getAsSingleElement().getAsShort();\r\n    }\r\n\r\n    /**\r\n     * Convenience method to get this array as a boolean if it contains a single element. This method\r\n     * calls {@link JsonElement#getAsBoolean()} on the element, therefore any of the exceptions\r\n     * declared by that method can occur.\r\n     *\r\n     * @return this element as a boolean if it is single element array.\r\n     * @throws IllegalStateException if the array is empty or has more than one element.\r\n     */\r\n    @Override\r\n    public boolean getAsBoolean() {\r\n        return getAsSingleElement().getAsBoolean();\r\n    }\r\n\r\n    /**\r\n     * Returns a mutable {@link List} view of this {@code JsonArray}. Changes to the {@code List} are\r\n     * visible in this {@code JsonArray} and the other way around.\r\n     *\r\n     * <p>The {@code List} does not permit {@code null} elements. Unlike {@code JsonArray}'s {@code\r\n     * null} handling, a {@link NullPointerException} is thrown when trying to add {@code null}. Use\r\n     * {@link JsonNull} for JSON null values.\r\n     *\r\n     * @return mutable {@code List} view\r\n     * @since 2.10\r\n     */\r\n    public List<JsonElement> asList() {\r\n        return new NonNullElementWrapperList<>(elements);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the other object is equal to this. This method only considers the other object\r\n     * to be equal if it is an instance of {@code JsonArray} and has equal elements in the same order.\r\n     */\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));\r\n    }\r\n\r\n    /**\r\n     * Returns the hash code of this array. This method calculates the hash code based on the elements\r\n     * of this array.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        return elements.hashCode();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "field",
    "name": "elements",
    "start_line": 43,
    "end_line": 43,
    "code": "private final ArrayList<JsonElement> elements;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "constructor",
    "name": "JsonArray",
    "start_line": 46,
    "end_line": 49,
    "code": "/**\r\n * Creates an empty JsonArray.\r\n */\r\n// superclass constructor\r\n@SuppressWarnings(\"deprecation\")\r\npublic JsonArray() {\r\n    elements = new ArrayList<>();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "constructor",
    "name": "JsonArray",
    "start_line": 58,
    "end_line": 61,
    "code": "/**\r\n * Creates an empty JsonArray with the desired initial capacity.\r\n *\r\n * @param capacity initial capacity.\r\n * @throws IllegalArgumentException if the {@code capacity} is negative\r\n * @since 2.8.1\r\n */\r\n// superclass constructor\r\n@SuppressWarnings(\"deprecation\")\r\npublic JsonArray(int capacity) {\r\n    elements = new ArrayList<>(capacity);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "deepCopy",
    "start_line": 68,
    "end_line": 78,
    "code": "/**\r\n * Creates a deep copy of this element and all its children.\r\n *\r\n * @since 2.8.2\r\n */\r\n@Override\r\npublic JsonArray deepCopy() {\r\n    if (!elements.isEmpty()) {\r\n        JsonArray result = new JsonArray(elements.size());\r\n        for (JsonElement element : elements) {\r\n            result.add(element.deepCopy());\r\n        }\r\n        return result;\r\n    }\r\n    return new JsonArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "add",
    "start_line": 86,
    "end_line": 88,
    "code": "/**\r\n * Adds the specified boolean to self.\r\n *\r\n * @param bool the boolean that needs to be added to the array.\r\n * @since 2.4\r\n */\r\npublic void add(Boolean bool) {\r\n    elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "add",
    "start_line": 96,
    "end_line": 98,
    "code": "/**\r\n * Adds the specified character to self.\r\n *\r\n * @param character the character that needs to be added to the array.\r\n * @since 2.4\r\n */\r\npublic void add(Character character) {\r\n    elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "add",
    "start_line": 106,
    "end_line": 108,
    "code": "/**\r\n * Adds the specified number to self.\r\n *\r\n * @param number the number that needs to be added to the array.\r\n * @since 2.4\r\n */\r\npublic void add(Number number) {\r\n    elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "add",
    "start_line": 116,
    "end_line": 118,
    "code": "/**\r\n * Adds the specified string to self.\r\n *\r\n * @param string the string that needs to be added to the array.\r\n * @since 2.4\r\n */\r\npublic void add(String string) {\r\n    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "add",
    "start_line": 125,
    "end_line": 130,
    "code": "/**\r\n * Adds the specified element to self.\r\n *\r\n * @param element the element that needs to be added to the array.\r\n */\r\npublic void add(JsonElement element) {\r\n    if (element == null) {\r\n        element = JsonNull.INSTANCE;\r\n    }\r\n    elements.add(element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "addAll",
    "start_line": 137,
    "end_line": 139,
    "code": "/**\r\n * Adds all the elements of the specified array to self.\r\n *\r\n * @param array the array whose elements need to be added to the array.\r\n */\r\npublic void addAll(JsonArray array) {\r\n    elements.addAll(array.elements);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "set",
    "start_line": 149,
    "end_line": 152,
    "code": "/**\r\n * Replaces the element at the specified position in this array with the specified element.\r\n *\r\n * @param index index of the element to replace\r\n * @param element element to be stored at the specified position\r\n * @return the element previously at the specified position\r\n * @throws IndexOutOfBoundsException if the specified index is outside the array bounds\r\n */\r\n@CanIgnoreReturnValue\r\npublic JsonElement set(int index, JsonElement element) {\r\n    return elements.set(index, element == null ? JsonNull.INSTANCE : element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "remove",
    "start_line": 162,
    "end_line": 165,
    "code": "/**\r\n * Removes the first occurrence of the specified element from this array, if it is present. If the\r\n * array does not contain the element, it is unchanged.\r\n *\r\n * @param element element to be removed from this array, if present\r\n * @return true if this array contained the specified element, false otherwise\r\n * @since 2.3\r\n */\r\n@CanIgnoreReturnValue\r\npublic boolean remove(JsonElement element) {\r\n    return elements.remove(element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "remove",
    "start_line": 177,
    "end_line": 180,
    "code": "/**\r\n * Removes the element at the specified position in this array. Shifts any subsequent elements to\r\n * the left (subtracts one from their indices). Returns the element that was removed from the\r\n * array.\r\n *\r\n * @param index index the index of the element to be removed\r\n * @return the element previously at the specified position\r\n * @throws IndexOutOfBoundsException if the specified index is outside the array bounds\r\n * @since 2.3\r\n */\r\n@CanIgnoreReturnValue\r\npublic JsonElement remove(int index) {\r\n    return elements.remove(index);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "contains",
    "start_line": 189,
    "end_line": 191,
    "code": "/**\r\n * Returns true if this array contains the specified element.\r\n *\r\n * @return true if this array contains the specified element.\r\n * @param element whose presence in this array is to be tested\r\n * @since 2.3\r\n */\r\npublic boolean contains(JsonElement element) {\r\n    return elements.contains(element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "size",
    "start_line": 198,
    "end_line": 200,
    "code": "/**\r\n * Returns the number of elements in the array.\r\n *\r\n * @return the number of elements in the array.\r\n */\r\npublic int size() {\r\n    return elements.size();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "isEmpty",
    "start_line": 208,
    "end_line": 210,
    "code": "/**\r\n * Returns true if the array is empty.\r\n *\r\n * @return true if the array is empty.\r\n * @since 2.8.7\r\n */\r\npublic boolean isEmpty() {\r\n    return elements.isEmpty();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "iterator",
    "start_line": 218,
    "end_line": 221,
    "code": "/**\r\n * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,\r\n * the iterator navigates the elements in the order they were inserted.\r\n *\r\n * @return an iterator to navigate the elements of the array.\r\n */\r\n@Override\r\npublic Iterator<JsonElement> iterator() {\r\n    return elements.iterator();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "get",
    "start_line": 231,
    "end_line": 233,
    "code": "/**\r\n * Returns the i-th element of the array.\r\n *\r\n * @param i the index of the element that is being sought.\r\n * @return the element present at the i-th index.\r\n * @throws IndexOutOfBoundsException if {@code i} is negative or greater than or equal to the\r\n *     {@link #size()} of the array.\r\n */\r\npublic JsonElement get(int i) {\r\n    return elements.get(i);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsSingleElement",
    "start_line": 235,
    "end_line": 241,
    "code": "private JsonElement getAsSingleElement() {\r\n    int size = elements.size();\r\n    if (size == 1) {\r\n        return elements.get(0);\r\n    }\r\n    throw new IllegalStateException(\"Array must have size 1, but has size \" + size);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsNumber",
    "start_line": 251,
    "end_line": 254,
    "code": "/**\r\n * Convenience method to get this array as a {@link Number} if it contains a single element. This\r\n * method calls {@link JsonElement#getAsNumber()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a number if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic Number getAsNumber() {\r\n    return getAsSingleElement().getAsNumber();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsString",
    "start_line": 264,
    "end_line": 267,
    "code": "/**\r\n * Convenience method to get this array as a {@link String} if it contains a single element. This\r\n * method calls {@link JsonElement#getAsString()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a String if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic String getAsString() {\r\n    return getAsSingleElement().getAsString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsDouble",
    "start_line": 277,
    "end_line": 280,
    "code": "/**\r\n * Convenience method to get this array as a double if it contains a single element. This method\r\n * calls {@link JsonElement#getAsDouble()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a double if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic double getAsDouble() {\r\n    return getAsSingleElement().getAsDouble();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsBigDecimal",
    "start_line": 291,
    "end_line": 294,
    "code": "/**\r\n * Convenience method to get this array as a {@link BigDecimal} if it contains a single element.\r\n * This method calls {@link JsonElement#getAsBigDecimal()} on the element, therefore any of the\r\n * exceptions declared by that method can occur.\r\n *\r\n * @return this element as a {@link BigDecimal} if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n * @since 1.2\r\n */\r\n@Override\r\npublic BigDecimal getAsBigDecimal() {\r\n    return getAsSingleElement().getAsBigDecimal();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsBigInteger",
    "start_line": 305,
    "end_line": 308,
    "code": "/**\r\n * Convenience method to get this array as a {@link BigInteger} if it contains a single element.\r\n * This method calls {@link JsonElement#getAsBigInteger()} on the element, therefore any of the\r\n * exceptions declared by that method can occur.\r\n *\r\n * @return this element as a {@link BigInteger} if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n * @since 1.2\r\n */\r\n@Override\r\npublic BigInteger getAsBigInteger() {\r\n    return getAsSingleElement().getAsBigInteger();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsFloat",
    "start_line": 318,
    "end_line": 321,
    "code": "/**\r\n * Convenience method to get this array as a float if it contains a single element. This method\r\n * calls {@link JsonElement#getAsFloat()} on the element, therefore any of the exceptions declared\r\n * by that method can occur.\r\n *\r\n * @return this element as a float if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic float getAsFloat() {\r\n    return getAsSingleElement().getAsFloat();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsLong",
    "start_line": 331,
    "end_line": 334,
    "code": "/**\r\n * Convenience method to get this array as a long if it contains a single element. This method\r\n * calls {@link JsonElement#getAsLong()} on the element, therefore any of the exceptions declared\r\n * by that method can occur.\r\n *\r\n * @return this element as a long if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic long getAsLong() {\r\n    return getAsSingleElement().getAsLong();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsInt",
    "start_line": 344,
    "end_line": 347,
    "code": "/**\r\n * Convenience method to get this array as an integer if it contains a single element. This method\r\n * calls {@link JsonElement#getAsInt()} on the element, therefore any of the exceptions declared\r\n * by that method can occur.\r\n *\r\n * @return this element as an integer if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic int getAsInt() {\r\n    return getAsSingleElement().getAsInt();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsByte",
    "start_line": 357,
    "end_line": 360,
    "code": "/**\r\n * Convenience method to get this array as a primitive byte if it contains a single element. This\r\n * method calls {@link JsonElement#getAsByte()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a primitive byte if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic byte getAsByte() {\r\n    return getAsSingleElement().getAsByte();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsCharacter",
    "start_line": 372,
    "end_line": 376,
    "code": "/**\r\n * Convenience method to get this array as a character if it contains a single element. This\r\n * method calls {@link JsonElement#getAsCharacter()} on the element, therefore any of the\r\n * exceptions declared by that method can occur.\r\n *\r\n * @return this element as a primitive short if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n * @deprecated This method is misleading, as it does not get this element as a char but rather as\r\n *     a string's first character.\r\n */\r\n@Deprecated\r\n@Override\r\npublic char getAsCharacter() {\r\n    return getAsSingleElement().getAsCharacter();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsShort",
    "start_line": 386,
    "end_line": 389,
    "code": "/**\r\n * Convenience method to get this array as a primitive short if it contains a single element. This\r\n * method calls {@link JsonElement#getAsShort()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a primitive short if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic short getAsShort() {\r\n    return getAsSingleElement().getAsShort();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "getAsBoolean",
    "start_line": 399,
    "end_line": 402,
    "code": "/**\r\n * Convenience method to get this array as a boolean if it contains a single element. This method\r\n * calls {@link JsonElement#getAsBoolean()} on the element, therefore any of the exceptions\r\n * declared by that method can occur.\r\n *\r\n * @return this element as a boolean if it is single element array.\r\n * @throws IllegalStateException if the array is empty or has more than one element.\r\n */\r\n@Override\r\npublic boolean getAsBoolean() {\r\n    return getAsSingleElement().getAsBoolean();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "asList",
    "start_line": 415,
    "end_line": 417,
    "code": "/**\r\n * Returns a mutable {@link List} view of this {@code JsonArray}. Changes to the {@code List} are\r\n * visible in this {@code JsonArray} and the other way around.\r\n *\r\n * <p>The {@code List} does not permit {@code null} elements. Unlike {@code JsonArray}'s {@code\r\n * null} handling, a {@link NullPointerException} is thrown when trying to add {@code null}. Use\r\n * {@link JsonNull} for JSON null values.\r\n *\r\n * @return mutable {@code List} view\r\n * @since 2.10\r\n */\r\npublic List<JsonElement> asList() {\r\n    return new NonNullElementWrapperList<>(elements);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "equals",
    "start_line": 423,
    "end_line": 426,
    "code": "/**\r\n * Returns whether the other object is equal to this. This method only considers the other object\r\n * to be equal if it is an instance of {@code JsonArray} and has equal elements in the same order.\r\n */\r\n@Override\r\npublic boolean equals(Object o) {\r\n    return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  },
  {
    "type": "method",
    "name": "hashCode",
    "start_line": 432,
    "end_line": 435,
    "code": "/**\r\n * Returns the hash code of this array. This method calculates the hash code based on the elements\r\n * of this array.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonArray.java"
  }
]