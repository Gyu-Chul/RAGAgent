[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Streams",
    "start_line": 18,
    "end_line": 18,
    "code": "import com.google.gson.internal.Streams;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.MalformedJsonException",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.stream.MalformedJsonException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "java.util.Iterator",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.util.Iterator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "import",
    "name": "java.util.NoSuchElementException",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.NoSuchElementException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "class",
    "name": "JsonStreamParser",
    "start_line": 51,
    "end_line": 125,
    "code": "/**\r\n * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\r\n * asynchronously. The JSON data is parsed in lenient mode, see also {@link\r\n * JsonReader#setStrictness(Strictness)}.\r\n *\r\n * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To\r\n * properly use this class across multiple threads, you will need to add some external\r\n * synchronization. For example:\r\n *\r\n * <pre>\r\n * JsonStreamParser parser = new JsonStreamParser(\"['first'] {'second':10} 'third'\");\r\n * JsonElement element;\r\n * synchronized (parser) {  // synchronize on an object shared by threads\r\n *   if (parser.hasNext()) {\r\n *     element = parser.next();\r\n *   }\r\n * }\r\n * </pre>\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n * @since 1.4\r\n */\r\npublic final class JsonStreamParser implements Iterator<JsonElement> {\r\n\r\n    private final JsonReader parser;\r\n\r\n    private final Object lock;\r\n\r\n    /**\r\n     * @param json The string containing JSON elements concatenated to each other.\r\n     * @since 1.4\r\n     */\r\n    public JsonStreamParser(String json) {\r\n        this(new StringReader(json));\r\n    }\r\n\r\n    /**\r\n     * @param reader The data stream containing JSON elements concatenated to each other.\r\n     * @since 1.4\r\n     */\r\n    public JsonStreamParser(Reader reader) {\r\n        parser = new JsonReader(reader);\r\n        parser.setStrictness(Strictness.LENIENT);\r\n        lock = new Object();\r\n    }\r\n\r\n    /**\r\n     * Returns the next available {@link JsonElement} on the reader. Throws a {@link\r\n     * NoSuchElementException} if no element is available.\r\n     *\r\n     * @return the next available {@code JsonElement} on the reader.\r\n     * @throws JsonParseException if the incoming stream is malformed JSON.\r\n     * @throws NoSuchElementException if no {@code JsonElement} is available.\r\n     * @since 1.4\r\n     */\r\n    @Override\r\n    public JsonElement next() throws JsonParseException {\r\n        if (!hasNext()) {\r\n            throw new NoSuchElementException();\r\n        }\r\n        try {\r\n            return Streams.parse(parser);\r\n        } catch (StackOverflowError | OutOfMemoryError e) {\r\n            throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if a {@link JsonElement} is available on the input for consumption\r\n     *\r\n     * @return true if a {@link JsonElement} is available on the input, false otherwise\r\n     * @throws JsonParseException if the incoming stream is malformed JSON.\r\n     * @since 1.4\r\n     */\r\n    @Override\r\n    public boolean hasNext() {\r\n        synchronized (lock) {\r\n            try {\r\n                return parser.peek() != JsonToken.END_DOCUMENT;\r\n            } catch (MalformedJsonException e) {\r\n                throw new JsonSyntaxException(e);\r\n            } catch (IOException e) {\r\n                throw new JsonIOException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This optional {@link Iterator} method is not relevant for stream parsing and hence is not\r\n     * implemented.\r\n     *\r\n     * @since 1.4\r\n     */\r\n    @Override\r\n    public void remove() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "field",
    "name": "parser",
    "start_line": 52,
    "end_line": 52,
    "code": "private final JsonReader parser;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "field",
    "name": "lock",
    "start_line": 53,
    "end_line": 53,
    "code": "private final Object lock;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "constructor",
    "name": "JsonStreamParser",
    "start_line": 59,
    "end_line": 61,
    "code": "/**\r\n * @param json The string containing JSON elements concatenated to each other.\r\n * @since 1.4\r\n */\r\npublic JsonStreamParser(String json) {\r\n    this(new StringReader(json));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "constructor",
    "name": "JsonStreamParser",
    "start_line": 67,
    "end_line": 71,
    "code": "/**\r\n * @param reader The data stream containing JSON elements concatenated to each other.\r\n * @since 1.4\r\n */\r\npublic JsonStreamParser(Reader reader) {\r\n    parser = new JsonReader(reader);\r\n    parser.setStrictness(Strictness.LENIENT);\r\n    lock = new Object();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "method",
    "name": "next",
    "start_line": 82,
    "end_line": 93,
    "code": "/**\r\n * Returns the next available {@link JsonElement} on the reader. Throws a {@link\r\n * NoSuchElementException} if no element is available.\r\n *\r\n * @return the next available {@code JsonElement} on the reader.\r\n * @throws JsonParseException if the incoming stream is malformed JSON.\r\n * @throws NoSuchElementException if no {@code JsonElement} is available.\r\n * @since 1.4\r\n */\r\n@Override\r\npublic JsonElement next() throws JsonParseException {\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    try {\r\n        return Streams.parse(parser);\r\n    } catch (StackOverflowError | OutOfMemoryError e) {\r\n        throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "method",
    "name": "hasNext",
    "start_line": 102,
    "end_line": 113,
    "code": "/**\r\n * Returns true if a {@link JsonElement} is available on the input for consumption\r\n *\r\n * @return true if a {@link JsonElement} is available on the input, false otherwise\r\n * @throws JsonParseException if the incoming stream is malformed JSON.\r\n * @since 1.4\r\n */\r\n@Override\r\npublic boolean hasNext() {\r\n    synchronized (lock) {\r\n        try {\r\n            return parser.peek() != JsonToken.END_DOCUMENT;\r\n        } catch (MalformedJsonException e) {\r\n            throw new JsonSyntaxException(e);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  },
  {
    "type": "method",
    "name": "remove",
    "start_line": 121,
    "end_line": 124,
    "code": "/**\r\n * This optional {@link Iterator} method is not relevant for stream parsing and hence is not\r\n * implemented.\r\n *\r\n * @since 1.4\r\n */\r\n@Override\r\npublic void remove() {\r\n    throw new UnsupportedOperationException();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\JsonStreamParser.java"
  }
]