[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ToNumberPolicy",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.ToNumberPolicy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.ToNumberStrategy",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.ToNumberStrategy;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LinkedTreeMap",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.LinkedTreeMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayDeque",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.ArrayDeque;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.Deque",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Deque;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "class",
    "name": "ObjectTypeAdapter",
    "start_line": 40,
    "end_line": 186,
    "code": "/**\r\n * Adapts types whose static type is only 'Object'. Uses getClass() on serialization and a\r\n * primitive/Map/List on deserialization.\r\n */\r\npublic final class ObjectTypeAdapter extends TypeAdapter<Object> {\r\n\r\n    /**\r\n     * Gson default factory using {@link ToNumberPolicy#DOUBLE}.\r\n     */\r\n    private static final TypeAdapterFactory DOUBLE_FACTORY = newFactory(ToNumberPolicy.DOUBLE);\r\n\r\n    private final Gson gson;\r\n\r\n    private final ToNumberStrategy toNumberStrategy;\r\n\r\n    private ObjectTypeAdapter(Gson gson, ToNumberStrategy toNumberStrategy) {\r\n        this.gson = gson;\r\n        this.toNumberStrategy = toNumberStrategy;\r\n    }\r\n\r\n    private static TypeAdapterFactory newFactory(ToNumberStrategy toNumberStrategy) {\r\n        return new TypeAdapterFactory() {\r\n\r\n            @SuppressWarnings(\"unchecked\")\r\n            @Override\r\n            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n                if (type.getRawType() == Object.class) {\r\n                    return (TypeAdapter<T>) new ObjectTypeAdapter(gson, toNumberStrategy);\r\n                }\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    public static TypeAdapterFactory getFactory(ToNumberStrategy toNumberStrategy) {\r\n        if (toNumberStrategy == ToNumberPolicy.DOUBLE) {\r\n            return DOUBLE_FACTORY;\r\n        } else {\r\n            return newFactory(toNumberStrategy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tries to begin reading a JSON array or JSON object, returning {@code null} if the next element\r\n     * is neither of those.\r\n     */\r\n    private Object tryBeginNesting(JsonReader in, JsonToken peeked) throws IOException {\r\n        switch(peeked) {\r\n            case BEGIN_ARRAY:\r\n                in.beginArray();\r\n                return new ArrayList<>();\r\n            case BEGIN_OBJECT:\r\n                in.beginObject();\r\n                return new LinkedTreeMap<>();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads an {@code Object} which cannot have any nested elements\r\n     */\r\n    private Object readTerminal(JsonReader in, JsonToken peeked) throws IOException {\r\n        switch(peeked) {\r\n            case STRING:\r\n                return in.nextString();\r\n            case NUMBER:\r\n                return toNumberStrategy.readNumber(in);\r\n            case BOOLEAN:\r\n                return in.nextBoolean();\r\n            case NULL:\r\n                in.nextNull();\r\n                return null;\r\n            default:\r\n                // When read(JsonReader) is called with JsonReader in invalid state\r\n                throw new IllegalStateException(\"Unexpected token: \" + peeked);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object read(JsonReader in) throws IOException {\r\n        // Either List or Map\r\n        Object current;\r\n        JsonToken peeked = in.peek();\r\n        current = tryBeginNesting(in, peeked);\r\n        if (current == null) {\r\n            return readTerminal(in, peeked);\r\n        }\r\n        Deque<Object> stack = new ArrayDeque<>();\r\n        while (true) {\r\n            while (in.hasNext()) {\r\n                String name = null;\r\n                // Name is only used for JSON object members\r\n                if (current instanceof Map) {\r\n                    name = in.nextName();\r\n                }\r\n                peeked = in.peek();\r\n                Object value = tryBeginNesting(in, peeked);\r\n                boolean isNesting = value != null;\r\n                if (value == null) {\r\n                    value = readTerminal(in, peeked);\r\n                }\r\n                if (current instanceof List) {\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    List<Object> list = (List<Object>) current;\r\n                    list.add(value);\r\n                } else {\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    Map<String, Object> map = (Map<String, Object>) current;\r\n                    map.put(name, value);\r\n                }\r\n                if (isNesting) {\r\n                    stack.addLast(current);\r\n                    current = value;\r\n                }\r\n            }\r\n            // End current element\r\n            if (current instanceof List) {\r\n                in.endArray();\r\n            } else {\r\n                in.endObject();\r\n            }\r\n            if (stack.isEmpty()) {\r\n                return current;\r\n            } else {\r\n                // Continue with enclosing element\r\n                current = stack.removeLast();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void write(JsonWriter out, Object value) throws IOException {\r\n        if (value == null) {\r\n            out.nullValue();\r\n            return;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n        if (typeAdapter instanceof ObjectTypeAdapter) {\r\n            out.beginObject();\r\n            out.endObject();\r\n            return;\r\n        }\r\n        typeAdapter.write(out, value);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "DOUBLE_FACTORY",
    "start_line": 42,
    "end_line": 42,
    "code": "/**\r\n * Gson default factory using {@link ToNumberPolicy#DOUBLE}.\r\n */\r\nprivate static final TypeAdapterFactory DOUBLE_FACTORY = newFactory(ToNumberPolicy.DOUBLE);",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 44,
    "end_line": 44,
    "code": "private final Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "toNumberStrategy",
    "start_line": 45,
    "end_line": 45,
    "code": "private final ToNumberStrategy toNumberStrategy;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "constructor",
    "name": "ObjectTypeAdapter",
    "start_line": 47,
    "end_line": 50,
    "code": "private ObjectTypeAdapter(Gson gson, ToNumberStrategy toNumberStrategy) {\r\n    this.gson = gson;\r\n    this.toNumberStrategy = toNumberStrategy;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "newFactory",
    "start_line": 52,
    "end_line": 63,
    "code": "private static TypeAdapterFactory newFactory(ToNumberStrategy toNumberStrategy) {\r\n    return new TypeAdapterFactory() {\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            if (type.getRawType() == Object.class) {\r\n                return (TypeAdapter<T>) new ObjectTypeAdapter(gson, toNumberStrategy);\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "getFactory",
    "start_line": 65,
    "end_line": 71,
    "code": "public static TypeAdapterFactory getFactory(ToNumberStrategy toNumberStrategy) {\r\n    if (toNumberStrategy == ToNumberPolicy.DOUBLE) {\r\n        return DOUBLE_FACTORY;\r\n    } else {\r\n        return newFactory(toNumberStrategy);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "tryBeginNesting",
    "start_line": 77,
    "end_line": 88,
    "code": "/**\r\n * Tries to begin reading a JSON array or JSON object, returning {@code null} if the next element\r\n * is neither of those.\r\n */\r\nprivate Object tryBeginNesting(JsonReader in, JsonToken peeked) throws IOException {\r\n    switch(peeked) {\r\n        case BEGIN_ARRAY:\r\n            in.beginArray();\r\n            return new ArrayList<>();\r\n        case BEGIN_OBJECT:\r\n            in.beginObject();\r\n            return new LinkedTreeMap<>();\r\n        default:\r\n            return null;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "readTerminal",
    "start_line": 91,
    "end_line": 106,
    "code": "/**\r\n * Reads an {@code Object} which cannot have any nested elements\r\n */\r\nprivate Object readTerminal(JsonReader in, JsonToken peeked) throws IOException {\r\n    switch(peeked) {\r\n        case STRING:\r\n            return in.nextString();\r\n        case NUMBER:\r\n            return toNumberStrategy.readNumber(in);\r\n        case BOOLEAN:\r\n            return in.nextBoolean();\r\n        case NULL:\r\n            in.nextNull();\r\n            return null;\r\n        default:\r\n            // When read(JsonReader) is called with JsonReader in invalid state\r\n            throw new IllegalStateException(\"Unexpected token: \" + peeked);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "read",
    "start_line": 108,
    "end_line": 167,
    "code": "@Override\r\npublic Object read(JsonReader in) throws IOException {\r\n    // Either List or Map\r\n    Object current;\r\n    JsonToken peeked = in.peek();\r\n    current = tryBeginNesting(in, peeked);\r\n    if (current == null) {\r\n        return readTerminal(in, peeked);\r\n    }\r\n    Deque<Object> stack = new ArrayDeque<>();\r\n    while (true) {\r\n        while (in.hasNext()) {\r\n            String name = null;\r\n            // Name is only used for JSON object members\r\n            if (current instanceof Map) {\r\n                name = in.nextName();\r\n            }\r\n            peeked = in.peek();\r\n            Object value = tryBeginNesting(in, peeked);\r\n            boolean isNesting = value != null;\r\n            if (value == null) {\r\n                value = readTerminal(in, peeked);\r\n            }\r\n            if (current instanceof List) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                List<Object> list = (List<Object>) current;\r\n                list.add(value);\r\n            } else {\r\n                @SuppressWarnings(\"unchecked\")\r\n                Map<String, Object> map = (Map<String, Object>) current;\r\n                map.put(name, value);\r\n            }\r\n            if (isNesting) {\r\n                stack.addLast(current);\r\n                current = value;\r\n            }\r\n        }\r\n        // End current element\r\n        if (current instanceof List) {\r\n            in.endArray();\r\n        } else {\r\n            in.endObject();\r\n        }\r\n        if (stack.isEmpty()) {\r\n            return current;\r\n        } else {\r\n            // Continue with enclosing element\r\n            current = stack.removeLast();\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "write",
    "start_line": 169,
    "end_line": 185,
    "code": "@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ObjectTypeAdapter.java"
  }
]