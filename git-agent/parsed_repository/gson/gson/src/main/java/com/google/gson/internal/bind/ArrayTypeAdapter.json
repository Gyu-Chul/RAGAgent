[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.GsonTypes",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.internal.GsonTypes;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Array",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.lang.reflect.Array;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.GenericArrayType",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.lang.reflect.GenericArrayType;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "class",
    "name": "ArrayTypeAdapter",
    "start_line": 34,
    "end_line": 112,
    "code": "/**\r\n * Adapter for arrays.\r\n */\r\npublic final class ArrayTypeAdapter<E> extends TypeAdapter<Object> {\r\n\r\n    public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\r\n\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\r\n            Type type = typeToken.getType();\r\n            if (!(type instanceof GenericArrayType || (type instanceof Class && ((Class<?>) type).isArray()))) {\r\n                return null;\r\n            }\r\n            Type componentType = GsonTypes.getArrayComponentType(type);\r\n            TypeAdapter<?> componentTypeAdapter = gson.getAdapter(TypeToken.get(componentType));\r\n            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n            TypeAdapter<T> arrayAdapter = new ArrayTypeAdapter(gson, componentTypeAdapter, GsonTypes.getRawType(componentType));\r\n            return arrayAdapter;\r\n        }\r\n    };\r\n\r\n    private final Class<E> componentType;\r\n\r\n    private final TypeAdapter<E> componentTypeAdapter;\r\n\r\n    public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {\r\n        this.componentTypeAdapter = new TypeAdapterRuntimeTypeWrapper<>(context, componentTypeAdapter, componentType);\r\n        this.componentType = componentType;\r\n    }\r\n\r\n    @Override\r\n    public Object read(JsonReader in) throws IOException {\r\n        if (in.peek() == JsonToken.NULL) {\r\n            in.nextNull();\r\n            return null;\r\n        }\r\n        ArrayList<E> list = new ArrayList<>();\r\n        in.beginArray();\r\n        while (in.hasNext()) {\r\n            E instance = componentTypeAdapter.read(in);\r\n            list.add(instance);\r\n        }\r\n        in.endArray();\r\n        int size = list.size();\r\n        // Have to copy primitives one by one to primitive array\r\n        if (componentType.isPrimitive()) {\r\n            Object array = Array.newInstance(componentType, size);\r\n            for (int i = 0; i < size; i++) {\r\n                Array.set(array, i, list.get(i));\r\n            }\r\n            return array;\r\n        } else // But for Object[] can use ArrayList.toArray\r\n        {\r\n            @SuppressWarnings(\"unchecked\")\r\n            E[] array = (E[]) Array.newInstance(componentType, size);\r\n            return list.toArray(array);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void write(JsonWriter out, Object array) throws IOException {\r\n        if (array == null) {\r\n            out.nullValue();\r\n            return;\r\n        }\r\n        out.beginArray();\r\n        for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            E value = (E) Array.get(array, i);\r\n            componentTypeAdapter.write(out, value);\r\n        }\r\n        out.endArray();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "FACTORY",
    "start_line": 35,
    "end_line": 53,
    "code": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\r\n\r\n    @Override\r\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\r\n        Type type = typeToken.getType();\r\n        if (!(type instanceof GenericArrayType || (type instanceof Class && ((Class<?>) type).isArray()))) {\r\n            return null;\r\n        }\r\n        Type componentType = GsonTypes.getArrayComponentType(type);\r\n        TypeAdapter<?> componentTypeAdapter = gson.getAdapter(TypeToken.get(componentType));\r\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n        TypeAdapter<T> arrayAdapter = new ArrayTypeAdapter(gson, componentTypeAdapter, GsonTypes.getRawType(componentType));\r\n        return arrayAdapter;\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "componentType",
    "start_line": 55,
    "end_line": 55,
    "code": "private final Class<E> componentType;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "componentTypeAdapter",
    "start_line": 56,
    "end_line": 56,
    "code": "private final TypeAdapter<E> componentTypeAdapter;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "constructor",
    "name": "ArrayTypeAdapter",
    "start_line": 58,
    "end_line": 63,
    "code": "public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {\r\n    this.componentTypeAdapter = new TypeAdapterRuntimeTypeWrapper<>(context, componentTypeAdapter, componentType);\r\n    this.componentType = componentType;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "read",
    "start_line": 65,
    "end_line": 95,
    "code": "@Override\r\npublic Object read(JsonReader in) throws IOException {\r\n    if (in.peek() == JsonToken.NULL) {\r\n        in.nextNull();\r\n        return null;\r\n    }\r\n    ArrayList<E> list = new ArrayList<>();\r\n    in.beginArray();\r\n    while (in.hasNext()) {\r\n        E instance = componentTypeAdapter.read(in);\r\n        list.add(instance);\r\n    }\r\n    in.endArray();\r\n    int size = list.size();\r\n    // Have to copy primitives one by one to primitive array\r\n    if (componentType.isPrimitive()) {\r\n        Object array = Array.newInstance(componentType, size);\r\n        for (int i = 0; i < size; i++) {\r\n            Array.set(array, i, list.get(i));\r\n        }\r\n        return array;\r\n    } else // But for Object[] can use ArrayList.toArray\r\n    {\r\n        @SuppressWarnings(\"unchecked\")\r\n        E[] array = (E[]) Array.newInstance(componentType, size);\r\n        return list.toArray(array);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "write",
    "start_line": 97,
    "end_line": 111,
    "code": "@Override\r\npublic void write(JsonWriter out, Object array) throws IOException {\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\ArrayTypeAdapter.java"
  }
]