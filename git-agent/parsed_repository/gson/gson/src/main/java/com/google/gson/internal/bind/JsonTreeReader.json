[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.errorprone.annotations.CanIgnoreReturnValue",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonArray",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.JsonArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonNull",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonNull;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonObject",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.MalformedJsonException",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.stream.MalformedJsonException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "java.util.Iterator",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.Iterator;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "class",
    "name": "JsonTreeReader",
    "start_line": 39,
    "end_line": 391,
    "code": "/**\r\n * This reader walks the elements of a JsonElement as if it was coming from a character stream.\r\n *\r\n * @author Jesse Wilson\r\n */\r\npublic final class JsonTreeReader extends JsonReader {\r\n\r\n    private static final Reader UNREADABLE_READER = new Reader() {\r\n\r\n        @Override\r\n        public int read(char[] buffer, int offset, int count) {\r\n            throw new AssertionError();\r\n        }\r\n\r\n        @Override\r\n        public void close() {\r\n            throw new AssertionError();\r\n        }\r\n    };\r\n\r\n    private static final Object SENTINEL_CLOSED = new Object();\r\n\r\n    /**\r\n     * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\r\n     */\r\n    private Object[] stack = new Object[32];\r\n\r\n    /**\r\n     * The used size of {@link #stack}; the value at {@code stackSize - 1} is the value last placed on\r\n     * the stack. {@code stackSize} might differ from the nesting depth, because the stack also\r\n     * contains temporary additional objects, for example for a JsonArray it contains the JsonArray\r\n     * object as well as the corresponding iterator.\r\n     */\r\n    private int stackSize = 0;\r\n\r\n    /*\r\n   * The path members. It corresponds directly to stack: At indices where the\r\n   * stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),\r\n   * pathNames contains the name at this scope. Where it contains an array\r\n   * (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in\r\n   * that array. Otherwise the value is undefined, and we take advantage of that\r\n   * by incrementing pathIndices when doing so isn't useful.\r\n   */\r\n    private String[] pathNames = new String[32];\r\n\r\n    private int[] pathIndices = new int[32];\r\n\r\n    public JsonTreeReader(JsonElement element) {\r\n        super(UNREADABLE_READER);\r\n        push(element);\r\n    }\r\n\r\n    @Override\r\n    public void beginArray() throws IOException {\r\n        expect(JsonToken.BEGIN_ARRAY);\r\n        JsonArray array = (JsonArray) peekStack();\r\n        push(array.iterator());\r\n        pathIndices[stackSize - 1] = 0;\r\n    }\r\n\r\n    @Override\r\n    public void endArray() throws IOException {\r\n        expect(JsonToken.END_ARRAY);\r\n        // empty iterator\r\n        popStack();\r\n        // array\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beginObject() throws IOException {\r\n        expect(JsonToken.BEGIN_OBJECT);\r\n        JsonObject object = (JsonObject) peekStack();\r\n        push(object.entrySet().iterator());\r\n    }\r\n\r\n    @Override\r\n    public void endObject() throws IOException {\r\n        expect(JsonToken.END_OBJECT);\r\n        // Free the last path name so that it can be garbage collected\r\n        pathNames[stackSize - 1] = null;\r\n        // empty iterator\r\n        popStack();\r\n        // object\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() throws IOException {\r\n        JsonToken token = peek();\r\n        return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY && token != JsonToken.END_DOCUMENT;\r\n    }\r\n\r\n    @Override\r\n    public JsonToken peek() throws IOException {\r\n        if (stackSize == 0) {\r\n            return JsonToken.END_DOCUMENT;\r\n        }\r\n        Object o = peekStack();\r\n        if (o instanceof Iterator) {\r\n            boolean isObject = stack[stackSize - 2] instanceof JsonObject;\r\n            Iterator<?> iterator = (Iterator<?>) o;\r\n            if (iterator.hasNext()) {\r\n                if (isObject) {\r\n                    return JsonToken.NAME;\r\n                } else {\r\n                    push(iterator.next());\r\n                    return peek();\r\n                }\r\n            } else {\r\n                return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;\r\n            }\r\n        } else if (o instanceof JsonObject) {\r\n            return JsonToken.BEGIN_OBJECT;\r\n        } else if (o instanceof JsonArray) {\r\n            return JsonToken.BEGIN_ARRAY;\r\n        } else if (o instanceof JsonPrimitive) {\r\n            JsonPrimitive primitive = (JsonPrimitive) o;\r\n            if (primitive.isString()) {\r\n                return JsonToken.STRING;\r\n            } else if (primitive.isBoolean()) {\r\n                return JsonToken.BOOLEAN;\r\n            } else if (primitive.isNumber()) {\r\n                return JsonToken.NUMBER;\r\n            } else {\r\n                throw new AssertionError();\r\n            }\r\n        } else if (o instanceof JsonNull) {\r\n            return JsonToken.NULL;\r\n        } else if (o == SENTINEL_CLOSED) {\r\n            throw new IllegalStateException(\"JsonReader is closed\");\r\n        } else {\r\n            throw new MalformedJsonException(\"Custom JsonElement subclass \" + o.getClass().getName() + \" is not supported\");\r\n        }\r\n    }\r\n\r\n    private Object peekStack() {\r\n        return stack[stackSize - 1];\r\n    }\r\n\r\n    @CanIgnoreReturnValue\r\n    private Object popStack() {\r\n        Object result = stack[--stackSize];\r\n        stack[stackSize] = null;\r\n        return result;\r\n    }\r\n\r\n    private void expect(JsonToken expected) throws IOException {\r\n        if (peek() != expected) {\r\n            throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek() + locationString());\r\n        }\r\n    }\r\n\r\n    private String nextName(boolean skipName) throws IOException {\r\n        expect(JsonToken.NAME);\r\n        Iterator<?> i = (Iterator<?>) peekStack();\r\n        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\r\n        String result = (String) entry.getKey();\r\n        pathNames[stackSize - 1] = skipName ? \"<skipped>\" : result;\r\n        push(entry.getValue());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public String nextName() throws IOException {\r\n        return nextName(false);\r\n    }\r\n\r\n    @Override\r\n    public String nextString() throws IOException {\r\n        JsonToken token = peek();\r\n        if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\r\n            throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\r\n        }\r\n        String result = ((JsonPrimitive) popStack()).getAsString();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean nextBoolean() throws IOException {\r\n        expect(JsonToken.BOOLEAN);\r\n        boolean result = ((JsonPrimitive) popStack()).getAsBoolean();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void nextNull() throws IOException {\r\n        expect(JsonToken.NULL);\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public double nextDouble() throws IOException {\r\n        JsonToken token = peek();\r\n        if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n        }\r\n        double result = ((JsonPrimitive) peekStack()).getAsDouble();\r\n        if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\r\n            throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result);\r\n        }\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public long nextLong() throws IOException {\r\n        JsonToken token = peek();\r\n        if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n        }\r\n        long result = ((JsonPrimitive) peekStack()).getAsLong();\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public int nextInt() throws IOException {\r\n        JsonToken token = peek();\r\n        if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n        }\r\n        int result = ((JsonPrimitive) peekStack()).getAsInt();\r\n        popStack();\r\n        if (stackSize > 0) {\r\n            pathIndices[stackSize - 1]++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    JsonElement nextJsonElement() throws IOException {\r\n        JsonToken peeked = peek();\r\n        if (peeked == JsonToken.NAME || peeked == JsonToken.END_ARRAY || peeked == JsonToken.END_OBJECT || peeked == JsonToken.END_DOCUMENT) {\r\n            throw new IllegalStateException(\"Unexpected \" + peeked + \" when reading a JsonElement.\");\r\n        }\r\n        JsonElement element = (JsonElement) peekStack();\r\n        skipValue();\r\n        return element;\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n        stack = new Object[] { SENTINEL_CLOSED };\r\n        stackSize = 1;\r\n    }\r\n\r\n    @Override\r\n    public void skipValue() throws IOException {\r\n        JsonToken peeked = peek();\r\n        switch(peeked) {\r\n            case NAME:\r\n                @SuppressWarnings(\"unused\")\r\n                String unused = nextName(true);\r\n                break;\r\n            case END_ARRAY:\r\n                endArray();\r\n                break;\r\n            case END_OBJECT:\r\n                endObject();\r\n                break;\r\n            case END_DOCUMENT:\r\n                // Do nothing\r\n                break;\r\n            default:\r\n                popStack();\r\n                if (stackSize > 0) {\r\n                    pathIndices[stackSize - 1]++;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return getClass().getSimpleName() + locationString();\r\n    }\r\n\r\n    public void promoteNameToValue() throws IOException {\r\n        expect(JsonToken.NAME);\r\n        Iterator<?> i = (Iterator<?>) peekStack();\r\n        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\r\n        push(entry.getValue());\r\n        push(new JsonPrimitive((String) entry.getKey()));\r\n    }\r\n\r\n    private void push(Object newTop) {\r\n        if (stackSize == stack.length) {\r\n            int newLength = stackSize * 2;\r\n            stack = Arrays.copyOf(stack, newLength);\r\n            pathIndices = Arrays.copyOf(pathIndices, newLength);\r\n            pathNames = Arrays.copyOf(pathNames, newLength);\r\n        }\r\n        stack[stackSize++] = newTop;\r\n    }\r\n\r\n    private String getPath(boolean usePreviousPath) {\r\n        StringBuilder result = new StringBuilder().append('$');\r\n        for (int i = 0; i < stackSize; i++) {\r\n            if (stack[i] instanceof JsonArray) {\r\n                if (++i < stackSize && stack[i] instanceof Iterator) {\r\n                    int pathIndex = pathIndices[i];\r\n                    // If index is last path element it points to next array element; have to decrement\r\n                    // `- 1` covers case where iterator for next element is on stack\r\n                    // `- 2` covers case where peek() already pushed next element onto stack\r\n                    if (usePreviousPath && pathIndex > 0 && (i == stackSize - 1 || i == stackSize - 2)) {\r\n                        pathIndex--;\r\n                    }\r\n                    result.append('[').append(pathIndex).append(']');\r\n                }\r\n            } else if (stack[i] instanceof JsonObject) {\r\n                if (++i < stackSize && stack[i] instanceof Iterator) {\r\n                    result.append('.');\r\n                    if (pathNames[i] != null) {\r\n                        result.append(pathNames[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    @Override\r\n    public String getPath() {\r\n        return getPath(false);\r\n    }\r\n\r\n    @Override\r\n    public String getPreviousPath() {\r\n        return getPath(true);\r\n    }\r\n\r\n    private String locationString() {\r\n        return \" at path \" + getPath();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "UNREADABLE_READER",
    "start_line": 40,
    "end_line": 51,
    "code": "private static final Reader UNREADABLE_READER = new Reader() {\r\n\r\n    @Override\r\n    public int read(char[] buffer, int offset, int count) {\r\n        throw new AssertionError();\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        throw new AssertionError();\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "SENTINEL_CLOSED",
    "start_line": 52,
    "end_line": 52,
    "code": "private static final Object SENTINEL_CLOSED = new Object();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "stack",
    "start_line": 55,
    "end_line": 55,
    "code": "/**\r\n * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\r\n */\r\nprivate Object[] stack = new Object[32];",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "stackSize",
    "start_line": 63,
    "end_line": 63,
    "code": "/**\r\n * The used size of {@link #stack}; the value at {@code stackSize - 1} is the value last placed on\r\n * the stack. {@code stackSize} might differ from the nesting depth, because the stack also\r\n * contains temporary additional objects, for example for a JsonArray it contains the JsonArray\r\n * object as well as the corresponding iterator.\r\n */\r\nprivate int stackSize = 0;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "pathNames",
    "start_line": 73,
    "end_line": 73,
    "code": "/*\r\n   * The path members. It corresponds directly to stack: At indices where the\r\n   * stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),\r\n   * pathNames contains the name at this scope. Where it contains an array\r\n   * (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in\r\n   * that array. Otherwise the value is undefined, and we take advantage of that\r\n   * by incrementing pathIndices when doing so isn't useful.\r\n   */\r\nprivate String[] pathNames = new String[32];",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "field",
    "name": "pathIndices",
    "start_line": 74,
    "end_line": 74,
    "code": "private int[] pathIndices = new int[32];",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "constructor",
    "name": "JsonTreeReader",
    "start_line": 76,
    "end_line": 79,
    "code": "public JsonTreeReader(JsonElement element) {\r\n    super(UNREADABLE_READER);\r\n    push(element);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "beginArray",
    "start_line": 81,
    "end_line": 87,
    "code": "@Override\r\npublic void beginArray() throws IOException {\r\n    expect(JsonToken.BEGIN_ARRAY);\r\n    JsonArray array = (JsonArray) peekStack();\r\n    push(array.iterator());\r\n    pathIndices[stackSize - 1] = 0;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "endArray",
    "start_line": 89,
    "end_line": 97,
    "code": "@Override\r\npublic void endArray() throws IOException {\r\n    expect(JsonToken.END_ARRAY);\r\n    // empty iterator\r\n    popStack();\r\n    // array\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "beginObject",
    "start_line": 99,
    "end_line": 104,
    "code": "@Override\r\npublic void beginObject() throws IOException {\r\n    expect(JsonToken.BEGIN_OBJECT);\r\n    JsonObject object = (JsonObject) peekStack();\r\n    push(object.entrySet().iterator());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "endObject",
    "start_line": 106,
    "end_line": 115,
    "code": "@Override\r\npublic void endObject() throws IOException {\r\n    expect(JsonToken.END_OBJECT);\r\n    // Free the last path name so that it can be garbage collected\r\n    pathNames[stackSize - 1] = null;\r\n    // empty iterator\r\n    popStack();\r\n    // object\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "hasNext",
    "start_line": 117,
    "end_line": 123,
    "code": "@Override\r\npublic boolean hasNext() throws IOException {\r\n    JsonToken token = peek();\r\n    return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY && token != JsonToken.END_DOCUMENT;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "peek",
    "start_line": 125,
    "end_line": 168,
    "code": "@Override\r\npublic JsonToken peek() throws IOException {\r\n    if (stackSize == 0) {\r\n        return JsonToken.END_DOCUMENT;\r\n    }\r\n    Object o = peekStack();\r\n    if (o instanceof Iterator) {\r\n        boolean isObject = stack[stackSize - 2] instanceof JsonObject;\r\n        Iterator<?> iterator = (Iterator<?>) o;\r\n        if (iterator.hasNext()) {\r\n            if (isObject) {\r\n                return JsonToken.NAME;\r\n            } else {\r\n                push(iterator.next());\r\n                return peek();\r\n            }\r\n        } else {\r\n            return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;\r\n        }\r\n    } else if (o instanceof JsonObject) {\r\n        return JsonToken.BEGIN_OBJECT;\r\n    } else if (o instanceof JsonArray) {\r\n        return JsonToken.BEGIN_ARRAY;\r\n    } else if (o instanceof JsonPrimitive) {\r\n        JsonPrimitive primitive = (JsonPrimitive) o;\r\n        if (primitive.isString()) {\r\n            return JsonToken.STRING;\r\n        } else if (primitive.isBoolean()) {\r\n            return JsonToken.BOOLEAN;\r\n        } else if (primitive.isNumber()) {\r\n            return JsonToken.NUMBER;\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (o instanceof JsonNull) {\r\n        return JsonToken.NULL;\r\n    } else if (o == SENTINEL_CLOSED) {\r\n        throw new IllegalStateException(\"JsonReader is closed\");\r\n    } else {\r\n        throw new MalformedJsonException(\"Custom JsonElement subclass \" + o.getClass().getName() + \" is not supported\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "peekStack",
    "start_line": 170,
    "end_line": 172,
    "code": "private Object peekStack() {\r\n    return stack[stackSize - 1];\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "popStack",
    "start_line": 174,
    "end_line": 179,
    "code": "@CanIgnoreReturnValue\r\nprivate Object popStack() {\r\n    Object result = stack[--stackSize];\r\n    stack[stackSize] = null;\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "expect",
    "start_line": 181,
    "end_line": 186,
    "code": "private void expect(JsonToken expected) throws IOException {\r\n    if (peek() != expected) {\r\n        throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek() + locationString());\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextName",
    "start_line": 188,
    "end_line": 196,
    "code": "private String nextName(boolean skipName) throws IOException {\r\n    expect(JsonToken.NAME);\r\n    Iterator<?> i = (Iterator<?>) peekStack();\r\n    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\r\n    String result = (String) entry.getKey();\r\n    pathNames[stackSize - 1] = skipName ? \"<skipped>\" : result;\r\n    push(entry.getValue());\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextName",
    "start_line": 198,
    "end_line": 201,
    "code": "@Override\r\npublic String nextName() throws IOException {\r\n    return nextName(false);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextString",
    "start_line": 203,
    "end_line": 215,
    "code": "@Override\r\npublic String nextString() throws IOException {\r\n    JsonToken token = peek();\r\n    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\r\n        throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\r\n    }\r\n    String result = ((JsonPrimitive) popStack()).getAsString();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextBoolean",
    "start_line": 217,
    "end_line": 225,
    "code": "@Override\r\npublic boolean nextBoolean() throws IOException {\r\n    expect(JsonToken.BOOLEAN);\r\n    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextNull",
    "start_line": 227,
    "end_line": 234,
    "code": "@Override\r\npublic void nextNull() throws IOException {\r\n    expect(JsonToken.NULL);\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextDouble",
    "start_line": 236,
    "end_line": 252,
    "code": "@Override\r\npublic double nextDouble() throws IOException {\r\n    JsonToken token = peek();\r\n    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n        throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n    }\r\n    double result = ((JsonPrimitive) peekStack()).getAsDouble();\r\n    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\r\n        throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result);\r\n    }\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextLong",
    "start_line": 254,
    "end_line": 267,
    "code": "@Override\r\npublic long nextLong() throws IOException {\r\n    JsonToken token = peek();\r\n    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n        throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n    }\r\n    long result = ((JsonPrimitive) peekStack()).getAsLong();\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextInt",
    "start_line": 269,
    "end_line": 282,
    "code": "@Override\r\npublic int nextInt() throws IOException {\r\n    JsonToken token = peek();\r\n    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\r\n        throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\r\n    }\r\n    int result = ((JsonPrimitive) peekStack()).getAsInt();\r\n    popStack();\r\n    if (stackSize > 0) {\r\n        pathIndices[stackSize - 1]++;\r\n    }\r\n    return result;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "nextJsonElement",
    "start_line": 284,
    "end_line": 295,
    "code": "JsonElement nextJsonElement() throws IOException {\r\n    JsonToken peeked = peek();\r\n    if (peeked == JsonToken.NAME || peeked == JsonToken.END_ARRAY || peeked == JsonToken.END_OBJECT || peeked == JsonToken.END_DOCUMENT) {\r\n        throw new IllegalStateException(\"Unexpected \" + peeked + \" when reading a JsonElement.\");\r\n    }\r\n    JsonElement element = (JsonElement) peekStack();\r\n    skipValue();\r\n    return element;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "close",
    "start_line": 297,
    "end_line": 301,
    "code": "@Override\r\npublic void close() throws IOException {\r\n    stack = new Object[] { SENTINEL_CLOSED };\r\n    stackSize = 1;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "skipValue",
    "start_line": 303,
    "end_line": 327,
    "code": "@Override\r\npublic void skipValue() throws IOException {\r\n    JsonToken peeked = peek();\r\n    switch(peeked) {\r\n        case NAME:\r\n            @SuppressWarnings(\"unused\")\r\n            String unused = nextName(true);\r\n            break;\r\n        case END_ARRAY:\r\n            endArray();\r\n            break;\r\n        case END_OBJECT:\r\n            endObject();\r\n            break;\r\n        case END_DOCUMENT:\r\n            // Do nothing\r\n            break;\r\n        default:\r\n            popStack();\r\n            if (stackSize > 0) {\r\n                pathIndices[stackSize - 1]++;\r\n            }\r\n            break;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "toString",
    "start_line": 329,
    "end_line": 332,
    "code": "@Override\r\npublic String toString() {\r\n    return getClass().getSimpleName() + locationString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "promoteNameToValue",
    "start_line": 334,
    "end_line": 340,
    "code": "public void promoteNameToValue() throws IOException {\r\n    expect(JsonToken.NAME);\r\n    Iterator<?> i = (Iterator<?>) peekStack();\r\n    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\r\n    push(entry.getValue());\r\n    push(new JsonPrimitive((String) entry.getKey()));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "push",
    "start_line": 342,
    "end_line": 350,
    "code": "private void push(Object newTop) {\r\n    if (stackSize == stack.length) {\r\n        int newLength = stackSize * 2;\r\n        stack = Arrays.copyOf(stack, newLength);\r\n        pathIndices = Arrays.copyOf(pathIndices, newLength);\r\n        pathNames = Arrays.copyOf(pathNames, newLength);\r\n    }\r\n    stack[stackSize++] = newTop;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "getPath",
    "start_line": 352,
    "end_line": 376,
    "code": "private String getPath(boolean usePreviousPath) {\r\n    StringBuilder result = new StringBuilder().append('$');\r\n    for (int i = 0; i < stackSize; i++) {\r\n        if (stack[i] instanceof JsonArray) {\r\n            if (++i < stackSize && stack[i] instanceof Iterator) {\r\n                int pathIndex = pathIndices[i];\r\n                // If index is last path element it points to next array element; have to decrement\r\n                // `- 1` covers case where iterator for next element is on stack\r\n                // `- 2` covers case where peek() already pushed next element onto stack\r\n                if (usePreviousPath && pathIndex > 0 && (i == stackSize - 1 || i == stackSize - 2)) {\r\n                    pathIndex--;\r\n                }\r\n                result.append('[').append(pathIndex).append(']');\r\n            }\r\n        } else if (stack[i] instanceof JsonObject) {\r\n            if (++i < stackSize && stack[i] instanceof Iterator) {\r\n                result.append('.');\r\n                if (pathNames[i] != null) {\r\n                    result.append(pathNames[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result.toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "getPath",
    "start_line": 378,
    "end_line": 381,
    "code": "@Override\r\npublic String getPath() {\r\n    return getPath(false);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "getPreviousPath",
    "start_line": 383,
    "end_line": 386,
    "code": "@Override\r\npublic String getPreviousPath() {\r\n    return getPath(true);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  },
  {
    "type": "method",
    "name": "locationString",
    "start_line": 388,
    "end_line": 390,
    "code": "private String locationString() {\r\n    return \" at path \" + getPath();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\JsonTreeReader.java"
  }
]