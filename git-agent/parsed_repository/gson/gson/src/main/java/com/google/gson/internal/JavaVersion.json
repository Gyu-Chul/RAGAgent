[
  {
    "type": "package",
    "name": "com.google.gson.internal",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "class",
    "name": "JavaVersion",
    "start_line": 20,
    "end_line": 97,
    "code": "/**\r\n * Utility to check the major Java version of the current JVM.\r\n */\r\npublic final class JavaVersion {\r\n\r\n    // Oracle defines naming conventions at\r\n    // http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html\r\n    // However, many alternate implementations differ. For example, Debian used 9-debian as the\r\n    // version string\r\n    private static final int majorJavaVersion = determineMajorJavaVersion();\r\n\r\n    private static int determineMajorJavaVersion() {\r\n        String javaVersion = System.getProperty(\"java.version\");\r\n        return parseMajorJavaVersion(javaVersion);\r\n    }\r\n\r\n    // Visible for testing only\r\n    static int parseMajorJavaVersion(String javaVersion) {\r\n        int version = parseDotted(javaVersion);\r\n        if (version == -1) {\r\n            version = extractBeginningInt(javaVersion);\r\n        }\r\n        if (version == -1) {\r\n            // Choose minimum supported JDK version as default\r\n            return 6;\r\n        }\r\n        return version;\r\n    }\r\n\r\n    // Parses both legacy 1.8 style and newer 9.0.4 style\r\n    private static int parseDotted(String javaVersion) {\r\n        try {\r\n            String[] parts = javaVersion.split(\"[._]\", 3);\r\n            int firstVer = Integer.parseInt(parts[0]);\r\n            if (firstVer == 1 && parts.length > 1) {\r\n                return Integer.parseInt(parts[1]);\r\n            } else {\r\n                return firstVer;\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    private static int extractBeginningInt(String javaVersion) {\r\n        try {\r\n            StringBuilder num = new StringBuilder();\r\n            for (int i = 0; i < javaVersion.length(); ++i) {\r\n                char c = javaVersion.charAt(i);\r\n                if (Character.isDigit(c)) {\r\n                    num.append(c);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            return Integer.parseInt(num.toString());\r\n        } catch (NumberFormatException e) {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the major Java version\r\n     *\r\n     * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\r\n     */\r\n    public static int getMajorJavaVersion() {\r\n        return majorJavaVersion;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean value depending if the application is running on Java 9 or later\r\n     *\r\n     * @return {@code true} if the application is running on Java 9 or later; and {@code false}\r\n     *     otherwise.\r\n     */\r\n    public static boolean isJava9OrLater() {\r\n        return majorJavaVersion >= 9;\r\n    }\r\n\r\n    private JavaVersion() {\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "field",
    "name": "majorJavaVersion",
    "start_line": 26,
    "end_line": 26,
    "code": "// Oracle defines naming conventions at\r\n// http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html\r\n// However, many alternate implementations differ. For example, Debian used 9-debian as the\r\n// version string\r\nprivate static final int majorJavaVersion = determineMajorJavaVersion();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "constructor",
    "name": "JavaVersion",
    "start_line": 96,
    "end_line": 96,
    "code": "private JavaVersion() {\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "determineMajorJavaVersion",
    "start_line": 28,
    "end_line": 31,
    "code": "private static int determineMajorJavaVersion() {\r\n    String javaVersion = System.getProperty(\"java.version\");\r\n    return parseMajorJavaVersion(javaVersion);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "parseMajorJavaVersion",
    "start_line": 34,
    "end_line": 43,
    "code": "// Visible for testing only\r\nstatic int parseMajorJavaVersion(String javaVersion) {\r\n    int version = parseDotted(javaVersion);\r\n    if (version == -1) {\r\n        version = extractBeginningInt(javaVersion);\r\n    }\r\n    if (version == -1) {\r\n        // Choose minimum supported JDK version as default\r\n        return 6;\r\n    }\r\n    return version;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "parseDotted",
    "start_line": 46,
    "end_line": 58,
    "code": "// Parses both legacy 1.8 style and newer 9.0.4 style\r\nprivate static int parseDotted(String javaVersion) {\r\n    try {\r\n        String[] parts = javaVersion.split(\"[._]\", 3);\r\n        int firstVer = Integer.parseInt(parts[0]);\r\n        if (firstVer == 1 && parts.length > 1) {\r\n            return Integer.parseInt(parts[1]);\r\n        } else {\r\n            return firstVer;\r\n        }\r\n    } catch (NumberFormatException e) {\r\n        return -1;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "extractBeginningInt",
    "start_line": 60,
    "end_line": 75,
    "code": "private static int extractBeginningInt(String javaVersion) {\r\n    try {\r\n        StringBuilder num = new StringBuilder();\r\n        for (int i = 0; i < javaVersion.length(); ++i) {\r\n            char c = javaVersion.charAt(i);\r\n            if (Character.isDigit(c)) {\r\n                num.append(c);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return Integer.parseInt(num.toString());\r\n    } catch (NumberFormatException e) {\r\n        return -1;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "getMajorJavaVersion",
    "start_line": 82,
    "end_line": 84,
    "code": "/**\r\n * Gets the major Java version\r\n *\r\n * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\r\n */\r\npublic static int getMajorJavaVersion() {\r\n    return majorJavaVersion;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  },
  {
    "type": "method",
    "name": "isJava9OrLater",
    "start_line": 92,
    "end_line": 94,
    "code": "/**\r\n * Gets a boolean value depending if the application is running on Java 9 or later\r\n *\r\n * @return {@code true} if the application is running on Java 9 or later; and {@code false}\r\n *     otherwise.\r\n */\r\npublic static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\JavaVersion.java"
  }
]