[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 18,
    "end_line": 18,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.TypeVariable",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.lang.reflect.TypeVariable;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "class",
    "name": "TypeAdapterRuntimeTypeWrapper",
    "start_line": 27,
    "end_line": 103,
    "code": "final class TypeAdapterRuntimeTypeWrapper<T> extends TypeAdapter<T> {\r\n\r\n    private final Gson context;\r\n\r\n    private final TypeAdapter<T> delegate;\r\n\r\n    private final Type type;\r\n\r\n    TypeAdapterRuntimeTypeWrapper(Gson context, TypeAdapter<T> delegate, Type type) {\r\n        this.context = context;\r\n        this.delegate = delegate;\r\n        this.type = type;\r\n    }\r\n\r\n    @Override\r\n    public T read(JsonReader in) throws IOException {\r\n        return delegate.read(in);\r\n    }\r\n\r\n    @Override\r\n    public void write(JsonWriter out, T value) throws IOException {\r\n        // Order of preference for choosing type adapters\r\n        // First preference: a type adapter registered for the runtime type\r\n        // Second preference: a type adapter registered for the declared type\r\n        // Third preference: reflective type adapter for the runtime type\r\n        //                   (if it is a subclass of the declared type)\r\n        // Fourth preference: reflective type adapter for the declared type\r\n        TypeAdapter<T> chosen = delegate;\r\n        Type runtimeType = getRuntimeTypeIfMoreSpecific(type, value);\r\n        if (runtimeType != type) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> runtimeTypeAdapter = (TypeAdapter<T>) context.getAdapter(TypeToken.get(runtimeType));\r\n            // For backward compatibility only check ReflectiveTypeAdapterFactory.Adapter here but not any\r\n            // other wrapping adapters, see\r\n            // https://github.com/google/gson/pull/1787#issuecomment-1222175189\r\n            if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\r\n                // The user registered a type adapter for the runtime type, so we will use that\r\n                chosen = runtimeTypeAdapter;\r\n            } else if (!isReflective(delegate)) {\r\n                // The user registered a type adapter for Base class, so we prefer it over the\r\n                // reflective type adapter for the runtime type\r\n                chosen = delegate;\r\n            } else {\r\n                // Use the type adapter for runtime type\r\n                chosen = runtimeTypeAdapter;\r\n            }\r\n        }\r\n        chosen.write(out, value);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the type adapter uses reflection.\r\n     *\r\n     * @param typeAdapter the type adapter to check.\r\n     */\r\n    private static boolean isReflective(TypeAdapter<?> typeAdapter) {\r\n        // Run this in loop in case multiple delegating adapters are nested\r\n        while (typeAdapter instanceof SerializationDelegatingTypeAdapter) {\r\n            TypeAdapter<?> delegate = ((SerializationDelegatingTypeAdapter<?>) typeAdapter).getSerializationDelegate();\r\n            // Break if adapter does not delegate serialization\r\n            if (delegate == typeAdapter) {\r\n                break;\r\n            }\r\n            typeAdapter = delegate;\r\n        }\r\n        return typeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter;\r\n    }\r\n\r\n    /**\r\n     * Finds a compatible runtime type if it is more specific\r\n     */\r\n    private static Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\r\n        if (value != null && (type instanceof Class<?> || type instanceof TypeVariable<?>)) {\r\n            type = value.getClass();\r\n        }\r\n        return type;\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "field",
    "name": "context",
    "start_line": 28,
    "end_line": 28,
    "code": "private final Gson context;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "field",
    "name": "delegate",
    "start_line": 29,
    "end_line": 29,
    "code": "private final TypeAdapter<T> delegate;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "field",
    "name": "type",
    "start_line": 30,
    "end_line": 30,
    "code": "private final Type type;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "constructor",
    "name": "TypeAdapterRuntimeTypeWrapper",
    "start_line": 32,
    "end_line": 36,
    "code": "TypeAdapterRuntimeTypeWrapper(Gson context, TypeAdapter<T> delegate, Type type) {\r\n    this.context = context;\r\n    this.delegate = delegate;\r\n    this.type = type;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "method",
    "name": "read",
    "start_line": 38,
    "end_line": 41,
    "code": "@Override\r\npublic T read(JsonReader in) throws IOException {\r\n    return delegate.read(in);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "method",
    "name": "write",
    "start_line": 43,
    "end_line": 74,
    "code": "@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    // Order of preference for choosing type adapters\r\n    // First preference: a type adapter registered for the runtime type\r\n    // Second preference: a type adapter registered for the declared type\r\n    // Third preference: reflective type adapter for the runtime type\r\n    //                   (if it is a subclass of the declared type)\r\n    // Fourth preference: reflective type adapter for the declared type\r\n    TypeAdapter<T> chosen = delegate;\r\n    Type runtimeType = getRuntimeTypeIfMoreSpecific(type, value);\r\n    if (runtimeType != type) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        TypeAdapter<T> runtimeTypeAdapter = (TypeAdapter<T>) context.getAdapter(TypeToken.get(runtimeType));\r\n        // For backward compatibility only check ReflectiveTypeAdapterFactory.Adapter here but not any\r\n        // other wrapping adapters, see\r\n        // https://github.com/google/gson/pull/1787#issuecomment-1222175189\r\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\r\n            // The user registered a type adapter for the runtime type, so we will use that\r\n            chosen = runtimeTypeAdapter;\r\n        } else if (!isReflective(delegate)) {\r\n            // The user registered a type adapter for Base class, so we prefer it over the\r\n            // reflective type adapter for the runtime type\r\n            chosen = delegate;\r\n        } else {\r\n            // Use the type adapter for runtime type\r\n            chosen = runtimeTypeAdapter;\r\n        }\r\n    }\r\n    chosen.write(out, value);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "method",
    "name": "isReflective",
    "start_line": 81,
    "end_line": 94,
    "code": "/**\r\n * Returns whether the type adapter uses reflection.\r\n *\r\n * @param typeAdapter the type adapter to check.\r\n */\r\nprivate static boolean isReflective(TypeAdapter<?> typeAdapter) {\r\n    // Run this in loop in case multiple delegating adapters are nested\r\n    while (typeAdapter instanceof SerializationDelegatingTypeAdapter) {\r\n        TypeAdapter<?> delegate = ((SerializationDelegatingTypeAdapter<?>) typeAdapter).getSerializationDelegate();\r\n        // Break if adapter does not delegate serialization\r\n        if (delegate == typeAdapter) {\r\n            break;\r\n        }\r\n        typeAdapter = delegate;\r\n    }\r\n    return typeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  },
  {
    "type": "method",
    "name": "getRuntimeTypeIfMoreSpecific",
    "start_line": 97,
    "end_line": 102,
    "code": "/**\r\n * Finds a compatible runtime type if it is more specific\r\n */\r\nprivate static Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\r\n    if (value != null && (type instanceof Class<?> || type instanceof TypeVariable<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TypeAdapterRuntimeTypeWrapper.java"
  }
]