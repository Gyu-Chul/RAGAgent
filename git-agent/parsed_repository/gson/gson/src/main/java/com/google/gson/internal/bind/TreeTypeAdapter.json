[
  {
    "type": "package",
    "name": "com.google.gson.internal.bind",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.internal.bind;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Streams",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.internal.Streams;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "class",
    "name": "TreeTypeAdapter",
    "start_line": 41,
    "end_line": 209,
    "code": "/**\r\n * Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter. Since the tree adapter may be\r\n * serialization-only or deserialization-only, this class has a facility to look up a delegate type\r\n * adapter on demand.\r\n */\r\npublic final class TreeTypeAdapter<T> extends SerializationDelegatingTypeAdapter<T> {\r\n\r\n    private final JsonSerializer<T> serializer;\r\n\r\n    private final JsonDeserializer<T> deserializer;\r\n\r\n    final Gson gson;\r\n\r\n    private final TypeToken<T> typeToken;\r\n\r\n    /**\r\n     * Only intended as {@code skipPast} for {@link Gson#getDelegateAdapter(TypeAdapterFactory,\r\n     * TypeToken)}, must not be used in any other way.\r\n     */\r\n    private final TypeAdapterFactory skipPastForGetDelegateAdapter;\r\n\r\n    private final GsonContextImpl context = new GsonContextImpl();\r\n\r\n    private final boolean nullSafe;\r\n\r\n    /**\r\n     * The delegate is lazily created because it may not be needed, and creating it may fail. Field\r\n     * has to be {@code volatile} because {@link Gson} guarantees to be thread-safe.\r\n     */\r\n    private volatile TypeAdapter<T> delegate;\r\n\r\n    public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer, Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast, boolean nullSafe) {\r\n        this.serializer = serializer;\r\n        this.deserializer = deserializer;\r\n        this.gson = gson;\r\n        this.typeToken = typeToken;\r\n        this.skipPastForGetDelegateAdapter = skipPast;\r\n        this.nullSafe = nullSafe;\r\n    }\r\n\r\n    public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer, Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\r\n        this(serializer, deserializer, gson, typeToken, skipPast, true);\r\n    }\r\n\r\n    @Override\r\n    public T read(JsonReader in) throws IOException {\r\n        if (deserializer == null) {\r\n            return delegate().read(in);\r\n        }\r\n        JsonElement value = Streams.parse(in);\r\n        if (nullSafe && value.isJsonNull()) {\r\n            return null;\r\n        }\r\n        return deserializer.deserialize(value, typeToken.getType(), context);\r\n    }\r\n\r\n    @Override\r\n    public void write(JsonWriter out, T value) throws IOException {\r\n        if (serializer == null) {\r\n            delegate().write(out, value);\r\n            return;\r\n        }\r\n        if (nullSafe && value == null) {\r\n            out.nullValue();\r\n            return;\r\n        }\r\n        JsonElement tree = serializer.serialize(value, typeToken.getType(), context);\r\n        Streams.write(tree, out);\r\n    }\r\n\r\n    private TypeAdapter<T> delegate() {\r\n        // A race might lead to `delegate` being assigned by multiple threads but the last assignment\r\n        // will stick\r\n        TypeAdapter<T> d = delegate;\r\n        if (d == null) {\r\n            d = delegate = gson.getDelegateAdapter(skipPastForGetDelegateAdapter, typeToken);\r\n        }\r\n        return d;\r\n    }\r\n\r\n    /**\r\n     * Returns the type adapter which is used for serialization. Returns {@code this} if this {@code\r\n     * TreeTypeAdapter} has a {@link #serializer}; otherwise returns the delegate.\r\n     */\r\n    @Override\r\n    public TypeAdapter<T> getSerializationDelegate() {\r\n        return serializer != null ? this : delegate();\r\n    }\r\n\r\n    /**\r\n     * Returns a new factory that will match each type against {@code exactType}.\r\n     */\r\n    public static TypeAdapterFactory newFactory(TypeToken<?> exactType, Object typeAdapter) {\r\n        return new SingleTypeFactory(typeAdapter, exactType, false, null);\r\n    }\r\n\r\n    /**\r\n     * Returns a new factory that will match each type and its raw type against {@code exactType}.\r\n     */\r\n    public static TypeAdapterFactory newFactoryWithMatchRawType(TypeToken<?> exactType, Object typeAdapter) {\r\n        // only bother matching raw types if exact type is a raw type\r\n        boolean matchRawType = exactType.getType() == exactType.getRawType();\r\n        return new SingleTypeFactory(typeAdapter, exactType, matchRawType, null);\r\n    }\r\n\r\n    /**\r\n     * Returns a new factory that will match each type's raw type for assignability to {@code\r\n     * hierarchyType}.\r\n     */\r\n    public static TypeAdapterFactory newTypeHierarchyFactory(Class<?> hierarchyType, Object typeAdapter) {\r\n        return new SingleTypeFactory(typeAdapter, null, false, hierarchyType);\r\n    }\r\n\r\n    private static final class SingleTypeFactory implements TypeAdapterFactory {\r\n\r\n        private final TypeToken<?> exactType;\r\n\r\n        private final boolean matchRawType;\r\n\r\n        private final Class<?> hierarchyType;\r\n\r\n        private final JsonSerializer<?> serializer;\r\n\r\n        private final JsonDeserializer<?> deserializer;\r\n\r\n        SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType, Class<?> hierarchyType) {\r\n            serializer = typeAdapter instanceof JsonSerializer ? (JsonSerializer<?>) typeAdapter : null;\r\n            deserializer = typeAdapter instanceof JsonDeserializer ? (JsonDeserializer<?>) typeAdapter : null;\r\n            if (serializer == null && deserializer == null) {\r\n                Objects.requireNonNull(typeAdapter);\r\n                throw new IllegalArgumentException(\"Type adapter \" + typeAdapter.getClass().getName() + \" must implement JsonSerializer or JsonDeserializer\");\r\n            }\r\n            this.exactType = exactType;\r\n            this.matchRawType = matchRawType;\r\n            this.hierarchyType = hierarchyType;\r\n        }\r\n\r\n        // guarded by typeToken.equals() call\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            boolean matches = exactType != null ? exactType.equals(type) || (matchRawType && exactType.getType() == type.getRawType()) : hierarchyType.isAssignableFrom(type.getRawType());\r\n            return matches ? new TreeTypeAdapter<>((JsonSerializer<T>) serializer, (JsonDeserializer<T>) deserializer, gson, type, this) : null;\r\n        }\r\n    }\r\n\r\n    private final class GsonContextImpl implements JsonSerializationContext, JsonDeserializationContext {\r\n\r\n        @Override\r\n        public JsonElement serialize(Object src) {\r\n            return gson.toJsonTree(src);\r\n        }\r\n\r\n        @Override\r\n        public JsonElement serialize(Object src, Type typeOfSrc) {\r\n            return gson.toJsonTree(src, typeOfSrc);\r\n        }\r\n\r\n        @Override\r\n        @SuppressWarnings(\"TypeParameterUnusedInFormals\")\r\n        public <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n            return gson.fromJson(json, typeOfT);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "serializer",
    "start_line": 42,
    "end_line": 42,
    "code": "private final JsonSerializer<T> serializer;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "deserializer",
    "start_line": 43,
    "end_line": 43,
    "code": "private final JsonDeserializer<T> deserializer;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 44,
    "end_line": 44,
    "code": "final Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "typeToken",
    "start_line": 45,
    "end_line": 45,
    "code": "private final TypeToken<T> typeToken;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "skipPastForGetDelegateAdapter",
    "start_line": 51,
    "end_line": 51,
    "code": "/**\r\n * Only intended as {@code skipPast} for {@link Gson#getDelegateAdapter(TypeAdapterFactory,\r\n * TypeToken)}, must not be used in any other way.\r\n */\r\nprivate final TypeAdapterFactory skipPastForGetDelegateAdapter;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "context",
    "start_line": 53,
    "end_line": 53,
    "code": "private final GsonContextImpl context = new GsonContextImpl();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "nullSafe",
    "start_line": 54,
    "end_line": 54,
    "code": "private final boolean nullSafe;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "field",
    "name": "delegate",
    "start_line": 60,
    "end_line": 60,
    "code": "/**\r\n * The delegate is lazily created because it may not be needed, and creating it may fail. Field\r\n * has to be {@code volatile} because {@link Gson} guarantees to be thread-safe.\r\n */\r\nprivate volatile TypeAdapter<T> delegate;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "constructor",
    "name": "TreeTypeAdapter",
    "start_line": 62,
    "end_line": 75,
    "code": "public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer, Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast, boolean nullSafe) {\r\n    this.serializer = serializer;\r\n    this.deserializer = deserializer;\r\n    this.gson = gson;\r\n    this.typeToken = typeToken;\r\n    this.skipPastForGetDelegateAdapter = skipPast;\r\n    this.nullSafe = nullSafe;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "constructor",
    "name": "TreeTypeAdapter",
    "start_line": 77,
    "end_line": 84,
    "code": "public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer, Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\r\n    this(serializer, deserializer, gson, typeToken, skipPast, true);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "read",
    "start_line": 86,
    "end_line": 96,
    "code": "@Override\r\npublic T read(JsonReader in) throws IOException {\r\n    if (deserializer == null) {\r\n        return delegate().read(in);\r\n    }\r\n    JsonElement value = Streams.parse(in);\r\n    if (nullSafe && value.isJsonNull()) {\r\n        return null;\r\n    }\r\n    return deserializer.deserialize(value, typeToken.getType(), context);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "write",
    "start_line": 98,
    "end_line": 110,
    "code": "@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (serializer == null) {\r\n        delegate().write(out, value);\r\n        return;\r\n    }\r\n    if (nullSafe && value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    JsonElement tree = serializer.serialize(value, typeToken.getType(), context);\r\n    Streams.write(tree, out);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "delegate",
    "start_line": 112,
    "end_line": 120,
    "code": "private TypeAdapter<T> delegate() {\r\n    // A race might lead to `delegate` being assigned by multiple threads but the last assignment\r\n    // will stick\r\n    TypeAdapter<T> d = delegate;\r\n    if (d == null) {\r\n        d = delegate = gson.getDelegateAdapter(skipPastForGetDelegateAdapter, typeToken);\r\n    }\r\n    return d;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "getSerializationDelegate",
    "start_line": 126,
    "end_line": 129,
    "code": "/**\r\n * Returns the type adapter which is used for serialization. Returns {@code this} if this {@code\r\n * TreeTypeAdapter} has a {@link #serializer}; otherwise returns the delegate.\r\n */\r\n@Override\r\npublic TypeAdapter<T> getSerializationDelegate() {\r\n    return serializer != null ? this : delegate();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "newFactory",
    "start_line": 132,
    "end_line": 134,
    "code": "/**\r\n * Returns a new factory that will match each type against {@code exactType}.\r\n */\r\npublic static TypeAdapterFactory newFactory(TypeToken<?> exactType, Object typeAdapter) {\r\n    return new SingleTypeFactory(typeAdapter, exactType, false, null);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "newFactoryWithMatchRawType",
    "start_line": 137,
    "end_line": 142,
    "code": "/**\r\n * Returns a new factory that will match each type and its raw type against {@code exactType}.\r\n */\r\npublic static TypeAdapterFactory newFactoryWithMatchRawType(TypeToken<?> exactType, Object typeAdapter) {\r\n    // only bother matching raw types if exact type is a raw type\r\n    boolean matchRawType = exactType.getType() == exactType.getRawType();\r\n    return new SingleTypeFactory(typeAdapter, exactType, matchRawType, null);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  },
  {
    "type": "method",
    "name": "newTypeHierarchyFactory",
    "start_line": 148,
    "end_line": 151,
    "code": "/**\r\n * Returns a new factory that will match each type's raw type for assignability to {@code\r\n * hierarchyType}.\r\n */\r\npublic static TypeAdapterFactory newTypeHierarchyFactory(Class<?> hierarchyType, Object typeAdapter) {\r\n    return new SingleTypeFactory(typeAdapter, null, false, hierarchyType);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\internal\\bind\\TreeTypeAdapter.java"
  }
]