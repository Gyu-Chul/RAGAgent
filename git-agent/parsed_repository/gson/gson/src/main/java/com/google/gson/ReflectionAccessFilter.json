[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.ReflectionAccessFilterHelper",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.internal.ReflectionAccessFilterHelper;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.AccessibleObject",
    "start_line": 20,
    "end_line": 20,
    "code": "import java.lang.reflect.AccessibleObject;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "interface",
    "name": "ReflectionAccessFilter",
    "start_line": 45,
    "end_line": 228,
    "code": "/**\r\n * Filter for determining whether reflection based serialization and deserialization is allowed for\r\n * a class.\r\n *\r\n * <p>A filter can be useful in multiple scenarios, for example when upgrading to newer Java\r\n * versions which use the Java Platform Module System (JPMS). A filter then allows to {@linkplain\r\n * FilterResult#BLOCK_INACCESSIBLE prevent making inaccessible members accessible}, even if the used\r\n * Java version might still allow illegal access (but logs a warning), or if {@code java} command\r\n * line arguments are used to open the inaccessible packages to other parts of the application. This\r\n * interface defines some convenience filters for this task, such as {@link\r\n * #BLOCK_INACCESSIBLE_JAVA}.\r\n *\r\n * <p>A filter can also be useful to prevent mixing model classes of a project with other non-model\r\n * classes; the filter could {@linkplain FilterResult#BLOCK_ALL block all reflective access} to\r\n * non-model classes.\r\n *\r\n * <p>A reflection access filter is similar to an {@link ExclusionStrategy} with the major\r\n * difference that a filter will cause an exception to be thrown when access is disallowed while an\r\n * exclusion strategy just skips fields and classes.\r\n *\r\n * @see GsonBuilder#addReflectionAccessFilter(ReflectionAccessFilter)\r\n * @since 2.9.1\r\n */\r\npublic interface ReflectionAccessFilter {\r\n\r\n    /**\r\n     * Result of a filter check.\r\n     *\r\n     * @since 2.9.1\r\n     */\r\n    enum FilterResult {\r\n\r\n        /**\r\n         * Reflection access for the class is allowed.\r\n         *\r\n         * <p>Note that this does not affect the Java access checks in any way, it only permits Gson to\r\n         * try using reflection for a class. The Java runtime might still deny such access.\r\n         */\r\n        ALLOW,\r\n        /**\r\n         * The filter is indecisive whether reflection access should be allowed. The next registered\r\n         * filter will be consulted to get the result. If there is no next filter, this result acts like\r\n         * {@link #ALLOW}.\r\n         */\r\n        INDECISIVE,\r\n        /**\r\n         * Blocks reflection access if a member of the class is not accessible by default and would have\r\n         * to be made accessible. This is unaffected by any {@code java} command line arguments being\r\n         * used to make packages accessible, or by module declaration directives which <i>open</i> the\r\n         * complete module or certain packages for reflection and will consider such packages\r\n         * inaccessible.\r\n         *\r\n         * <p>Note that this <b>only works for Java 9 and higher</b>, for older Java versions its\r\n         * functionality will be limited and it might behave like {@link #ALLOW}. Access checks are only\r\n         * performed as defined by the Java Language Specification (<a\r\n         * href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-6.6\">JLS 11\r\n         * &sect;6.6</a>), restrictions imposed by a {@link SecurityManager} are not considered.\r\n         *\r\n         * <p>This result type is mainly intended to help enforce the access checks of the Java Platform\r\n         * Module System. It allows detecting illegal access, even if the used Java version would only\r\n         * log a warning, or is configured to open packages for reflection using command line arguments.\r\n         *\r\n         * @see AccessibleObject#canAccess(Object)\r\n         */\r\n        BLOCK_INACCESSIBLE,\r\n        /**\r\n         * Blocks all reflection access for the class. Other means for serializing and deserializing the\r\n         * class, such as a {@link TypeAdapter}, have to be used.\r\n         */\r\n        BLOCK_ALL\r\n    }\r\n\r\n    /**\r\n     * Blocks all reflection access to members of standard Java classes which are not accessible by\r\n     * default. However, reflection access is still allowed for classes for which all fields are\r\n     * accessible and which have an accessible no-args constructor (or for which an {@link\r\n     * InstanceCreator} has been registered).\r\n     *\r\n     * <p>If this filter encounters a class other than a standard Java class it returns {@link\r\n     * FilterResult#INDECISIVE}.\r\n     *\r\n     * <p>This filter is mainly intended to help enforcing the access checks of Java Platform Module\r\n     * System. It allows detecting illegal access, even if the used Java version would only log a\r\n     * warning, or is configured to open packages for reflection. However, this filter <b>only works\r\n     * for Java 9 and higher</b>, when using an older Java version its functionality will be limited.\r\n     *\r\n     * <p>Note that this filter might not cover all standard Java classes. Currently only classes in a\r\n     * {@code java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n     * expanded in the future without prior notice.\r\n     *\r\n     * @see FilterResult#BLOCK_INACCESSIBLE\r\n     */\r\n    ReflectionAccessFilter BLOCK_INACCESSIBLE_JAVA = new ReflectionAccessFilter() {\r\n\r\n        @Override\r\n        public FilterResult check(Class<?> rawClass) {\r\n            return ReflectionAccessFilterHelper.isJavaType(rawClass) ? FilterResult.BLOCK_INACCESSIBLE : FilterResult.INDECISIVE;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReflectionAccessFilter#BLOCK_INACCESSIBLE_JAVA\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Blocks all reflection access to members of standard Java classes.\r\n     *\r\n     * <p>If this filter encounters a class other than a standard Java class it returns {@link\r\n     * FilterResult#INDECISIVE}.\r\n     *\r\n     * <p>This filter is mainly intended to prevent depending on implementation details of the Java\r\n     * platform and to help applications prepare for upgrading to the Java Platform Module System.\r\n     *\r\n     * <p>Note that this filter might not cover all standard Java classes. Currently only classes in a\r\n     * {@code java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n     * expanded in the future without prior notice.\r\n     *\r\n     * @see #BLOCK_INACCESSIBLE_JAVA\r\n     * @see FilterResult#BLOCK_ALL\r\n     */\r\n    ReflectionAccessFilter BLOCK_ALL_JAVA = new ReflectionAccessFilter() {\r\n\r\n        @Override\r\n        public FilterResult check(Class<?> rawClass) {\r\n            return ReflectionAccessFilterHelper.isJavaType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReflectionAccessFilter#BLOCK_ALL_JAVA\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Blocks all reflection access to members of standard Android classes.\r\n     *\r\n     * <p>If this filter encounters a class other than a standard Android class it returns {@link\r\n     * FilterResult#INDECISIVE}.\r\n     *\r\n     * <p>This filter is mainly intended to prevent depending on implementation details of the Android\r\n     * platform.\r\n     *\r\n     * <p>Note that this filter might not cover all standard Android classes. Currently only classes\r\n     * in an {@code android.*} or {@code androidx.*} package, and standard Java classes in a {@code\r\n     * java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n     * expanded in the future without prior notice.\r\n     *\r\n     * @see FilterResult#BLOCK_ALL\r\n     */\r\n    ReflectionAccessFilter BLOCK_ALL_ANDROID = new ReflectionAccessFilter() {\r\n\r\n        @Override\r\n        public FilterResult check(Class<?> rawClass) {\r\n            return ReflectionAccessFilterHelper.isAndroidType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReflectionAccessFilter#BLOCK_ALL_ANDROID\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Blocks all reflection access to members of classes belonging to programming language platforms,\r\n     * such as Java, Android, Kotlin or Scala.\r\n     *\r\n     * <p>If this filter encounters a class other than a standard platform class it returns {@link\r\n     * FilterResult#INDECISIVE}.\r\n     *\r\n     * <p>This filter is mainly intended to prevent depending on implementation details of the\r\n     * platform classes.\r\n     *\r\n     * <p>Note that this filter might not cover all platform classes. Currently it combines the\r\n     * filters {@link #BLOCK_ALL_JAVA} and {@link #BLOCK_ALL_ANDROID}, and checks for other\r\n     * language-specific platform classes like {@code kotlin.*}. The set of detected classes might be\r\n     * expanded in the future without prior notice.\r\n     *\r\n     * @see FilterResult#BLOCK_ALL\r\n     */\r\n    ReflectionAccessFilter BLOCK_ALL_PLATFORM = new ReflectionAccessFilter() {\r\n\r\n        @Override\r\n        public FilterResult check(Class<?> rawClass) {\r\n            return ReflectionAccessFilterHelper.isAnyPlatformType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"ReflectionAccessFilter#BLOCK_ALL_PLATFORM\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if reflection access should be allowed for a class.\r\n     *\r\n     * @param rawClass Class to check\r\n     * @return Result indicating whether reflection access is allowed\r\n     */\r\n    FilterResult check(Class<?> rawClass);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "field",
    "name": "BLOCK_INACCESSIBLE_JAVA",
    "start_line": 112,
    "end_line": 125,
    "code": "/**\r\n * Blocks all reflection access to members of standard Java classes which are not accessible by\r\n * default. However, reflection access is still allowed for classes for which all fields are\r\n * accessible and which have an accessible no-args constructor (or for which an {@link\r\n * InstanceCreator} has been registered).\r\n *\r\n * <p>If this filter encounters a class other than a standard Java class it returns {@link\r\n * FilterResult#INDECISIVE}.\r\n *\r\n * <p>This filter is mainly intended to help enforcing the access checks of Java Platform Module\r\n * System. It allows detecting illegal access, even if the used Java version would only log a\r\n * warning, or is configured to open packages for reflection. However, this filter <b>only works\r\n * for Java 9 and higher</b>, when using an older Java version its functionality will be limited.\r\n *\r\n * <p>Note that this filter might not cover all standard Java classes. Currently only classes in a\r\n * {@code java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n * expanded in the future without prior notice.\r\n *\r\n * @see FilterResult#BLOCK_INACCESSIBLE\r\n */\r\nReflectionAccessFilter BLOCK_INACCESSIBLE_JAVA = new ReflectionAccessFilter() {\r\n\r\n    @Override\r\n    public FilterResult check(Class<?> rawClass) {\r\n        return ReflectionAccessFilterHelper.isJavaType(rawClass) ? FilterResult.BLOCK_INACCESSIBLE : FilterResult.INDECISIVE;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ReflectionAccessFilter#BLOCK_INACCESSIBLE_JAVA\";\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "field",
    "name": "BLOCK_ALL_JAVA",
    "start_line": 143,
    "end_line": 156,
    "code": "/**\r\n * Blocks all reflection access to members of standard Java classes.\r\n *\r\n * <p>If this filter encounters a class other than a standard Java class it returns {@link\r\n * FilterResult#INDECISIVE}.\r\n *\r\n * <p>This filter is mainly intended to prevent depending on implementation details of the Java\r\n * platform and to help applications prepare for upgrading to the Java Platform Module System.\r\n *\r\n * <p>Note that this filter might not cover all standard Java classes. Currently only classes in a\r\n * {@code java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n * expanded in the future without prior notice.\r\n *\r\n * @see #BLOCK_INACCESSIBLE_JAVA\r\n * @see FilterResult#BLOCK_ALL\r\n */\r\nReflectionAccessFilter BLOCK_ALL_JAVA = new ReflectionAccessFilter() {\r\n\r\n    @Override\r\n    public FilterResult check(Class<?> rawClass) {\r\n        return ReflectionAccessFilterHelper.isJavaType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ReflectionAccessFilter#BLOCK_ALL_JAVA\";\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "field",
    "name": "BLOCK_ALL_ANDROID",
    "start_line": 174,
    "end_line": 187,
    "code": "/**\r\n * Blocks all reflection access to members of standard Android classes.\r\n *\r\n * <p>If this filter encounters a class other than a standard Android class it returns {@link\r\n * FilterResult#INDECISIVE}.\r\n *\r\n * <p>This filter is mainly intended to prevent depending on implementation details of the Android\r\n * platform.\r\n *\r\n * <p>Note that this filter might not cover all standard Android classes. Currently only classes\r\n * in an {@code android.*} or {@code androidx.*} package, and standard Java classes in a {@code\r\n * java.*} or {@code javax.*} package are considered. The set of detected classes might be\r\n * expanded in the future without prior notice.\r\n *\r\n * @see FilterResult#BLOCK_ALL\r\n */\r\nReflectionAccessFilter BLOCK_ALL_ANDROID = new ReflectionAccessFilter() {\r\n\r\n    @Override\r\n    public FilterResult check(Class<?> rawClass) {\r\n        return ReflectionAccessFilterHelper.isAndroidType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ReflectionAccessFilter#BLOCK_ALL_ANDROID\";\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "field",
    "name": "BLOCK_ALL_PLATFORM",
    "start_line": 206,
    "end_line": 219,
    "code": "/**\r\n * Blocks all reflection access to members of classes belonging to programming language platforms,\r\n * such as Java, Android, Kotlin or Scala.\r\n *\r\n * <p>If this filter encounters a class other than a standard platform class it returns {@link\r\n * FilterResult#INDECISIVE}.\r\n *\r\n * <p>This filter is mainly intended to prevent depending on implementation details of the\r\n * platform classes.\r\n *\r\n * <p>Note that this filter might not cover all platform classes. Currently it combines the\r\n * filters {@link #BLOCK_ALL_JAVA} and {@link #BLOCK_ALL_ANDROID}, and checks for other\r\n * language-specific platform classes like {@code kotlin.*}. The set of detected classes might be\r\n * expanded in the future without prior notice.\r\n *\r\n * @see FilterResult#BLOCK_ALL\r\n */\r\nReflectionAccessFilter BLOCK_ALL_PLATFORM = new ReflectionAccessFilter() {\r\n\r\n    @Override\r\n    public FilterResult check(Class<?> rawClass) {\r\n        return ReflectionAccessFilterHelper.isAnyPlatformType(rawClass) ? FilterResult.BLOCK_ALL : FilterResult.INDECISIVE;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ReflectionAccessFilter#BLOCK_ALL_PLATFORM\";\r\n    }\r\n};",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  },
  {
    "type": "method",
    "name": "check",
    "start_line": 227,
    "end_line": 227,
    "code": "/**\r\n * Checks if reflection access should be allowed for a class.\r\n *\r\n * @param rawClass Class to check\r\n * @return Result indicating whether reflection access is allowed\r\n */\r\nFilterResult check(Class<?> rawClass);",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\ReflectionAccessFilter.java"
  }
]