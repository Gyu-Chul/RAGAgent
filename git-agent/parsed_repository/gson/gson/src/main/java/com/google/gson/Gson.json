[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.JsonAdapter",
    "start_line": 19,
    "end_line": 19,
    "code": "import com.google.gson.annotations.JsonAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.ConstructorConstructor",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.internal.ConstructorConstructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Excluder",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.internal.Excluder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.GsonBuildConfig",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.internal.GsonBuildConfig;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.LazilyParsedNumber",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.internal.LazilyParsedNumber;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Primitives",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.internal.Primitives;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.Streams",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.internal.Streams;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.ArrayTypeAdapter",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.internal.bind.ArrayTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.CollectionTypeAdapterFactory",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.internal.bind.CollectionTypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.DefaultDateTypeAdapter",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.internal.bind.DefaultDateTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
    "start_line": 29,
    "end_line": 29,
    "code": "import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.JsonTreeReader",
    "start_line": 30,
    "end_line": 30,
    "code": "import com.google.gson.internal.bind.JsonTreeReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.JsonTreeWriter",
    "start_line": 31,
    "end_line": 31,
    "code": "import com.google.gson.internal.bind.JsonTreeWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.MapTypeAdapterFactory",
    "start_line": 32,
    "end_line": 32,
    "code": "import com.google.gson.internal.bind.MapTypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.NumberTypeAdapter",
    "start_line": 33,
    "end_line": 33,
    "code": "import com.google.gson.internal.bind.NumberTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.ObjectTypeAdapter",
    "start_line": 34,
    "end_line": 34,
    "code": "import com.google.gson.internal.bind.ObjectTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
    "start_line": 35,
    "end_line": 35,
    "code": "import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter",
    "start_line": 36,
    "end_line": 36,
    "code": "import com.google.gson.internal.bind.SerializationDelegatingTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.bind.TypeAdapters",
    "start_line": 37,
    "end_line": 37,
    "code": "import com.google.gson.internal.bind.TypeAdapters;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.internal.sql.SqlTypesSupport",
    "start_line": 38,
    "end_line": 38,
    "code": "import com.google.gson.internal.sql.SqlTypesSupport;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 39,
    "end_line": 39,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 40,
    "end_line": 40,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonToken",
    "start_line": 41,
    "end_line": 41,
    "code": "import com.google.gson.stream.JsonToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 42,
    "end_line": 42,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.MalformedJsonException",
    "start_line": 43,
    "end_line": 43,
    "code": "import com.google.gson.stream.MalformedJsonException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.io.EOFException",
    "start_line": 44,
    "end_line": 44,
    "code": "import java.io.EOFException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 45,
    "end_line": 45,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.io.Reader",
    "start_line": 46,
    "end_line": 46,
    "code": "import java.io.Reader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 47,
    "end_line": 47,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.io.Writer",
    "start_line": 48,
    "end_line": 48,
    "code": "import java.io.Writer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 49,
    "end_line": 49,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.math.BigDecimal",
    "start_line": 50,
    "end_line": 50,
    "code": "import java.math.BigDecimal;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.math.BigInteger",
    "start_line": 51,
    "end_line": 51,
    "code": "import java.math.BigInteger;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.text.DateFormat",
    "start_line": 52,
    "end_line": 52,
    "code": "import java.text.DateFormat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.ArrayList",
    "start_line": 53,
    "end_line": 53,
    "code": "import java.util.ArrayList;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.Collections",
    "start_line": 54,
    "end_line": 54,
    "code": "import java.util.Collections;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.HashMap",
    "start_line": 55,
    "end_line": 55,
    "code": "import java.util.HashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 56,
    "end_line": 56,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 57,
    "end_line": 57,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 58,
    "end_line": 58,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.concurrent.ConcurrentHashMap",
    "start_line": 59,
    "end_line": 59,
    "code": "import java.util.concurrent.ConcurrentHashMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.concurrent.ConcurrentMap",
    "start_line": 60,
    "end_line": 60,
    "code": "import java.util.concurrent.ConcurrentMap;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.concurrent.atomic.AtomicLong",
    "start_line": 61,
    "end_line": 61,
    "code": "import java.util.concurrent.atomic.AtomicLong;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "import",
    "name": "java.util.concurrent.atomic.AtomicLongArray",
    "start_line": 62,
    "end_line": 62,
    "code": "import java.util.concurrent.atomic.AtomicLongArray;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "class",
    "name": "Gson",
    "start_line": 150,
    "end_line": 1543,
    "code": "/**\r\n * This is the main class for using Gson. Gson is typically used by first constructing a Gson\r\n * instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)} methods on\r\n * it. Gson instances are Thread-safe so you can reuse them freely across multiple threads.\r\n *\r\n * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration is\r\n * all you need. You can also use {@link GsonBuilder} to build a Gson instance with various\r\n * configuration options such as versioning support, pretty printing, custom newline, custom indent,\r\n * custom {@link JsonSerializer}s, {@link JsonDeserializer}s, and {@link InstanceCreator}s.\r\n *\r\n * <p>Here is an example of how Gson is used for a simple Class:\r\n *\r\n * <pre>\r\n * Gson gson = new Gson(); // Or use new GsonBuilder().create();\r\n * MyType target = new MyType();\r\n * String json = gson.toJson(target); // serializes target to JSON\r\n * MyType target2 = gson.fromJson(json, MyType.class); // deserializes json into target2\r\n * </pre>\r\n *\r\n * <p>If the type of the object that you are converting is a {@code ParameterizedType} (i.e. has at\r\n * least one type argument, for example {@code List<MyType>}) then for deserialization you must use\r\n * a {@code fromJson} method with {@link Type} or {@link TypeToken} parameter to specify the\r\n * parameterized type. For serialization specifying a {@code Type} or {@code TypeToken} is optional,\r\n * otherwise Gson will use the runtime type of the object. {@link TypeToken} is a class provided by\r\n * Gson which helps creating parameterized types. Here is an example showing how this can be done:\r\n *\r\n * <pre>\r\n * TypeToken&lt;List&lt;MyType&gt;&gt; listType = new TypeToken&lt;List&lt;MyType&gt;&gt;() {};\r\n * List&lt;MyType&gt; target = new LinkedList&lt;MyType&gt;();\r\n * target.add(new MyType(1, \"abc\"));\r\n *\r\n * Gson gson = new Gson();\r\n * // For serialization you normally do not have to specify the type, Gson will use\r\n * // the runtime type of the objects, however you can also specify it explicitly\r\n * String json = gson.toJson(target, listType.getType());\r\n *\r\n * // But for deserialization you have to specify the type\r\n * List&lt;MyType&gt; target2 = gson.fromJson(json, listType);\r\n * </pre>\r\n *\r\n * <p>See the <a href=\"https://github.com/google/gson/blob/main/UserGuide.md\">Gson User Guide</a>\r\n * for a more complete set of examples.\r\n *\r\n * <h2 id=\"default-lenient\">JSON Strictness handling</h2>\r\n *\r\n * For legacy reasons most of the {@code Gson} methods allow JSON data which does not comply with\r\n * the JSON specification when no explicit {@linkplain Strictness strictness} is set (the default).\r\n * To specify the strictness of a {@code Gson} instance, you should set it through {@link\r\n * GsonBuilder#setStrictness(Strictness)}.\r\n *\r\n * <p>For older Gson versions, which don't have the strictness mode API, the following workarounds\r\n * can be used:\r\n *\r\n * <h3>Serialization</h3>\r\n *\r\n * <ol>\r\n *   <li>Use {@link #getAdapter(Class)} to obtain the adapter for the type to be serialized\r\n *   <li>When using an existing {@code JsonWriter}, manually apply the writer settings of this\r\n *       {@code Gson} instance listed by {@link #newJsonWriter(Writer)}.<br>\r\n *       Otherwise, when not using an existing {@code JsonWriter}, use {@link\r\n *       #newJsonWriter(Writer)} to construct one.\r\n *   <li>Call {@link TypeAdapter#write(JsonWriter, Object)}\r\n * </ol>\r\n *\r\n * <h3>Deserialization</h3>\r\n *\r\n * <ol>\r\n *   <li>Use {@link #getAdapter(Class)} to obtain the adapter for the type to be deserialized\r\n *   <li>When using an existing {@code JsonReader}, manually apply the reader settings of this\r\n *       {@code Gson} instance listed by {@link #newJsonReader(Reader)}.<br>\r\n *       Otherwise, when not using an existing {@code JsonReader}, use {@link\r\n *       #newJsonReader(Reader)} to construct one.\r\n *   <li>Call {@link TypeAdapter#read(JsonReader)}\r\n *   <li>Call {@link JsonReader#peek()} and verify that the result is {@link JsonToken#END_DOCUMENT}\r\n *       to make sure there is no trailing data\r\n * </ol>\r\n *\r\n * Note that the {@code JsonReader} created this way is only 'legacy strict', it mostly adheres to\r\n * the JSON specification but allows small deviations. See {@link\r\n * JsonReader#setStrictness(Strictness)} for details.\r\n *\r\n * @see TypeToken\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n * @author Jesse Wilson\r\n */\r\npublic final class Gson {\r\n\r\n    static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\r\n\r\n    // Strictness of `null` is the legacy mode where some Gson APIs are always lenient\r\n    static final Strictness DEFAULT_STRICTNESS = null;\r\n\r\n    static final FormattingStyle DEFAULT_FORMATTING_STYLE = FormattingStyle.COMPACT;\r\n\r\n    static final boolean DEFAULT_ESCAPE_HTML = true;\r\n\r\n    static final boolean DEFAULT_SERIALIZE_NULLS = false;\r\n\r\n    static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\r\n\r\n    static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\r\n\r\n    static final boolean DEFAULT_USE_JDK_UNSAFE = true;\r\n\r\n    static final String DEFAULT_DATE_PATTERN = null;\r\n\r\n    static final FieldNamingStrategy DEFAULT_FIELD_NAMING_STRATEGY = FieldNamingPolicy.IDENTITY;\r\n\r\n    static final ToNumberStrategy DEFAULT_OBJECT_TO_NUMBER_STRATEGY = ToNumberPolicy.DOUBLE;\r\n\r\n    static final ToNumberStrategy DEFAULT_NUMBER_TO_NUMBER_STRATEGY = ToNumberPolicy.LAZILY_PARSED_NUMBER;\r\n\r\n    private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\r\n\r\n    /**\r\n     * This thread local guards against reentrant calls to {@link #getAdapter(TypeToken)}. In certain\r\n     * object graphs, creating an adapter for a type may recursively require an adapter for the same\r\n     * type! Without intervention, the recursive lookup would stack overflow. We cheat by returning a\r\n     * proxy type adapter, {@link FutureTypeAdapter}, which is wired up once the initial adapter has\r\n     * been created.\r\n     *\r\n     * <p>The map stores the type adapters for ongoing {@code getAdapter} calls, with the type token\r\n     * provided to {@code getAdapter} as key and either {@code FutureTypeAdapter} or a regular {@code\r\n     * TypeAdapter} as value.\r\n     */\r\n    @SuppressWarnings(\"ThreadLocalUsage\")\r\n    private final ThreadLocal<Map<TypeToken<?>, TypeAdapter<?>>> threadLocalAdapterResults = new ThreadLocal<>();\r\n\r\n    private final ConcurrentMap<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<>();\r\n\r\n    private final ConstructorConstructor constructorConstructor;\r\n\r\n    private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\r\n\r\n    final List<TypeAdapterFactory> factories;\r\n\r\n    final Excluder excluder;\r\n\r\n    final FieldNamingStrategy fieldNamingStrategy;\r\n\r\n    final Map<Type, InstanceCreator<?>> instanceCreators;\r\n\r\n    final boolean serializeNulls;\r\n\r\n    final boolean complexMapKeySerialization;\r\n\r\n    final boolean generateNonExecutableJson;\r\n\r\n    final boolean htmlSafe;\r\n\r\n    final FormattingStyle formattingStyle;\r\n\r\n    final Strictness strictness;\r\n\r\n    final boolean serializeSpecialFloatingPointValues;\r\n\r\n    final boolean useJdkUnsafe;\r\n\r\n    final String datePattern;\r\n\r\n    final int dateStyle;\r\n\r\n    final int timeStyle;\r\n\r\n    final LongSerializationPolicy longSerializationPolicy;\r\n\r\n    final List<TypeAdapterFactory> builderFactories;\r\n\r\n    final List<TypeAdapterFactory> builderHierarchyFactories;\r\n\r\n    final ToNumberStrategy objectToNumberStrategy;\r\n\r\n    final ToNumberStrategy numberToNumberStrategy;\r\n\r\n    final List<ReflectionAccessFilter> reflectionFilters;\r\n\r\n    /**\r\n     * Constructs a Gson object with default configuration. The default configuration has the\r\n     * following settings:\r\n     *\r\n     * <ul>\r\n     *   <li>The JSON generated by {@code toJson} methods is in compact representation. This means\r\n     *       that all the unneeded white-space is removed. You can change this behavior with {@link\r\n     *       GsonBuilder#setPrettyPrinting()}.\r\n     *   <li>When the JSON generated contains more than one line, the kind of newline and indent to\r\n     *       use can be configured with {@link GsonBuilder#setFormattingStyle(FormattingStyle)}.\r\n     *   <li>The generated JSON omits all the fields that are null. Note that nulls in arrays are kept\r\n     *       as is since an array is an ordered list. Moreover, if a field is not null, but its\r\n     *       generated JSON is empty, the field is kept. You can configure Gson to serialize null\r\n     *       values by setting {@link GsonBuilder#serializeNulls()}.\r\n     *   <li>Gson provides default serialization and deserialization for Enums, {@link Map}, {@link\r\n     *       java.net.URL}, {@link java.net.URI}, {@link java.util.Locale}, {@link java.util.Date},\r\n     *       {@link java.math.BigDecimal}, and {@link java.math.BigInteger} classes. If you would\r\n     *       prefer to change the default representation, you can do so by registering a type adapter\r\n     *       through {@link GsonBuilder#registerTypeAdapter(Type, Object)}.\r\n     *   <li>The default Date format is same as {@link java.text.DateFormat#DEFAULT}. This format\r\n     *       ignores the millisecond portion of the date during serialization. You can change this by\r\n     *       invoking {@link GsonBuilder#setDateFormat(int, int)} or {@link\r\n     *       GsonBuilder#setDateFormat(String)}.\r\n     *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation. You\r\n     *       can enable Gson to serialize/deserialize only those fields marked with this annotation\r\n     *       through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}.\r\n     *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You\r\n     *       can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.\r\n     *   <li>The default field naming policy for the output JSON is same as in Java. So, a Java class\r\n     *       field {@code versionNumber} will be output as {@code \"versionNumber\"} in JSON. The same\r\n     *       rules are applied for mapping incoming JSON to the Java classes. You can change this\r\n     *       policy through {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}.\r\n     *   <li>By default, Gson excludes {@code transient} or {@code static} fields from consideration\r\n     *       for serialization and deserialization. You can change this behavior through {@link\r\n     *       GsonBuilder#excludeFieldsWithModifiers(int...)}.\r\n     *   <li>No explicit strictness is set. You can change this by calling {@link\r\n     *       GsonBuilder#setStrictness(Strictness)}.\r\n     * </ul>\r\n     */\r\n    public Gson() {\r\n        this(Excluder.DEFAULT, DEFAULT_FIELD_NAMING_STRATEGY, Collections.emptyMap(), DEFAULT_SERIALIZE_NULLS, DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML, DEFAULT_FORMATTING_STYLE, DEFAULT_STRICTNESS, DEFAULT_SPECIALIZE_FLOAT_VALUES, DEFAULT_USE_JDK_UNSAFE, LongSerializationPolicy.DEFAULT, DEFAULT_DATE_PATTERN, DateFormat.DEFAULT, DateFormat.DEFAULT, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), DEFAULT_OBJECT_TO_NUMBER_STRATEGY, DEFAULT_NUMBER_TO_NUMBER_STRATEGY, Collections.emptyList());\r\n    }\r\n\r\n    Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy, Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls, boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe, FormattingStyle formattingStyle, Strictness strictness, boolean serializeSpecialFloatingPointValues, boolean useJdkUnsafe, LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> builderFactories, List<TypeAdapterFactory> builderHierarchyFactories, List<TypeAdapterFactory> factoriesToBeAdded, ToNumberStrategy objectToNumberStrategy, ToNumberStrategy numberToNumberStrategy, List<ReflectionAccessFilter> reflectionFilters) {\r\n        this.excluder = excluder;\r\n        this.fieldNamingStrategy = fieldNamingStrategy;\r\n        this.instanceCreators = instanceCreators;\r\n        this.constructorConstructor = new ConstructorConstructor(instanceCreators, useJdkUnsafe, reflectionFilters);\r\n        this.serializeNulls = serializeNulls;\r\n        this.complexMapKeySerialization = complexMapKeySerialization;\r\n        this.generateNonExecutableJson = generateNonExecutableGson;\r\n        this.htmlSafe = htmlSafe;\r\n        this.formattingStyle = formattingStyle;\r\n        this.strictness = strictness;\r\n        this.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;\r\n        this.useJdkUnsafe = useJdkUnsafe;\r\n        this.longSerializationPolicy = longSerializationPolicy;\r\n        this.datePattern = datePattern;\r\n        this.dateStyle = dateStyle;\r\n        this.timeStyle = timeStyle;\r\n        this.builderFactories = builderFactories;\r\n        this.builderHierarchyFactories = builderHierarchyFactories;\r\n        this.objectToNumberStrategy = objectToNumberStrategy;\r\n        this.numberToNumberStrategy = numberToNumberStrategy;\r\n        this.reflectionFilters = reflectionFilters;\r\n        List<TypeAdapterFactory> factories = new ArrayList<>();\r\n        // built-in type adapters that cannot be overridden\r\n        factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);\r\n        factories.add(ObjectTypeAdapter.getFactory(objectToNumberStrategy));\r\n        // the excluder must precede all adapters that handle user-defined types\r\n        factories.add(excluder);\r\n        // users' type adapters\r\n        factories.addAll(factoriesToBeAdded);\r\n        // type adapters for basic platform types\r\n        factories.add(TypeAdapters.STRING_FACTORY);\r\n        factories.add(TypeAdapters.INTEGER_FACTORY);\r\n        factories.add(TypeAdapters.BOOLEAN_FACTORY);\r\n        factories.add(TypeAdapters.BYTE_FACTORY);\r\n        factories.add(TypeAdapters.SHORT_FACTORY);\r\n        TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);\r\n        factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));\r\n        factories.add(TypeAdapters.newFactory(double.class, Double.class, doubleAdapter(serializeSpecialFloatingPointValues)));\r\n        factories.add(TypeAdapters.newFactory(float.class, Float.class, floatAdapter(serializeSpecialFloatingPointValues)));\r\n        factories.add(NumberTypeAdapter.getFactory(numberToNumberStrategy));\r\n        factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);\r\n        factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);\r\n        factories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));\r\n        factories.add(TypeAdapters.newFactory(AtomicLongArray.class, atomicLongArrayAdapter(longAdapter)));\r\n        factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);\r\n        factories.add(TypeAdapters.CHARACTER_FACTORY);\r\n        factories.add(TypeAdapters.STRING_BUILDER_FACTORY);\r\n        factories.add(TypeAdapters.STRING_BUFFER_FACTORY);\r\n        factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));\r\n        factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));\r\n        // Add adapter for LazilyParsedNumber because user can obtain it from Gson and then try to\r\n        // serialize it again\r\n        factories.add(TypeAdapters.newFactory(LazilyParsedNumber.class, TypeAdapters.LAZILY_PARSED_NUMBER));\r\n        factories.add(TypeAdapters.URL_FACTORY);\r\n        factories.add(TypeAdapters.URI_FACTORY);\r\n        factories.add(TypeAdapters.UUID_FACTORY);\r\n        factories.add(TypeAdapters.CURRENCY_FACTORY);\r\n        factories.add(TypeAdapters.LOCALE_FACTORY);\r\n        factories.add(TypeAdapters.INET_ADDRESS_FACTORY);\r\n        factories.add(TypeAdapters.BIT_SET_FACTORY);\r\n        factories.add(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n        factories.add(TypeAdapters.CALENDAR_FACTORY);\r\n        if (SqlTypesSupport.SUPPORTS_SQL_TYPES) {\r\n            factories.add(SqlTypesSupport.TIME_FACTORY);\r\n            factories.add(SqlTypesSupport.DATE_FACTORY);\r\n            factories.add(SqlTypesSupport.TIMESTAMP_FACTORY);\r\n        }\r\n        factories.add(ArrayTypeAdapter.FACTORY);\r\n        factories.add(TypeAdapters.CLASS_FACTORY);\r\n        // type adapters for composite and user-defined types\r\n        factories.add(new CollectionTypeAdapterFactory(constructorConstructor));\r\n        factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\r\n        this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);\r\n        factories.add(jsonAdapterFactory);\r\n        factories.add(TypeAdapters.ENUM_FACTORY);\r\n        factories.add(new ReflectiveTypeAdapterFactory(constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory, reflectionFilters));\r\n        this.factories = Collections.unmodifiableList(factories);\r\n    }\r\n\r\n    /**\r\n     * Returns a new GsonBuilder containing all custom factories and configuration used by the current\r\n     * instance.\r\n     *\r\n     * @return a GsonBuilder instance.\r\n     * @since 2.8.3\r\n     */\r\n    public GsonBuilder newBuilder() {\r\n        return new GsonBuilder(this);\r\n    }\r\n\r\n    /**\r\n     * @deprecated This method by accident exposes an internal Gson class; it might be removed in a\r\n     *     future version.\r\n     */\r\n    @Deprecated\r\n    public Excluder excluder() {\r\n        return excluder;\r\n    }\r\n\r\n    /**\r\n     * Returns the field naming strategy used by this Gson instance.\r\n     *\r\n     * @see GsonBuilder#setFieldNamingStrategy(FieldNamingStrategy)\r\n     */\r\n    public FieldNamingStrategy fieldNamingStrategy() {\r\n        return fieldNamingStrategy;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this Gson instance is serializing JSON object properties with {@code null}\r\n     * values, or just omits them.\r\n     *\r\n     * @see GsonBuilder#serializeNulls()\r\n     */\r\n    public boolean serializeNulls() {\r\n        return serializeNulls;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this Gson instance produces JSON output which is HTML-safe, that means all HTML\r\n     * characters are escaped.\r\n     *\r\n     * @see GsonBuilder#disableHtmlEscaping()\r\n     */\r\n    public boolean htmlSafe() {\r\n        return htmlSafe;\r\n    }\r\n\r\n    private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\r\n        if (serializeSpecialFloatingPointValues) {\r\n            return TypeAdapters.DOUBLE;\r\n        }\r\n        return new TypeAdapter<Number>() {\r\n\r\n            @Override\r\n            public Double read(JsonReader in) throws IOException {\r\n                if (in.peek() == JsonToken.NULL) {\r\n                    in.nextNull();\r\n                    return null;\r\n                }\r\n                return in.nextDouble();\r\n            }\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Number value) throws IOException {\r\n                if (value == null) {\r\n                    out.nullValue();\r\n                    return;\r\n                }\r\n                double doubleValue = value.doubleValue();\r\n                checkValidFloatingPoint(doubleValue);\r\n                out.value(doubleValue);\r\n            }\r\n        };\r\n    }\r\n\r\n    private TypeAdapter<Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\r\n        if (serializeSpecialFloatingPointValues) {\r\n            return TypeAdapters.FLOAT;\r\n        }\r\n        return new TypeAdapter<Number>() {\r\n\r\n            @Override\r\n            public Float read(JsonReader in) throws IOException {\r\n                if (in.peek() == JsonToken.NULL) {\r\n                    in.nextNull();\r\n                    return null;\r\n                }\r\n                return (float) in.nextDouble();\r\n            }\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Number value) throws IOException {\r\n                if (value == null) {\r\n                    out.nullValue();\r\n                    return;\r\n                }\r\n                float floatValue = value.floatValue();\r\n                checkValidFloatingPoint(floatValue);\r\n                // For backward compatibility don't call `JsonWriter.value(float)` because that method has\r\n                // been newly added and not all custom JsonWriter implementations might override it yet\r\n                Number floatNumber = value instanceof Float ? value : floatValue;\r\n                out.value(floatNumber);\r\n            }\r\n        };\r\n    }\r\n\r\n    static void checkValidFloatingPoint(double value) {\r\n        if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n            throw new IllegalArgumentException(value + \" is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\");\r\n        }\r\n    }\r\n\r\n    private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {\r\n        if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {\r\n            return TypeAdapters.LONG;\r\n        }\r\n        return new TypeAdapter<Number>() {\r\n\r\n            @Override\r\n            public Number read(JsonReader in) throws IOException {\r\n                if (in.peek() == JsonToken.NULL) {\r\n                    in.nextNull();\r\n                    return null;\r\n                }\r\n                return in.nextLong();\r\n            }\r\n\r\n            @Override\r\n            public void write(JsonWriter out, Number value) throws IOException {\r\n                if (value == null) {\r\n                    out.nullValue();\r\n                    return;\r\n                }\r\n                out.value(value.toString());\r\n            }\r\n        };\r\n    }\r\n\r\n    private static TypeAdapter<AtomicLong> atomicLongAdapter(TypeAdapter<Number> longAdapter) {\r\n        return new TypeAdapter<AtomicLong>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, AtomicLong value) throws IOException {\r\n                longAdapter.write(out, value.get());\r\n            }\r\n\r\n            @Override\r\n            public AtomicLong read(JsonReader in) throws IOException {\r\n                Number value = longAdapter.read(in);\r\n                return new AtomicLong(value.longValue());\r\n            }\r\n        }.nullSafe();\r\n    }\r\n\r\n    private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(TypeAdapter<Number> longAdapter) {\r\n        return new TypeAdapter<AtomicLongArray>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, AtomicLongArray value) throws IOException {\r\n                out.beginArray();\r\n                for (int i = 0, length = value.length(); i < length; i++) {\r\n                    longAdapter.write(out, value.get(i));\r\n                }\r\n                out.endArray();\r\n            }\r\n\r\n            @Override\r\n            public AtomicLongArray read(JsonReader in) throws IOException {\r\n                List<Long> list = new ArrayList<>();\r\n                in.beginArray();\r\n                while (in.hasNext()) {\r\n                    long value = longAdapter.read(in).longValue();\r\n                    list.add(value);\r\n                }\r\n                in.endArray();\r\n                int length = list.size();\r\n                AtomicLongArray array = new AtomicLongArray(length);\r\n                for (int i = 0; i < length; ++i) {\r\n                    array.set(i, list.get(i));\r\n                }\r\n                return array;\r\n            }\r\n        }.nullSafe();\r\n    }\r\n\r\n    /**\r\n     * Returns the type adapter for {@code type}.\r\n     *\r\n     * <p>When calling this method concurrently from multiple threads and requesting an adapter for\r\n     * the same type this method may return different {@code TypeAdapter} instances. However, that\r\n     * should normally not be an issue because {@code TypeAdapter} implementations are supposed to be\r\n     * stateless.\r\n     *\r\n     * @throws IllegalArgumentException if this Gson instance cannot serialize and deserialize {@code\r\n     *     type}.\r\n     */\r\n    public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\r\n        Objects.requireNonNull(type, \"type must not be null\");\r\n        TypeAdapter<?> cached = typeTokenCache.get(type);\r\n        if (cached != null) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> adapter = (TypeAdapter<T>) cached;\r\n            return adapter;\r\n        }\r\n        Map<TypeToken<?>, TypeAdapter<?>> threadCalls = threadLocalAdapterResults.get();\r\n        boolean isInitialAdapterRequest = false;\r\n        if (threadCalls == null) {\r\n            threadCalls = new HashMap<>();\r\n            threadLocalAdapterResults.set(threadCalls);\r\n            isInitialAdapterRequest = true;\r\n        } else {\r\n            // the key and value type parameters always agree\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> ongoingCall = (TypeAdapter<T>) threadCalls.get(type);\r\n            if (ongoingCall != null) {\r\n                return ongoingCall;\r\n            }\r\n        }\r\n        TypeAdapter<T> candidate = null;\r\n        try {\r\n            FutureTypeAdapter<T> call = new FutureTypeAdapter<>();\r\n            threadCalls.put(type, call);\r\n            for (TypeAdapterFactory factory : factories) {\r\n                candidate = factory.create(this, type);\r\n                if (candidate != null) {\r\n                    call.setDelegate(candidate);\r\n                    // Replace future adapter with actual adapter\r\n                    threadCalls.put(type, candidate);\r\n                    break;\r\n                }\r\n            }\r\n        } finally {\r\n            if (isInitialAdapterRequest) {\r\n                threadLocalAdapterResults.remove();\r\n            }\r\n        }\r\n        if (candidate == null) {\r\n            throw new IllegalArgumentException(\"GSON (\" + GsonBuildConfig.VERSION + \") cannot handle \" + type);\r\n        }\r\n        if (isInitialAdapterRequest) {\r\n            /*\r\n       * Publish resolved adapters to all threads\r\n       * Can only do this for the initial request because cyclic dependency TypeA -> TypeB -> TypeA\r\n       * would otherwise publish adapter for TypeB which uses not yet resolved adapter for TypeA\r\n       * See https://github.com/google/gson/issues/625\r\n       */\r\n            typeTokenCache.putAll(threadCalls);\r\n        }\r\n        return candidate;\r\n    }\r\n\r\n    /**\r\n     * Returns the type adapter for {@code type}.\r\n     *\r\n     * @throws IllegalArgumentException if this Gson instance cannot serialize and deserialize {@code\r\n     *     type}.\r\n     */\r\n    public <T> TypeAdapter<T> getAdapter(Class<T> type) {\r\n        return getAdapter(TypeToken.get(type));\r\n    }\r\n\r\n    /**\r\n     * This method is used to get an alternate type adapter for the specified type. This is used to\r\n     * access a type adapter that is overridden by a {@link TypeAdapterFactory} that you may have\r\n     * registered. This feature is typically used when you want to register a type adapter that does a\r\n     * little bit of work but then delegates further processing to the Gson default type adapter. Here\r\n     * is an example:\r\n     *\r\n     * <p>Let's say we want to write a type adapter that counts the number of objects being read from\r\n     * or written to JSON. We can achieve this by writing a type adapter factory that uses the {@code\r\n     * getDelegateAdapter} method:\r\n     *\r\n     * <pre>{@code\r\n     * class StatsTypeAdapterFactory implements TypeAdapterFactory {\r\n     *   public int numReads = 0;\r\n     *   public int numWrites = 0;\r\n     *   public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n     *     TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\r\n     *     return new TypeAdapter<T>() {\r\n     *       public void write(JsonWriter out, T value) throws IOException {\r\n     *         ++numWrites;\r\n     *         delegate.write(out, value);\r\n     *       }\r\n     *       public T read(JsonReader in) throws IOException {\r\n     *         ++numReads;\r\n     *         return delegate.read(in);\r\n     *       }\r\n     *     };\r\n     *   }\r\n     * }\r\n     * }</pre>\r\n     *\r\n     * This factory can now be used like this:\r\n     *\r\n     * <pre>{@code\r\n     * StatsTypeAdapterFactory stats = new StatsTypeAdapterFactory();\r\n     * Gson gson = new GsonBuilder().registerTypeAdapterFactory(stats).create();\r\n     * // Call gson.toJson() and fromJson methods on objects\r\n     * System.out.println(\"Num JSON reads: \" + stats.numReads);\r\n     * System.out.println(\"Num JSON writes: \" + stats.numWrites);\r\n     * }</pre>\r\n     *\r\n     * Note that this call will skip all factories registered before {@code skipPast}. In case of\r\n     * multiple TypeAdapterFactories registered it is up to the caller of this function to ensure that\r\n     * the order of registration does not prevent this method from reaching a factory they would\r\n     * expect to reply from this call. Note that since you can not override the type adapter factories\r\n     * for some types, see {@link GsonBuilder#registerTypeAdapter(Type, Object)}, our stats factory\r\n     * will not count the number of instances of those types that will be read or written.\r\n     *\r\n     * <p>If {@code skipPast} is a factory which has neither been registered on the {@link\r\n     * GsonBuilder} nor specified with the {@link JsonAdapter @JsonAdapter} annotation on a class,\r\n     * then this method behaves as if {@link #getAdapter(TypeToken)} had been called. This also means\r\n     * that for fields with {@code @JsonAdapter} annotation this method behaves normally like {@code\r\n     * getAdapter} (except for corner cases where a custom {@link InstanceCreator} is used to create\r\n     * an instance of the factory).\r\n     *\r\n     * @param skipPast The type adapter factory that needs to be skipped while searching for a\r\n     *     matching type adapter. In most cases, you should just pass <i>this</i> (the type adapter\r\n     *     factory from where {@code getDelegateAdapter} method is being invoked).\r\n     * @param type Type for which the delegate adapter is being searched for.\r\n     * @since 2.2\r\n     */\r\n    public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\r\n        Objects.requireNonNull(skipPast, \"skipPast must not be null\");\r\n        Objects.requireNonNull(type, \"type must not be null\");\r\n        if (jsonAdapterFactory.isClassJsonAdapterFactory(type, skipPast)) {\r\n            skipPast = jsonAdapterFactory;\r\n        }\r\n        boolean skipPastFound = false;\r\n        for (TypeAdapterFactory factory : factories) {\r\n            if (!skipPastFound) {\r\n                if (factory == skipPast) {\r\n                    skipPastFound = true;\r\n                }\r\n                continue;\r\n            }\r\n            TypeAdapter<T> candidate = factory.create(this, type);\r\n            if (candidate != null) {\r\n                return candidate;\r\n            }\r\n        }\r\n        if (skipPastFound) {\r\n            throw new IllegalArgumentException(\"GSON cannot serialize or deserialize \" + type);\r\n        } else {\r\n            // Probably a factory from @JsonAdapter on a field\r\n            return getAdapter(type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object into its equivalent representation as a tree of\r\n     * {@link JsonElement}s. This method should be used when the specified object is not a generic\r\n     * type. This method uses {@link Class#getClass()} to get the type for the specified object, but\r\n     * the {@code getClass()} loses the generic type information because of the Type Erasure feature\r\n     * of Java. Note that this method works fine if any of the object fields are of generic type, just\r\n     * the object itself should not be of a generic type. If the object is of generic type, use {@link\r\n     * #toJsonTree(Object, Type)} instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @return JSON representation of {@code src}.\r\n     * @since 1.4\r\n     * @see #toJsonTree(Object, Type)\r\n     */\r\n    public JsonElement toJsonTree(Object src) {\r\n        if (src == null) {\r\n            return JsonNull.INSTANCE;\r\n        }\r\n        return toJsonTree(src, src.getClass());\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object, including those of generic types, into its\r\n     * equivalent representation as a tree of {@link JsonElement}s. This method must be used if the\r\n     * specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}\r\n     * instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n     *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n     *     Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n     * </pre>\r\n     *\r\n     * @return JSON representation of {@code src}.\r\n     * @since 1.4\r\n     * @see #toJsonTree(Object)\r\n     */\r\n    public JsonElement toJsonTree(Object src, Type typeOfSrc) {\r\n        JsonTreeWriter writer = new JsonTreeWriter();\r\n        toJson(src, typeOfSrc, writer);\r\n        return writer.get();\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object into its equivalent JSON representation. This\r\n     * method should be used when the specified object is not a generic type. This method uses {@link\r\n     * Class#getClass()} to get the type for the specified object, but the {@code getClass()} loses\r\n     * the generic type information because of the Type Erasure feature of Java. Note that this method\r\n     * works fine if any of the object fields are of generic type, just the object itself should not\r\n     * be of a generic type. If the object is of generic type, use {@link #toJson(Object, Type)}\r\n     * instead. If you want to write out the object to a {@link Writer}, use {@link #toJson(Object,\r\n     * Appendable)} instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @return JSON representation of {@code src}.\r\n     * @see #toJson(Object, Appendable)\r\n     * @see #toJson(Object, Type)\r\n     */\r\n    public String toJson(Object src) {\r\n        if (src == null) {\r\n            return toJson(JsonNull.INSTANCE);\r\n        }\r\n        return toJson(src, src.getClass());\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object, including those of generic types, into its\r\n     * equivalent JSON representation. This method must be used if the specified object is a generic\r\n     * type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\r\n     * the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n     *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n     *     Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n     * </pre>\r\n     *\r\n     * @return JSON representation of {@code src}.\r\n     * @see #toJson(Object, Type, Appendable)\r\n     * @see #toJson(Object)\r\n     */\r\n    public String toJson(Object src, Type typeOfSrc) {\r\n        StringBuilder writer = new StringBuilder();\r\n        toJson(src, typeOfSrc, writer);\r\n        return writer.toString();\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object into its equivalent JSON representation and writes\r\n     * it to the writer. This method should be used when the specified object is not a generic type.\r\n     * This method uses {@link Class#getClass()} to get the type for the specified object, but the\r\n     * {@code getClass()} loses the generic type information because of the Type Erasure feature of\r\n     * Java. Note that this method works fine if any of the object fields are of generic type, just\r\n     * the object itself should not be of a generic type. If the object is of generic type, use {@link\r\n     * #toJson(Object, Type, Appendable)} instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @param writer Writer to which the JSON representation needs to be written\r\n     * @throws JsonIOException if there was a problem writing to the writer\r\n     * @since 1.2\r\n     * @see #toJson(Object)\r\n     * @see #toJson(Object, Type, Appendable)\r\n     */\r\n    public void toJson(Object src, Appendable writer) throws JsonIOException {\r\n        if (src != null) {\r\n            toJson(src, src.getClass(), writer);\r\n        } else {\r\n            toJson(JsonNull.INSTANCE, writer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method serializes the specified object, including those of generic types, into its\r\n     * equivalent JSON representation and writes it to the writer. This method must be used if the\r\n     * specified object is a generic type. For non-generic objects, use {@link #toJson(Object,\r\n     * Appendable)} instead.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n     *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n     *     Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n     * </pre>\r\n     *\r\n     * @param writer Writer to which the JSON representation of src needs to be written\r\n     * @throws JsonIOException if there was a problem writing to the writer\r\n     * @since 1.2\r\n     * @see #toJson(Object, Type)\r\n     * @see #toJson(Object, Appendable)\r\n     */\r\n    public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\r\n        try {\r\n            JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\r\n            toJson(src, typeOfSrc, jsonWriter);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the JSON representation of {@code src} of type {@code typeOfSrc} to {@code writer}.\r\n     *\r\n     * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n     * explicit strictness setting}, this setting will be used for writing the JSON regardless of the\r\n     * {@linkplain JsonWriter#getStrictness() strictness} of the provided {@link JsonWriter}. For\r\n     * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the writer\r\n     * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n     * Strictness#LENIENT} mode.<br>\r\n     * Note that in all cases the old strictness setting of the writer will be restored when this\r\n     * method returns.\r\n     *\r\n     * <p>The 'HTML-safe' and 'serialize {@code null}' settings of this {@code Gson} instance\r\n     * (configured by the {@link GsonBuilder}) are applied, and the original settings of the writer\r\n     * are restored once this method returns.\r\n     *\r\n     * @param src the object for which JSON representation is to be created\r\n     * @param typeOfSrc the type of the object to be written\r\n     * @param writer Writer to which the JSON representation of src needs to be written\r\n     * @throws JsonIOException if there was a problem writing to the writer\r\n     */\r\n    public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\r\n        @SuppressWarnings(\"unchecked\")\r\n        TypeAdapter<Object> adapter = (TypeAdapter<Object>) getAdapter(TypeToken.get(typeOfSrc));\r\n        Strictness oldStrictness = writer.getStrictness();\r\n        if (this.strictness != null) {\r\n            writer.setStrictness(this.strictness);\r\n        } else if (writer.getStrictness() == Strictness.LEGACY_STRICT) {\r\n            // For backward compatibility change to LENIENT if writer has default strictness LEGACY_STRICT\r\n            writer.setStrictness(Strictness.LENIENT);\r\n        }\r\n        boolean oldHtmlSafe = writer.isHtmlSafe();\r\n        boolean oldSerializeNulls = writer.getSerializeNulls();\r\n        writer.setHtmlSafe(htmlSafe);\r\n        writer.setSerializeNulls(serializeNulls);\r\n        try {\r\n            adapter.write(writer, src);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        } catch (AssertionError e) {\r\n            throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n        } finally {\r\n            writer.setStrictness(oldStrictness);\r\n            writer.setHtmlSafe(oldHtmlSafe);\r\n            writer.setSerializeNulls(oldSerializeNulls);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a tree of {@link JsonElement}s into its equivalent JSON representation.\r\n     *\r\n     * @param jsonElement root of a tree of {@link JsonElement}s\r\n     * @return JSON String representation of the tree.\r\n     * @since 1.4\r\n     */\r\n    public String toJson(JsonElement jsonElement) {\r\n        StringBuilder writer = new StringBuilder();\r\n        toJson(jsonElement, writer);\r\n        return writer.toString();\r\n    }\r\n\r\n    /**\r\n     * Writes out the equivalent JSON for a tree of {@link JsonElement}s.\r\n     *\r\n     * @param jsonElement root of a tree of {@link JsonElement}s\r\n     * @param writer Writer to which the JSON representation needs to be written\r\n     * @throws JsonIOException if there was a problem writing to the writer\r\n     * @since 1.4\r\n     */\r\n    public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {\r\n        try {\r\n            JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\r\n            toJson(jsonElement, jsonWriter);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the JSON for {@code jsonElement} to {@code writer}.\r\n     *\r\n     * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n     * explicit strictness setting}, this setting will be used for writing the JSON regardless of the\r\n     * {@linkplain JsonWriter#getStrictness() strictness} of the provided {@link JsonWriter}. For\r\n     * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the writer\r\n     * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n     * Strictness#LENIENT} mode.<br>\r\n     * Note that in all cases the old strictness setting of the writer will be restored when this\r\n     * method returns.\r\n     *\r\n     * <p>The 'HTML-safe' and 'serialize {@code null}' settings of this {@code Gson} instance\r\n     * (configured by the {@link GsonBuilder}) are applied, and the original settings of the writer\r\n     * are restored once this method returns.\r\n     *\r\n     * @param jsonElement the JSON element to be written\r\n     * @param writer the JSON writer to which the provided element will be written\r\n     * @throws JsonIOException if there was a problem writing to the writer\r\n     */\r\n    public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {\r\n        Strictness oldStrictness = writer.getStrictness();\r\n        boolean oldHtmlSafe = writer.isHtmlSafe();\r\n        boolean oldSerializeNulls = writer.getSerializeNulls();\r\n        writer.setHtmlSafe(htmlSafe);\r\n        writer.setSerializeNulls(serializeNulls);\r\n        if (this.strictness != null) {\r\n            writer.setStrictness(this.strictness);\r\n        } else if (writer.getStrictness() == Strictness.LEGACY_STRICT) {\r\n            // For backward compatibility change to LENIENT if writer has default strictness LEGACY_STRICT\r\n            writer.setStrictness(Strictness.LENIENT);\r\n        }\r\n        try {\r\n            Streams.write(jsonElement, writer);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        } catch (AssertionError e) {\r\n            throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n        } finally {\r\n            writer.setStrictness(oldStrictness);\r\n            writer.setHtmlSafe(oldHtmlSafe);\r\n            writer.setSerializeNulls(oldSerializeNulls);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new JSON writer configured for the settings on this Gson instance.\r\n     *\r\n     * <p>The following settings are considered:\r\n     *\r\n     * <ul>\r\n     *   <li>{@link GsonBuilder#disableHtmlEscaping()}\r\n     *   <li>{@link GsonBuilder#generateNonExecutableJson()}\r\n     *   <li>{@link GsonBuilder#serializeNulls()}\r\n     *   <li>{@link GsonBuilder#setStrictness(Strictness)}. If no {@linkplain\r\n     *       GsonBuilder#setStrictness(Strictness) explicit strictness has been set} the created\r\n     *       writer will have a strictness of {@link Strictness#LEGACY_STRICT}. Otherwise, the\r\n     *       strictness of the {@code Gson} instance will be used for the created writer.\r\n     *   <li>{@link GsonBuilder#setPrettyPrinting()}\r\n     *   <li>{@link GsonBuilder#setFormattingStyle(FormattingStyle)}\r\n     * </ul>\r\n     */\r\n    public JsonWriter newJsonWriter(Writer writer) throws IOException {\r\n        if (generateNonExecutableJson) {\r\n            writer.write(JSON_NON_EXECUTABLE_PREFIX);\r\n        }\r\n        JsonWriter jsonWriter = new JsonWriter(writer);\r\n        jsonWriter.setFormattingStyle(formattingStyle);\r\n        jsonWriter.setHtmlSafe(htmlSafe);\r\n        jsonWriter.setStrictness(strictness == null ? Strictness.LEGACY_STRICT : strictness);\r\n        jsonWriter.setSerializeNulls(serializeNulls);\r\n        return jsonWriter;\r\n    }\r\n\r\n    /**\r\n     * Returns a new JSON reader configured for the settings on this Gson instance.\r\n     *\r\n     * <p>The following settings are considered:\r\n     *\r\n     * <ul>\r\n     *   <li>{@link GsonBuilder#setStrictness(Strictness)}. If no {@linkplain\r\n     *       GsonBuilder#setStrictness(Strictness) explicit strictness has been set} the created\r\n     *       reader will have a strictness of {@link Strictness#LEGACY_STRICT}. Otherwise, the\r\n     *       strictness of the {@code Gson} instance will be used for the created reader.\r\n     * </ul>\r\n     */\r\n    public JsonReader newJsonReader(Reader reader) {\r\n        JsonReader jsonReader = new JsonReader(reader);\r\n        jsonReader.setStrictness(strictness == null ? Strictness.LEGACY_STRICT : strictness);\r\n        return jsonReader;\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the specified JSON into an object of the specified class. It is not\r\n     * suitable to use if the specified class is a generic type since it will not have the generic\r\n     * type information because of the Type Erasure feature of Java. Therefore, this method should not\r\n     * be used if the desired type is a generic type. Note that this method works fine if any of the\r\n     * fields of the specified object are generics, just the object itself should not be a generic\r\n     * type. For the cases when the object is of generic type, invoke {@link #fromJson(String,\r\n     * TypeToken)}. If you have the JSON in a {@link Reader} instead of a String, use {@link\r\n     * #fromJson(Reader, Class)} instead.\r\n     *\r\n     * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n     * is trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the string from which the object is to be deserialized\r\n     * @param classOfT the class of T\r\n     * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n     *     null} or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type\r\n     *     classOfT\r\n     * @see #fromJson(Reader, Class)\r\n     * @see #fromJson(String, TypeToken)\r\n     */\r\n    public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\r\n        return fromJson(json, TypeToken.get(classOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the specified JSON into an object of the specified type. This method\r\n     * is useful if the specified object is a generic type. For non-generic objects, use {@link\r\n     * #fromJson(String, Class)} instead. If you have the JSON in a {@link Reader} instead of a\r\n     * String, use {@link #fromJson(Reader, Type)} instead.\r\n     *\r\n     * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n     * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n     * {@link #fromJson(String, TypeToken)} instead since its return type is based on the {@code\r\n     * TypeToken} and is therefore more type-safe.\r\n     *\r\n     * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n     * is trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the string from which the object is to be deserialized\r\n     * @param typeOfT The specific genericized type of src\r\n     * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n     *     null} or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @see #fromJson(Reader, Type)\r\n     * @see #fromJson(String, Class)\r\n     * @see #fromJson(String, TypeToken)\r\n     */\r\n    @SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\n    public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\r\n        return (T) fromJson(json, TypeToken.get(typeOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the specified JSON into an object of the specified type. This method\r\n     * is useful if the specified object is a generic type. For non-generic objects, use {@link\r\n     * #fromJson(String, Class)} instead. If you have the JSON in a {@link Reader} instead of a\r\n     * String, use {@link #fromJson(Reader, TypeToken)} instead.\r\n     *\r\n     * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n     * is trailing data. Use {@link #fromJson(JsonReader, TypeToken)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the string from which the object is to be deserialized\r\n     * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n     *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n     *     for {@code Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n     * </pre>\r\n     *\r\n     * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n     *     null} or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of the type\r\n     *     typeOfT\r\n     * @see #fromJson(Reader, TypeToken)\r\n     * @see #fromJson(String, Class)\r\n     * @since 2.10\r\n     */\r\n    public <T> T fromJson(String json, TypeToken<T> typeOfT) throws JsonSyntaxException {\r\n        if (json == null) {\r\n            return null;\r\n        }\r\n        StringReader reader = new StringReader(json);\r\n        return fromJson(reader, typeOfT);\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified reader into an object of the\r\n     * specified class. It is not suitable to use if the specified class is a generic type since it\r\n     * will not have the generic type information because of the Type Erasure feature of Java.\r\n     * Therefore, this method should not be used if the desired type is a generic type. Note that this\r\n     * method works fine if any of the fields of the specified object are generics, just the object\r\n     * itself should not be a generic type. For the cases when the object is of generic type, invoke\r\n     * {@link #fromJson(Reader, TypeToken)}. If you have the JSON in a String form instead of a {@link\r\n     * Reader}, use {@link #fromJson(String, Class)} instead.\r\n     *\r\n     * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n     * trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the reader producing the JSON from which the object is to be deserialized.\r\n     * @param classOfT the class of T\r\n     * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n     * @throws JsonIOException if there was a problem reading from the Reader\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @since 1.2\r\n     * @see #fromJson(String, Class)\r\n     * @see #fromJson(Reader, TypeToken)\r\n     */\r\n    public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {\r\n        return fromJson(json, TypeToken.get(classOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified reader into an object of the\r\n     * specified type. This method is useful if the specified object is a generic type. For\r\n     * non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the JSON in a\r\n     * String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\r\n     *\r\n     * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n     * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n     * {@link #fromJson(Reader, TypeToken)} instead since its return type is based on the {@code\r\n     * TypeToken} and is therefore more type-safe.\r\n     *\r\n     * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n     * trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the reader producing JSON from which the object is to be deserialized\r\n     * @param typeOfT The specific genericized type of src\r\n     * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n     * @throws JsonIOException if there was a problem reading from the Reader\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @since 1.2\r\n     * @see #fromJson(String, Type)\r\n     * @see #fromJson(Reader, Class)\r\n     * @see #fromJson(Reader, TypeToken)\r\n     */\r\n    @SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\n    public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\r\n        return (T) fromJson(json, TypeToken.get(typeOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified reader into an object of the\r\n     * specified type. This method is useful if the specified object is a generic type. For\r\n     * non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the JSON in a\r\n     * String form instead of a {@link Reader}, use {@link #fromJson(String, TypeToken)} instead.\r\n     *\r\n     * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n     * trailing data. Use {@link #fromJson(JsonReader, TypeToken)} if this behavior is not desired.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the reader producing JSON from which the object is to be deserialized\r\n     * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n     *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n     *     for {@code Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n     * </pre>\r\n     *\r\n     * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n     * @throws JsonIOException if there was a problem reading from the Reader\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type of\r\n     *     typeOfT\r\n     * @see #fromJson(String, TypeToken)\r\n     * @see #fromJson(Reader, Class)\r\n     * @since 2.10\r\n     */\r\n    public <T> T fromJson(Reader json, TypeToken<T> typeOfT) throws JsonIOException, JsonSyntaxException {\r\n        JsonReader jsonReader = newJsonReader(json);\r\n        T object = fromJson(jsonReader, typeOfT);\r\n        assertFullConsumption(object, jsonReader);\r\n        return object;\r\n    }\r\n\r\n    // fromJson(JsonReader, Class) is unfortunately missing and cannot be added now without breaking\r\n    // source compatibility in certain cases, see\r\n    // https://github.com/google/gson/pull/1700#discussion_r973764414\r\n    /**\r\n     * Reads the next JSON value from {@code reader} and converts it to an object of type {@code\r\n     * typeOfT}. Returns {@code null}, if the {@code reader} is at EOF.\r\n     *\r\n     * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n     * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n     * {@link #fromJson(JsonReader, TypeToken)} instead since its return type is based on the {@code\r\n     * TypeToken} and is therefore more type-safe. If the provided type is a {@code Class} the {@code\r\n     * TypeToken} can be created with {@link TypeToken#get(Class)}.\r\n     *\r\n     * <p>Unlike the other {@code fromJson} methods, no exception is thrown if the JSON data has\r\n     * multiple top-level JSON elements, or if there is trailing data.\r\n     *\r\n     * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n     * explicit strictness setting}, this setting will be used for reading the JSON regardless of the\r\n     * {@linkplain JsonReader#getStrictness() strictness} of the provided {@link JsonReader}. For\r\n     * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the reader\r\n     * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n     * Strictness#LENIENT} mode.<br>\r\n     * Note that in all cases the old strictness setting of the reader will be restored when this\r\n     * method returns.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param reader the reader whose next JSON value should be deserialized\r\n     * @param typeOfT The specific genericized type of src\r\n     * @return an object of type T from the JsonReader. Returns {@code null} if {@code reader} is at\r\n     *     EOF.\r\n     * @throws JsonIOException if there was a problem reading from the JsonReader\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @see #fromJson(Reader, Type)\r\n     * @see #fromJson(JsonReader, TypeToken)\r\n     */\r\n    @SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\n    public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {\r\n        return (T) fromJson(reader, TypeToken.get(typeOfT));\r\n    }\r\n\r\n    /**\r\n     * Reads the next JSON value from {@code reader} and converts it to an object of type {@code\r\n     * typeOfT}. Returns {@code null}, if the {@code reader} is at EOF. This method is useful if the\r\n     * specified object is a generic type. For non-generic objects, {@link #fromJson(JsonReader,\r\n     * Type)} can be called, or {@link TypeToken#get(Class)} can be used to create the type token.\r\n     *\r\n     * <p>Unlike the other {@code fromJson} methods, no exception is thrown if the JSON data has\r\n     * multiple top-level JSON elements, or if there is trailing data.\r\n     *\r\n     * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n     * explicit strictness setting}, this setting will be used for reading the JSON regardless of the\r\n     * {@linkplain JsonReader#getStrictness() strictness} of the provided {@link JsonReader}. For\r\n     * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the reader\r\n     * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n     * Strictness#LENIENT} mode.<br>\r\n     * Note that in all cases the old strictness setting of the reader will be restored when this\r\n     * method returns.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param reader the reader whose next JSON value should be deserialized\r\n     * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n     *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n     *     for {@code Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n     * </pre>\r\n     *\r\n     * @return an object of type T from the JsonReader. Returns {@code null} if {@code reader} is at\r\n     *     EOF.\r\n     * @throws JsonIOException if there was a problem reading from the JsonReader\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of the type\r\n     *     typeOfT\r\n     * @see #fromJson(Reader, TypeToken)\r\n     * @see #fromJson(JsonReader, Type)\r\n     * @since 2.10\r\n     */\r\n    public <T> T fromJson(JsonReader reader, TypeToken<T> typeOfT) throws JsonIOException, JsonSyntaxException {\r\n        boolean isEmpty = true;\r\n        Strictness oldStrictness = reader.getStrictness();\r\n        if (this.strictness != null) {\r\n            reader.setStrictness(this.strictness);\r\n        } else if (reader.getStrictness() == Strictness.LEGACY_STRICT) {\r\n            // For backward compatibility change to LENIENT if reader has default strictness LEGACY_STRICT\r\n            reader.setStrictness(Strictness.LENIENT);\r\n        }\r\n        try {\r\n            JsonToken unused = reader.peek();\r\n            isEmpty = false;\r\n            TypeAdapter<T> typeAdapter = getAdapter(typeOfT);\r\n            T object = typeAdapter.read(reader);\r\n            Class<?> expectedTypeWrapped = Primitives.wrap(typeOfT.getRawType());\r\n            if (object != null && !expectedTypeWrapped.isInstance(object)) {\r\n                throw new ClassCastException(\"Type adapter '\" + typeAdapter + \"' returned wrong type; requested \" + typeOfT.getRawType() + \" but got instance of \" + object.getClass() + \"\\nVerify that the adapter was registered for the correct type.\");\r\n            }\r\n            return object;\r\n        } catch (EOFException e) {\r\n            /*\r\n       * For compatibility with JSON 1.5 and earlier, we return null for empty\r\n       * documents instead of throwing.\r\n       */\r\n            if (isEmpty) {\r\n                return null;\r\n            }\r\n            throw new JsonSyntaxException(e);\r\n        } catch (IllegalStateException e) {\r\n            throw new JsonSyntaxException(e);\r\n        } catch (IOException e) {\r\n            // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\r\n            throw new JsonSyntaxException(e);\r\n        } catch (AssertionError e) {\r\n            throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n        } finally {\r\n            reader.setStrictness(oldStrictness);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified parse tree into an object of the\r\n     * specified type. It is not suitable to use if the specified class is a generic type since it\r\n     * will not have the generic type information because of the Type Erasure feature of Java.\r\n     * Therefore, this method should not be used if the desired type is a generic type. Note that this\r\n     * method works fine if any of the fields of the specified object are generics, just the object\r\n     * itself should not be a generic type. For the cases when the object is of generic type, invoke\r\n     * {@link #fromJson(JsonElement, TypeToken)}.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n     *     deserialized\r\n     * @param classOfT The class of T\r\n     * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n     *     or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type\r\n     *     classOfT\r\n     * @since 1.3\r\n     * @see #fromJson(Reader, Class)\r\n     * @see #fromJson(JsonElement, TypeToken)\r\n     */\r\n    public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException {\r\n        return fromJson(json, TypeToken.get(classOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified parse tree into an object of the\r\n     * specified type. This method is useful if the specified object is a generic type. For\r\n     * non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.\r\n     *\r\n     * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n     * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n     * {@link #fromJson(JsonElement, TypeToken)} instead since its return type is based on the {@code\r\n     * TypeToken} and is therefore more type-safe.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n     *     deserialized\r\n     * @param typeOfT The specific genericized type of src\r\n     * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n     *     or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @since 1.3\r\n     * @see #fromJson(Reader, Type)\r\n     * @see #fromJson(JsonElement, Class)\r\n     * @see #fromJson(JsonElement, TypeToken)\r\n     */\r\n    @SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\n    public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException {\r\n        return (T) fromJson(json, TypeToken.get(typeOfT));\r\n    }\r\n\r\n    /**\r\n     * This method deserializes the JSON read from the specified parse tree into an object of the\r\n     * specified type. This method is useful if the specified object is a generic type. For\r\n     * non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.\r\n     *\r\n     * @param <T> the type of the desired object\r\n     * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n     *     deserialized\r\n     * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n     *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n     *     for {@code Collection<Foo>}, you should use:\r\n     *     <pre>\r\n     * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n     * </pre>\r\n     *\r\n     * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n     *     or if {@code json} is empty.\r\n     * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n     * @see #fromJson(Reader, TypeToken)\r\n     * @see #fromJson(JsonElement, Class)\r\n     * @since 2.10\r\n     */\r\n    public <T> T fromJson(JsonElement json, TypeToken<T> typeOfT) throws JsonSyntaxException {\r\n        if (json == null) {\r\n            return null;\r\n        }\r\n        return fromJson(new JsonTreeReader(json), typeOfT);\r\n    }\r\n\r\n    private static void assertFullConsumption(Object obj, JsonReader reader) {\r\n        try {\r\n            if (obj != null && reader.peek() != JsonToken.END_DOCUMENT) {\r\n                throw new JsonSyntaxException(\"JSON document was not fully consumed.\");\r\n            }\r\n        } catch (MalformedJsonException e) {\r\n            throw new JsonSyntaxException(e);\r\n        } catch (IOException e) {\r\n            throw new JsonIOException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Proxy type adapter for cyclic type graphs.\r\n     *\r\n     * <p><b>Important:</b> Setting the delegate adapter is not thread-safe; instances of {@code\r\n     * FutureTypeAdapter} must only be published to other threads after the delegate has been set.\r\n     *\r\n     * @see Gson#threadLocalAdapterResults\r\n     */\r\n    static class FutureTypeAdapter<T> extends SerializationDelegatingTypeAdapter<T> {\r\n\r\n        private TypeAdapter<T> delegate = null;\r\n\r\n        public void setDelegate(TypeAdapter<T> typeAdapter) {\r\n            if (delegate != null) {\r\n                throw new AssertionError(\"Delegate is already set\");\r\n            }\r\n            delegate = typeAdapter;\r\n        }\r\n\r\n        private TypeAdapter<T> delegate() {\r\n            TypeAdapter<T> delegate = this.delegate;\r\n            if (delegate == null) {\r\n                // Can occur when adapter is leaked to other thread or when adapter is used for\r\n                // (de-)serialization\r\n                // directly within the TypeAdapterFactory which requested it\r\n                throw new IllegalStateException(\"Adapter for type with cyclic dependency has been used\" + \" before dependency has been resolved\");\r\n            }\r\n            return delegate;\r\n        }\r\n\r\n        @Override\r\n        public TypeAdapter<T> getSerializationDelegate() {\r\n            return delegate();\r\n        }\r\n\r\n        @Override\r\n        public T read(JsonReader in) throws IOException {\r\n            return delegate().read(in);\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, T value) throws IOException {\r\n            delegate().write(out, value);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"{serializeNulls:\" + serializeNulls + \",factories:\" + factories + \",instanceCreators:\" + constructorConstructor + \"}\";\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_JSON_NON_EXECUTABLE",
    "start_line": 152,
    "end_line": 152,
    "code": "static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_STRICTNESS",
    "start_line": 154,
    "end_line": 154,
    "code": "// Strictness of `null` is the legacy mode where some Gson APIs are always lenient\r\nstatic final Strictness DEFAULT_STRICTNESS = null;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_FORMATTING_STYLE",
    "start_line": 155,
    "end_line": 155,
    "code": "static final FormattingStyle DEFAULT_FORMATTING_STYLE = FormattingStyle.COMPACT;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_ESCAPE_HTML",
    "start_line": 156,
    "end_line": 156,
    "code": "static final boolean DEFAULT_ESCAPE_HTML = true;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_SERIALIZE_NULLS",
    "start_line": 157,
    "end_line": 157,
    "code": "static final boolean DEFAULT_SERIALIZE_NULLS = false;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_COMPLEX_MAP_KEYS",
    "start_line": 158,
    "end_line": 158,
    "code": "static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_SPECIALIZE_FLOAT_VALUES",
    "start_line": 159,
    "end_line": 159,
    "code": "static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_USE_JDK_UNSAFE",
    "start_line": 160,
    "end_line": 160,
    "code": "static final boolean DEFAULT_USE_JDK_UNSAFE = true;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_DATE_PATTERN",
    "start_line": 161,
    "end_line": 161,
    "code": "static final String DEFAULT_DATE_PATTERN = null;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_FIELD_NAMING_STRATEGY",
    "start_line": 162,
    "end_line": 162,
    "code": "static final FieldNamingStrategy DEFAULT_FIELD_NAMING_STRATEGY = FieldNamingPolicy.IDENTITY;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_OBJECT_TO_NUMBER_STRATEGY",
    "start_line": 163,
    "end_line": 163,
    "code": "static final ToNumberStrategy DEFAULT_OBJECT_TO_NUMBER_STRATEGY = ToNumberPolicy.DOUBLE;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "DEFAULT_NUMBER_TO_NUMBER_STRATEGY",
    "start_line": 164,
    "end_line": 165,
    "code": "static final ToNumberStrategy DEFAULT_NUMBER_TO_NUMBER_STRATEGY = ToNumberPolicy.LAZILY_PARSED_NUMBER;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "JSON_NON_EXECUTABLE_PREFIX",
    "start_line": 167,
    "end_line": 167,
    "code": "private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "threadLocalAdapterResults",
    "start_line": 180,
    "end_line": 182,
    "code": "/**\r\n * This thread local guards against reentrant calls to {@link #getAdapter(TypeToken)}. In certain\r\n * object graphs, creating an adapter for a type may recursively require an adapter for the same\r\n * type! Without intervention, the recursive lookup would stack overflow. We cheat by returning a\r\n * proxy type adapter, {@link FutureTypeAdapter}, which is wired up once the initial adapter has\r\n * been created.\r\n *\r\n * <p>The map stores the type adapters for ongoing {@code getAdapter} calls, with the type token\r\n * provided to {@code getAdapter} as key and either {@code FutureTypeAdapter} or a regular {@code\r\n * TypeAdapter} as value.\r\n */\r\n@SuppressWarnings(\"ThreadLocalUsage\")\r\nprivate final ThreadLocal<Map<TypeToken<?>, TypeAdapter<?>>> threadLocalAdapterResults = new ThreadLocal<>();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "typeTokenCache",
    "start_line": 184,
    "end_line": 185,
    "code": "private final ConcurrentMap<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<>();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "constructorConstructor",
    "start_line": 187,
    "end_line": 187,
    "code": "private final ConstructorConstructor constructorConstructor;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "jsonAdapterFactory",
    "start_line": 188,
    "end_line": 188,
    "code": "private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "factories",
    "start_line": 190,
    "end_line": 190,
    "code": "final List<TypeAdapterFactory> factories;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "excluder",
    "start_line": 192,
    "end_line": 192,
    "code": "final Excluder excluder;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "fieldNamingStrategy",
    "start_line": 193,
    "end_line": 193,
    "code": "final FieldNamingStrategy fieldNamingStrategy;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "instanceCreators",
    "start_line": 194,
    "end_line": 194,
    "code": "final Map<Type, InstanceCreator<?>> instanceCreators;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "serializeNulls",
    "start_line": 195,
    "end_line": 195,
    "code": "final boolean serializeNulls;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "complexMapKeySerialization",
    "start_line": 196,
    "end_line": 196,
    "code": "final boolean complexMapKeySerialization;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "generateNonExecutableJson",
    "start_line": 197,
    "end_line": 197,
    "code": "final boolean generateNonExecutableJson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "htmlSafe",
    "start_line": 198,
    "end_line": 198,
    "code": "final boolean htmlSafe;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "formattingStyle",
    "start_line": 199,
    "end_line": 199,
    "code": "final FormattingStyle formattingStyle;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "strictness",
    "start_line": 200,
    "end_line": 200,
    "code": "final Strictness strictness;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "serializeSpecialFloatingPointValues",
    "start_line": 201,
    "end_line": 201,
    "code": "final boolean serializeSpecialFloatingPointValues;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "useJdkUnsafe",
    "start_line": 202,
    "end_line": 202,
    "code": "final boolean useJdkUnsafe;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "datePattern",
    "start_line": 203,
    "end_line": 203,
    "code": "final String datePattern;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "dateStyle",
    "start_line": 204,
    "end_line": 204,
    "code": "final int dateStyle;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "timeStyle",
    "start_line": 205,
    "end_line": 205,
    "code": "final int timeStyle;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "longSerializationPolicy",
    "start_line": 206,
    "end_line": 206,
    "code": "final LongSerializationPolicy longSerializationPolicy;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "builderFactories",
    "start_line": 207,
    "end_line": 207,
    "code": "final List<TypeAdapterFactory> builderFactories;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "builderHierarchyFactories",
    "start_line": 208,
    "end_line": 208,
    "code": "final List<TypeAdapterFactory> builderHierarchyFactories;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "objectToNumberStrategy",
    "start_line": 209,
    "end_line": 209,
    "code": "final ToNumberStrategy objectToNumberStrategy;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "numberToNumberStrategy",
    "start_line": 210,
    "end_line": 210,
    "code": "final ToNumberStrategy numberToNumberStrategy;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "field",
    "name": "reflectionFilters",
    "start_line": 211,
    "end_line": 211,
    "code": "final List<ReflectionAccessFilter> reflectionFilters;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "constructor",
    "name": "Gson",
    "start_line": 252,
    "end_line": 275,
    "code": "/**\r\n * Constructs a Gson object with default configuration. The default configuration has the\r\n * following settings:\r\n *\r\n * <ul>\r\n *   <li>The JSON generated by {@code toJson} methods is in compact representation. This means\r\n *       that all the unneeded white-space is removed. You can change this behavior with {@link\r\n *       GsonBuilder#setPrettyPrinting()}.\r\n *   <li>When the JSON generated contains more than one line, the kind of newline and indent to\r\n *       use can be configured with {@link GsonBuilder#setFormattingStyle(FormattingStyle)}.\r\n *   <li>The generated JSON omits all the fields that are null. Note that nulls in arrays are kept\r\n *       as is since an array is an ordered list. Moreover, if a field is not null, but its\r\n *       generated JSON is empty, the field is kept. You can configure Gson to serialize null\r\n *       values by setting {@link GsonBuilder#serializeNulls()}.\r\n *   <li>Gson provides default serialization and deserialization for Enums, {@link Map}, {@link\r\n *       java.net.URL}, {@link java.net.URI}, {@link java.util.Locale}, {@link java.util.Date},\r\n *       {@link java.math.BigDecimal}, and {@link java.math.BigInteger} classes. If you would\r\n *       prefer to change the default representation, you can do so by registering a type adapter\r\n *       through {@link GsonBuilder#registerTypeAdapter(Type, Object)}.\r\n *   <li>The default Date format is same as {@link java.text.DateFormat#DEFAULT}. This format\r\n *       ignores the millisecond portion of the date during serialization. You can change this by\r\n *       invoking {@link GsonBuilder#setDateFormat(int, int)} or {@link\r\n *       GsonBuilder#setDateFormat(String)}.\r\n *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation. You\r\n *       can enable Gson to serialize/deserialize only those fields marked with this annotation\r\n *       through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}.\r\n *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You\r\n *       can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.\r\n *   <li>The default field naming policy for the output JSON is same as in Java. So, a Java class\r\n *       field {@code versionNumber} will be output as {@code \"versionNumber\"} in JSON. The same\r\n *       rules are applied for mapping incoming JSON to the Java classes. You can change this\r\n *       policy through {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}.\r\n *   <li>By default, Gson excludes {@code transient} or {@code static} fields from consideration\r\n *       for serialization and deserialization. You can change this behavior through {@link\r\n *       GsonBuilder#excludeFieldsWithModifiers(int...)}.\r\n *   <li>No explicit strictness is set. You can change this by calling {@link\r\n *       GsonBuilder#setStrictness(Strictness)}.\r\n * </ul>\r\n */\r\npublic Gson() {\r\n    this(Excluder.DEFAULT, DEFAULT_FIELD_NAMING_STRATEGY, Collections.emptyMap(), DEFAULT_SERIALIZE_NULLS, DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML, DEFAULT_FORMATTING_STYLE, DEFAULT_STRICTNESS, DEFAULT_SPECIALIZE_FLOAT_VALUES, DEFAULT_USE_JDK_UNSAFE, LongSerializationPolicy.DEFAULT, DEFAULT_DATE_PATTERN, DateFormat.DEFAULT, DateFormat.DEFAULT, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), DEFAULT_OBJECT_TO_NUMBER_STRATEGY, DEFAULT_NUMBER_TO_NUMBER_STRATEGY, Collections.emptyList());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "constructor",
    "name": "Gson",
    "start_line": 277,
    "end_line": 398,
    "code": "Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy, Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls, boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe, FormattingStyle formattingStyle, Strictness strictness, boolean serializeSpecialFloatingPointValues, boolean useJdkUnsafe, LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> builderFactories, List<TypeAdapterFactory> builderHierarchyFactories, List<TypeAdapterFactory> factoriesToBeAdded, ToNumberStrategy objectToNumberStrategy, ToNumberStrategy numberToNumberStrategy, List<ReflectionAccessFilter> reflectionFilters) {\r\n    this.excluder = excluder;\r\n    this.fieldNamingStrategy = fieldNamingStrategy;\r\n    this.instanceCreators = instanceCreators;\r\n    this.constructorConstructor = new ConstructorConstructor(instanceCreators, useJdkUnsafe, reflectionFilters);\r\n    this.serializeNulls = serializeNulls;\r\n    this.complexMapKeySerialization = complexMapKeySerialization;\r\n    this.generateNonExecutableJson = generateNonExecutableGson;\r\n    this.htmlSafe = htmlSafe;\r\n    this.formattingStyle = formattingStyle;\r\n    this.strictness = strictness;\r\n    this.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;\r\n    this.useJdkUnsafe = useJdkUnsafe;\r\n    this.longSerializationPolicy = longSerializationPolicy;\r\n    this.datePattern = datePattern;\r\n    this.dateStyle = dateStyle;\r\n    this.timeStyle = timeStyle;\r\n    this.builderFactories = builderFactories;\r\n    this.builderHierarchyFactories = builderHierarchyFactories;\r\n    this.objectToNumberStrategy = objectToNumberStrategy;\r\n    this.numberToNumberStrategy = numberToNumberStrategy;\r\n    this.reflectionFilters = reflectionFilters;\r\n    List<TypeAdapterFactory> factories = new ArrayList<>();\r\n    // built-in type adapters that cannot be overridden\r\n    factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);\r\n    factories.add(ObjectTypeAdapter.getFactory(objectToNumberStrategy));\r\n    // the excluder must precede all adapters that handle user-defined types\r\n    factories.add(excluder);\r\n    // users' type adapters\r\n    factories.addAll(factoriesToBeAdded);\r\n    // type adapters for basic platform types\r\n    factories.add(TypeAdapters.STRING_FACTORY);\r\n    factories.add(TypeAdapters.INTEGER_FACTORY);\r\n    factories.add(TypeAdapters.BOOLEAN_FACTORY);\r\n    factories.add(TypeAdapters.BYTE_FACTORY);\r\n    factories.add(TypeAdapters.SHORT_FACTORY);\r\n    TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);\r\n    factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));\r\n    factories.add(TypeAdapters.newFactory(double.class, Double.class, doubleAdapter(serializeSpecialFloatingPointValues)));\r\n    factories.add(TypeAdapters.newFactory(float.class, Float.class, floatAdapter(serializeSpecialFloatingPointValues)));\r\n    factories.add(NumberTypeAdapter.getFactory(numberToNumberStrategy));\r\n    factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);\r\n    factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);\r\n    factories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));\r\n    factories.add(TypeAdapters.newFactory(AtomicLongArray.class, atomicLongArrayAdapter(longAdapter)));\r\n    factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);\r\n    factories.add(TypeAdapters.CHARACTER_FACTORY);\r\n    factories.add(TypeAdapters.STRING_BUILDER_FACTORY);\r\n    factories.add(TypeAdapters.STRING_BUFFER_FACTORY);\r\n    factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));\r\n    factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));\r\n    // Add adapter for LazilyParsedNumber because user can obtain it from Gson and then try to\r\n    // serialize it again\r\n    factories.add(TypeAdapters.newFactory(LazilyParsedNumber.class, TypeAdapters.LAZILY_PARSED_NUMBER));\r\n    factories.add(TypeAdapters.URL_FACTORY);\r\n    factories.add(TypeAdapters.URI_FACTORY);\r\n    factories.add(TypeAdapters.UUID_FACTORY);\r\n    factories.add(TypeAdapters.CURRENCY_FACTORY);\r\n    factories.add(TypeAdapters.LOCALE_FACTORY);\r\n    factories.add(TypeAdapters.INET_ADDRESS_FACTORY);\r\n    factories.add(TypeAdapters.BIT_SET_FACTORY);\r\n    factories.add(DefaultDateTypeAdapter.DEFAULT_STYLE_FACTORY);\r\n    factories.add(TypeAdapters.CALENDAR_FACTORY);\r\n    if (SqlTypesSupport.SUPPORTS_SQL_TYPES) {\r\n        factories.add(SqlTypesSupport.TIME_FACTORY);\r\n        factories.add(SqlTypesSupport.DATE_FACTORY);\r\n        factories.add(SqlTypesSupport.TIMESTAMP_FACTORY);\r\n    }\r\n    factories.add(ArrayTypeAdapter.FACTORY);\r\n    factories.add(TypeAdapters.CLASS_FACTORY);\r\n    // type adapters for composite and user-defined types\r\n    factories.add(new CollectionTypeAdapterFactory(constructorConstructor));\r\n    factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\r\n    this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);\r\n    factories.add(jsonAdapterFactory);\r\n    factories.add(TypeAdapters.ENUM_FACTORY);\r\n    factories.add(new ReflectiveTypeAdapterFactory(constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory, reflectionFilters));\r\n    this.factories = Collections.unmodifiableList(factories);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "newBuilder",
    "start_line": 407,
    "end_line": 409,
    "code": "/**\r\n * Returns a new GsonBuilder containing all custom factories and configuration used by the current\r\n * instance.\r\n *\r\n * @return a GsonBuilder instance.\r\n * @since 2.8.3\r\n */\r\npublic GsonBuilder newBuilder() {\r\n    return new GsonBuilder(this);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "excluder",
    "start_line": 415,
    "end_line": 418,
    "code": "/**\r\n * @deprecated This method by accident exposes an internal Gson class; it might be removed in a\r\n *     future version.\r\n */\r\n@Deprecated\r\npublic Excluder excluder() {\r\n    return excluder;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fieldNamingStrategy",
    "start_line": 425,
    "end_line": 427,
    "code": "/**\r\n * Returns the field naming strategy used by this Gson instance.\r\n *\r\n * @see GsonBuilder#setFieldNamingStrategy(FieldNamingStrategy)\r\n */\r\npublic FieldNamingStrategy fieldNamingStrategy() {\r\n    return fieldNamingStrategy;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "serializeNulls",
    "start_line": 435,
    "end_line": 437,
    "code": "/**\r\n * Returns whether this Gson instance is serializing JSON object properties with {@code null}\r\n * values, or just omits them.\r\n *\r\n * @see GsonBuilder#serializeNulls()\r\n */\r\npublic boolean serializeNulls() {\r\n    return serializeNulls;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "htmlSafe",
    "start_line": 445,
    "end_line": 447,
    "code": "/**\r\n * Returns whether this Gson instance produces JSON output which is HTML-safe, that means all HTML\r\n * characters are escaped.\r\n *\r\n * @see GsonBuilder#disableHtmlEscaping()\r\n */\r\npublic boolean htmlSafe() {\r\n    return htmlSafe;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "doubleAdapter",
    "start_line": 449,
    "end_line": 474,
    "code": "private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\r\n    if (serializeSpecialFloatingPointValues) {\r\n        return TypeAdapters.DOUBLE;\r\n    }\r\n    return new TypeAdapter<Number>() {\r\n\r\n        @Override\r\n        public Double read(JsonReader in) throws IOException {\r\n            if (in.peek() == JsonToken.NULL) {\r\n                in.nextNull();\r\n                return null;\r\n            }\r\n            return in.nextDouble();\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Number value) throws IOException {\r\n            if (value == null) {\r\n                out.nullValue();\r\n                return;\r\n            }\r\n            double doubleValue = value.doubleValue();\r\n            checkValidFloatingPoint(doubleValue);\r\n            out.value(doubleValue);\r\n        }\r\n    };\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "floatAdapter",
    "start_line": 476,
    "end_line": 504,
    "code": "private TypeAdapter<Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\r\n    if (serializeSpecialFloatingPointValues) {\r\n        return TypeAdapters.FLOAT;\r\n    }\r\n    return new TypeAdapter<Number>() {\r\n\r\n        @Override\r\n        public Float read(JsonReader in) throws IOException {\r\n            if (in.peek() == JsonToken.NULL) {\r\n                in.nextNull();\r\n                return null;\r\n            }\r\n            return (float) in.nextDouble();\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Number value) throws IOException {\r\n            if (value == null) {\r\n                out.nullValue();\r\n                return;\r\n            }\r\n            float floatValue = value.floatValue();\r\n            checkValidFloatingPoint(floatValue);\r\n            // For backward compatibility don't call `JsonWriter.value(float)` because that method has\r\n            // been newly added and not all custom JsonWriter implementations might override it yet\r\n            Number floatNumber = value instanceof Float ? value : floatValue;\r\n            out.value(floatNumber);\r\n        }\r\n    };\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "checkValidFloatingPoint",
    "start_line": 506,
    "end_line": 513,
    "code": "static void checkValidFloatingPoint(double value) {\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n        throw new IllegalArgumentException(value + \" is not a valid double value as per JSON specification. To override this\" + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "longAdapter",
    "start_line": 515,
    "end_line": 538,
    "code": "private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {\r\n    if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {\r\n        return TypeAdapters.LONG;\r\n    }\r\n    return new TypeAdapter<Number>() {\r\n\r\n        @Override\r\n        public Number read(JsonReader in) throws IOException {\r\n            if (in.peek() == JsonToken.NULL) {\r\n                in.nextNull();\r\n                return null;\r\n            }\r\n            return in.nextLong();\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Number value) throws IOException {\r\n            if (value == null) {\r\n                out.nullValue();\r\n                return;\r\n            }\r\n            out.value(value.toString());\r\n        }\r\n    };\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "atomicLongAdapter",
    "start_line": 540,
    "end_line": 553,
    "code": "private static TypeAdapter<AtomicLong> atomicLongAdapter(TypeAdapter<Number> longAdapter) {\r\n    return new TypeAdapter<AtomicLong>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, AtomicLong value) throws IOException {\r\n            longAdapter.write(out, value.get());\r\n        }\r\n\r\n        @Override\r\n        public AtomicLong read(JsonReader in) throws IOException {\r\n            Number value = longAdapter.read(in);\r\n            return new AtomicLong(value.longValue());\r\n        }\r\n    }.nullSafe();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "atomicLongArrayAdapter",
    "start_line": 555,
    "end_line": 584,
    "code": "private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(TypeAdapter<Number> longAdapter) {\r\n    return new TypeAdapter<AtomicLongArray>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, AtomicLongArray value) throws IOException {\r\n            out.beginArray();\r\n            for (int i = 0, length = value.length(); i < length; i++) {\r\n                longAdapter.write(out, value.get(i));\r\n            }\r\n            out.endArray();\r\n        }\r\n\r\n        @Override\r\n        public AtomicLongArray read(JsonReader in) throws IOException {\r\n            List<Long> list = new ArrayList<>();\r\n            in.beginArray();\r\n            while (in.hasNext()) {\r\n                long value = longAdapter.read(in).longValue();\r\n                list.add(value);\r\n            }\r\n            in.endArray();\r\n            int length = list.size();\r\n            AtomicLongArray array = new AtomicLongArray(length);\r\n            for (int i = 0; i < length; ++i) {\r\n                array.set(i, list.get(i));\r\n            }\r\n            return array;\r\n        }\r\n    }.nullSafe();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "getAdapter",
    "start_line": 597,
    "end_line": 656,
    "code": "/**\r\n * Returns the type adapter for {@code type}.\r\n *\r\n * <p>When calling this method concurrently from multiple threads and requesting an adapter for\r\n * the same type this method may return different {@code TypeAdapter} instances. However, that\r\n * should normally not be an issue because {@code TypeAdapter} implementations are supposed to be\r\n * stateless.\r\n *\r\n * @throws IllegalArgumentException if this Gson instance cannot serialize and deserialize {@code\r\n *     type}.\r\n */\r\npublic <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\r\n    Objects.requireNonNull(type, \"type must not be null\");\r\n    TypeAdapter<?> cached = typeTokenCache.get(type);\r\n    if (cached != null) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        TypeAdapter<T> adapter = (TypeAdapter<T>) cached;\r\n        return adapter;\r\n    }\r\n    Map<TypeToken<?>, TypeAdapter<?>> threadCalls = threadLocalAdapterResults.get();\r\n    boolean isInitialAdapterRequest = false;\r\n    if (threadCalls == null) {\r\n        threadCalls = new HashMap<>();\r\n        threadLocalAdapterResults.set(threadCalls);\r\n        isInitialAdapterRequest = true;\r\n    } else {\r\n        // the key and value type parameters always agree\r\n        @SuppressWarnings(\"unchecked\")\r\n        TypeAdapter<T> ongoingCall = (TypeAdapter<T>) threadCalls.get(type);\r\n        if (ongoingCall != null) {\r\n            return ongoingCall;\r\n        }\r\n    }\r\n    TypeAdapter<T> candidate = null;\r\n    try {\r\n        FutureTypeAdapter<T> call = new FutureTypeAdapter<>();\r\n        threadCalls.put(type, call);\r\n        for (TypeAdapterFactory factory : factories) {\r\n            candidate = factory.create(this, type);\r\n            if (candidate != null) {\r\n                call.setDelegate(candidate);\r\n                // Replace future adapter with actual adapter\r\n                threadCalls.put(type, candidate);\r\n                break;\r\n            }\r\n        }\r\n    } finally {\r\n        if (isInitialAdapterRequest) {\r\n            threadLocalAdapterResults.remove();\r\n        }\r\n    }\r\n    if (candidate == null) {\r\n        throw new IllegalArgumentException(\"GSON (\" + GsonBuildConfig.VERSION + \") cannot handle \" + type);\r\n    }\r\n    if (isInitialAdapterRequest) {\r\n        /*\r\n       * Publish resolved adapters to all threads\r\n       * Can only do this for the initial request because cyclic dependency TypeA -> TypeB -> TypeA\r\n       * would otherwise publish adapter for TypeB which uses not yet resolved adapter for TypeA\r\n       * See https://github.com/google/gson/issues/625\r\n       */\r\n        typeTokenCache.putAll(threadCalls);\r\n    }\r\n    return candidate;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "getAdapter",
    "start_line": 664,
    "end_line": 666,
    "code": "/**\r\n * Returns the type adapter for {@code type}.\r\n *\r\n * @throws IllegalArgumentException if this Gson instance cannot serialize and deserialize {@code\r\n *     type}.\r\n */\r\npublic <T> TypeAdapter<T> getAdapter(Class<T> type) {\r\n    return getAdapter(TypeToken.get(type));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "getDelegateAdapter",
    "start_line": 729,
    "end_line": 758,
    "code": "/**\r\n * This method is used to get an alternate type adapter for the specified type. This is used to\r\n * access a type adapter that is overridden by a {@link TypeAdapterFactory} that you may have\r\n * registered. This feature is typically used when you want to register a type adapter that does a\r\n * little bit of work but then delegates further processing to the Gson default type adapter. Here\r\n * is an example:\r\n *\r\n * <p>Let's say we want to write a type adapter that counts the number of objects being read from\r\n * or written to JSON. We can achieve this by writing a type adapter factory that uses the {@code\r\n * getDelegateAdapter} method:\r\n *\r\n * <pre>{@code\r\n * class StatsTypeAdapterFactory implements TypeAdapterFactory {\r\n *   public int numReads = 0;\r\n *   public int numWrites = 0;\r\n *   public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n *     TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\r\n *     return new TypeAdapter<T>() {\r\n *       public void write(JsonWriter out, T value) throws IOException {\r\n *         ++numWrites;\r\n *         delegate.write(out, value);\r\n *       }\r\n *       public T read(JsonReader in) throws IOException {\r\n *         ++numReads;\r\n *         return delegate.read(in);\r\n *       }\r\n *     };\r\n *   }\r\n * }\r\n * }</pre>\r\n *\r\n * This factory can now be used like this:\r\n *\r\n * <pre>{@code\r\n * StatsTypeAdapterFactory stats = new StatsTypeAdapterFactory();\r\n * Gson gson = new GsonBuilder().registerTypeAdapterFactory(stats).create();\r\n * // Call gson.toJson() and fromJson methods on objects\r\n * System.out.println(\"Num JSON reads: \" + stats.numReads);\r\n * System.out.println(\"Num JSON writes: \" + stats.numWrites);\r\n * }</pre>\r\n *\r\n * Note that this call will skip all factories registered before {@code skipPast}. In case of\r\n * multiple TypeAdapterFactories registered it is up to the caller of this function to ensure that\r\n * the order of registration does not prevent this method from reaching a factory they would\r\n * expect to reply from this call. Note that since you can not override the type adapter factories\r\n * for some types, see {@link GsonBuilder#registerTypeAdapter(Type, Object)}, our stats factory\r\n * will not count the number of instances of those types that will be read or written.\r\n *\r\n * <p>If {@code skipPast} is a factory which has neither been registered on the {@link\r\n * GsonBuilder} nor specified with the {@link JsonAdapter @JsonAdapter} annotation on a class,\r\n * then this method behaves as if {@link #getAdapter(TypeToken)} had been called. This also means\r\n * that for fields with {@code @JsonAdapter} annotation this method behaves normally like {@code\r\n * getAdapter} (except for corner cases where a custom {@link InstanceCreator} is used to create\r\n * an instance of the factory).\r\n *\r\n * @param skipPast The type adapter factory that needs to be skipped while searching for a\r\n *     matching type adapter. In most cases, you should just pass <i>this</i> (the type adapter\r\n *     factory from where {@code getDelegateAdapter} method is being invoked).\r\n * @param type Type for which the delegate adapter is being searched for.\r\n * @since 2.2\r\n */\r\npublic <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\r\n    Objects.requireNonNull(skipPast, \"skipPast must not be null\");\r\n    Objects.requireNonNull(type, \"type must not be null\");\r\n    if (jsonAdapterFactory.isClassJsonAdapterFactory(type, skipPast)) {\r\n        skipPast = jsonAdapterFactory;\r\n    }\r\n    boolean skipPastFound = false;\r\n    for (TypeAdapterFactory factory : factories) {\r\n        if (!skipPastFound) {\r\n            if (factory == skipPast) {\r\n                skipPastFound = true;\r\n            }\r\n            continue;\r\n        }\r\n        TypeAdapter<T> candidate = factory.create(this, type);\r\n        if (candidate != null) {\r\n            return candidate;\r\n        }\r\n    }\r\n    if (skipPastFound) {\r\n        throw new IllegalArgumentException(\"GSON cannot serialize or deserialize \" + type);\r\n    } else {\r\n        // Probably a factory from @JsonAdapter on a field\r\n        return getAdapter(type);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJsonTree",
    "start_line": 774,
    "end_line": 779,
    "code": "/**\r\n * This method serializes the specified object into its equivalent representation as a tree of\r\n * {@link JsonElement}s. This method should be used when the specified object is not a generic\r\n * type. This method uses {@link Class#getClass()} to get the type for the specified object, but\r\n * the {@code getClass()} loses the generic type information because of the Type Erasure feature\r\n * of Java. Note that this method works fine if any of the object fields are of generic type, just\r\n * the object itself should not be of a generic type. If the object is of generic type, use {@link\r\n * #toJsonTree(Object, Type)} instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @return JSON representation of {@code src}.\r\n * @since 1.4\r\n * @see #toJsonTree(Object, Type)\r\n */\r\npublic JsonElement toJsonTree(Object src) {\r\n    if (src == null) {\r\n        return JsonNull.INSTANCE;\r\n    }\r\n    return toJsonTree(src, src.getClass());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJsonTree",
    "start_line": 799,
    "end_line": 803,
    "code": "/**\r\n * This method serializes the specified object, including those of generic types, into its\r\n * equivalent representation as a tree of {@link JsonElement}s. This method must be used if the\r\n * specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}\r\n * instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n *     Collection<Foo>}, you should use:\r\n *     <pre>\r\n * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n * </pre>\r\n *\r\n * @return JSON representation of {@code src}.\r\n * @since 1.4\r\n * @see #toJsonTree(Object)\r\n */\r\npublic JsonElement toJsonTree(Object src, Type typeOfSrc) {\r\n    JsonTreeWriter writer = new JsonTreeWriter();\r\n    toJson(src, typeOfSrc, writer);\r\n    return writer.get();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 820,
    "end_line": 825,
    "code": "/**\r\n * This method serializes the specified object into its equivalent JSON representation. This\r\n * method should be used when the specified object is not a generic type. This method uses {@link\r\n * Class#getClass()} to get the type for the specified object, but the {@code getClass()} loses\r\n * the generic type information because of the Type Erasure feature of Java. Note that this method\r\n * works fine if any of the object fields are of generic type, just the object itself should not\r\n * be of a generic type. If the object is of generic type, use {@link #toJson(Object, Type)}\r\n * instead. If you want to write out the object to a {@link Writer}, use {@link #toJson(Object,\r\n * Appendable)} instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @return JSON representation of {@code src}.\r\n * @see #toJson(Object, Appendable)\r\n * @see #toJson(Object, Type)\r\n */\r\npublic String toJson(Object src) {\r\n    if (src == null) {\r\n        return toJson(JsonNull.INSTANCE);\r\n    }\r\n    return toJson(src, src.getClass());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 845,
    "end_line": 849,
    "code": "/**\r\n * This method serializes the specified object, including those of generic types, into its\r\n * equivalent JSON representation. This method must be used if the specified object is a generic\r\n * type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\r\n * the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n *     Collection<Foo>}, you should use:\r\n *     <pre>\r\n * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n * </pre>\r\n *\r\n * @return JSON representation of {@code src}.\r\n * @see #toJson(Object, Type, Appendable)\r\n * @see #toJson(Object)\r\n */\r\npublic String toJson(Object src, Type typeOfSrc) {\r\n    StringBuilder writer = new StringBuilder();\r\n    toJson(src, typeOfSrc, writer);\r\n    return writer.toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 867,
    "end_line": 873,
    "code": "/**\r\n * This method serializes the specified object into its equivalent JSON representation and writes\r\n * it to the writer. This method should be used when the specified object is not a generic type.\r\n * This method uses {@link Class#getClass()} to get the type for the specified object, but the\r\n * {@code getClass()} loses the generic type information because of the Type Erasure feature of\r\n * Java. Note that this method works fine if any of the object fields are of generic type, just\r\n * the object itself should not be of a generic type. If the object is of generic type, use {@link\r\n * #toJson(Object, Type, Appendable)} instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @param writer Writer to which the JSON representation needs to be written\r\n * @throws JsonIOException if there was a problem writing to the writer\r\n * @since 1.2\r\n * @see #toJson(Object)\r\n * @see #toJson(Object, Type, Appendable)\r\n */\r\npublic void toJson(Object src, Appendable writer) throws JsonIOException {\r\n    if (src != null) {\r\n        toJson(src, src.getClass(), writer);\r\n    } else {\r\n        toJson(JsonNull.INSTANCE, writer);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 895,
    "end_line": 902,
    "code": "/**\r\n * This method serializes the specified object, including those of generic types, into its\r\n * equivalent JSON representation and writes it to the writer. This method must be used if the\r\n * specified object is a generic type. For non-generic objects, use {@link #toJson(Object,\r\n * Appendable)} instead.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @param typeOfSrc The specific genericized type of src. You can obtain this type by using the\r\n *     {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for {@code\r\n *     Collection<Foo>}, you should use:\r\n *     <pre>\r\n * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\r\n * </pre>\r\n *\r\n * @param writer Writer to which the JSON representation of src needs to be written\r\n * @throws JsonIOException if there was a problem writing to the writer\r\n * @since 1.2\r\n * @see #toJson(Object, Type)\r\n * @see #toJson(Object, Appendable)\r\n */\r\npublic void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\r\n    try {\r\n        JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\r\n        toJson(src, typeOfSrc, jsonWriter);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 925,
    "end_line": 954,
    "code": "/**\r\n * Writes the JSON representation of {@code src} of type {@code typeOfSrc} to {@code writer}.\r\n *\r\n * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n * explicit strictness setting}, this setting will be used for writing the JSON regardless of the\r\n * {@linkplain JsonWriter#getStrictness() strictness} of the provided {@link JsonWriter}. For\r\n * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the writer\r\n * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n * Strictness#LENIENT} mode.<br>\r\n * Note that in all cases the old strictness setting of the writer will be restored when this\r\n * method returns.\r\n *\r\n * <p>The 'HTML-safe' and 'serialize {@code null}' settings of this {@code Gson} instance\r\n * (configured by the {@link GsonBuilder}) are applied, and the original settings of the writer\r\n * are restored once this method returns.\r\n *\r\n * @param src the object for which JSON representation is to be created\r\n * @param typeOfSrc the type of the object to be written\r\n * @param writer Writer to which the JSON representation of src needs to be written\r\n * @throws JsonIOException if there was a problem writing to the writer\r\n */\r\npublic void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<Object> adapter = (TypeAdapter<Object>) getAdapter(TypeToken.get(typeOfSrc));\r\n    Strictness oldStrictness = writer.getStrictness();\r\n    if (this.strictness != null) {\r\n        writer.setStrictness(this.strictness);\r\n    } else if (writer.getStrictness() == Strictness.LEGACY_STRICT) {\r\n        // For backward compatibility change to LENIENT if writer has default strictness LEGACY_STRICT\r\n        writer.setStrictness(Strictness.LENIENT);\r\n    }\r\n    boolean oldHtmlSafe = writer.isHtmlSafe();\r\n    boolean oldSerializeNulls = writer.getSerializeNulls();\r\n    writer.setHtmlSafe(htmlSafe);\r\n    writer.setSerializeNulls(serializeNulls);\r\n    try {\r\n        adapter.write(writer, src);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    } catch (AssertionError e) {\r\n        throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n    } finally {\r\n        writer.setStrictness(oldStrictness);\r\n        writer.setHtmlSafe(oldHtmlSafe);\r\n        writer.setSerializeNulls(oldSerializeNulls);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 963,
    "end_line": 967,
    "code": "/**\r\n * Converts a tree of {@link JsonElement}s into its equivalent JSON representation.\r\n *\r\n * @param jsonElement root of a tree of {@link JsonElement}s\r\n * @return JSON String representation of the tree.\r\n * @since 1.4\r\n */\r\npublic String toJson(JsonElement jsonElement) {\r\n    StringBuilder writer = new StringBuilder();\r\n    toJson(jsonElement, writer);\r\n    return writer.toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 977,
    "end_line": 984,
    "code": "/**\r\n * Writes out the equivalent JSON for a tree of {@link JsonElement}s.\r\n *\r\n * @param jsonElement root of a tree of {@link JsonElement}s\r\n * @param writer Writer to which the JSON representation needs to be written\r\n * @throws JsonIOException if there was a problem writing to the writer\r\n * @since 1.4\r\n */\r\npublic void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {\r\n    try {\r\n        JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\r\n        toJson(jsonElement, jsonWriter);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 1006,
    "end_line": 1033,
    "code": "/**\r\n * Writes the JSON for {@code jsonElement} to {@code writer}.\r\n *\r\n * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n * explicit strictness setting}, this setting will be used for writing the JSON regardless of the\r\n * {@linkplain JsonWriter#getStrictness() strictness} of the provided {@link JsonWriter}. For\r\n * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the writer\r\n * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n * Strictness#LENIENT} mode.<br>\r\n * Note that in all cases the old strictness setting of the writer will be restored when this\r\n * method returns.\r\n *\r\n * <p>The 'HTML-safe' and 'serialize {@code null}' settings of this {@code Gson} instance\r\n * (configured by the {@link GsonBuilder}) are applied, and the original settings of the writer\r\n * are restored once this method returns.\r\n *\r\n * @param jsonElement the JSON element to be written\r\n * @param writer the JSON writer to which the provided element will be written\r\n * @throws JsonIOException if there was a problem writing to the writer\r\n */\r\npublic void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {\r\n    Strictness oldStrictness = writer.getStrictness();\r\n    boolean oldHtmlSafe = writer.isHtmlSafe();\r\n    boolean oldSerializeNulls = writer.getSerializeNulls();\r\n    writer.setHtmlSafe(htmlSafe);\r\n    writer.setSerializeNulls(serializeNulls);\r\n    if (this.strictness != null) {\r\n        writer.setStrictness(this.strictness);\r\n    } else if (writer.getStrictness() == Strictness.LEGACY_STRICT) {\r\n        // For backward compatibility change to LENIENT if writer has default strictness LEGACY_STRICT\r\n        writer.setStrictness(Strictness.LENIENT);\r\n    }\r\n    try {\r\n        Streams.write(jsonElement, writer);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    } catch (AssertionError e) {\r\n        throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n    } finally {\r\n        writer.setStrictness(oldStrictness);\r\n        writer.setHtmlSafe(oldHtmlSafe);\r\n        writer.setSerializeNulls(oldSerializeNulls);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "newJsonWriter",
    "start_line": 1052,
    "end_line": 1062,
    "code": "/**\r\n * Returns a new JSON writer configured for the settings on this Gson instance.\r\n *\r\n * <p>The following settings are considered:\r\n *\r\n * <ul>\r\n *   <li>{@link GsonBuilder#disableHtmlEscaping()}\r\n *   <li>{@link GsonBuilder#generateNonExecutableJson()}\r\n *   <li>{@link GsonBuilder#serializeNulls()}\r\n *   <li>{@link GsonBuilder#setStrictness(Strictness)}. If no {@linkplain\r\n *       GsonBuilder#setStrictness(Strictness) explicit strictness has been set} the created\r\n *       writer will have a strictness of {@link Strictness#LEGACY_STRICT}. Otherwise, the\r\n *       strictness of the {@code Gson} instance will be used for the created writer.\r\n *   <li>{@link GsonBuilder#setPrettyPrinting()}\r\n *   <li>{@link GsonBuilder#setFormattingStyle(FormattingStyle)}\r\n * </ul>\r\n */\r\npublic JsonWriter newJsonWriter(Writer writer) throws IOException {\r\n    if (generateNonExecutableJson) {\r\n        writer.write(JSON_NON_EXECUTABLE_PREFIX);\r\n    }\r\n    JsonWriter jsonWriter = new JsonWriter(writer);\r\n    jsonWriter.setFormattingStyle(formattingStyle);\r\n    jsonWriter.setHtmlSafe(htmlSafe);\r\n    jsonWriter.setStrictness(strictness == null ? Strictness.LEGACY_STRICT : strictness);\r\n    jsonWriter.setSerializeNulls(serializeNulls);\r\n    return jsonWriter;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "newJsonReader",
    "start_line": 1076,
    "end_line": 1080,
    "code": "/**\r\n * Returns a new JSON reader configured for the settings on this Gson instance.\r\n *\r\n * <p>The following settings are considered:\r\n *\r\n * <ul>\r\n *   <li>{@link GsonBuilder#setStrictness(Strictness)}. If no {@linkplain\r\n *       GsonBuilder#setStrictness(Strictness) explicit strictness has been set} the created\r\n *       reader will have a strictness of {@link Strictness#LEGACY_STRICT}. Otherwise, the\r\n *       strictness of the {@code Gson} instance will be used for the created reader.\r\n * </ul>\r\n */\r\npublic JsonReader newJsonReader(Reader reader) {\r\n    JsonReader jsonReader = new JsonReader(reader);\r\n    jsonReader.setStrictness(strictness == null ? Strictness.LEGACY_STRICT : strictness);\r\n    return jsonReader;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1105,
    "end_line": 1107,
    "code": "/**\r\n * This method deserializes the specified JSON into an object of the specified class. It is not\r\n * suitable to use if the specified class is a generic type since it will not have the generic\r\n * type information because of the Type Erasure feature of Java. Therefore, this method should not\r\n * be used if the desired type is a generic type. Note that this method works fine if any of the\r\n * fields of the specified object are generics, just the object itself should not be a generic\r\n * type. For the cases when the object is of generic type, invoke {@link #fromJson(String,\r\n * TypeToken)}. If you have the JSON in a {@link Reader} instead of a String, use {@link\r\n * #fromJson(Reader, Class)} instead.\r\n *\r\n * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n * is trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the string from which the object is to be deserialized\r\n * @param classOfT the class of T\r\n * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n *     null} or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type\r\n *     classOfT\r\n * @see #fromJson(Reader, Class)\r\n * @see #fromJson(String, TypeToken)\r\n */\r\npublic <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\r\n    return fromJson(json, TypeToken.get(classOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1133,
    "end_line": 1136,
    "code": "/**\r\n * This method deserializes the specified JSON into an object of the specified type. This method\r\n * is useful if the specified object is a generic type. For non-generic objects, use {@link\r\n * #fromJson(String, Class)} instead. If you have the JSON in a {@link Reader} instead of a\r\n * String, use {@link #fromJson(Reader, Type)} instead.\r\n *\r\n * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n * {@link #fromJson(String, TypeToken)} instead since its return type is based on the {@code\r\n * TypeToken} and is therefore more type-safe.\r\n *\r\n * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n * is trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the string from which the object is to be deserialized\r\n * @param typeOfT The specific genericized type of src\r\n * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n *     null} or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @see #fromJson(Reader, Type)\r\n * @see #fromJson(String, Class)\r\n * @see #fromJson(String, TypeToken)\r\n */\r\n@SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\npublic <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\r\n    return (T) fromJson(json, TypeToken.get(typeOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1164,
    "end_line": 1170,
    "code": "/**\r\n * This method deserializes the specified JSON into an object of the specified type. This method\r\n * is useful if the specified object is a generic type. For non-generic objects, use {@link\r\n * #fromJson(String, Class)} instead. If you have the JSON in a {@link Reader} instead of a\r\n * String, use {@link #fromJson(Reader, TypeToken)} instead.\r\n *\r\n * <p>An exception is thrown if the JSON string has multiple top-level JSON elements, or if there\r\n * is trailing data. Use {@link #fromJson(JsonReader, TypeToken)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the string from which the object is to be deserialized\r\n * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n *     for {@code Collection<Foo>}, you should use:\r\n *     <pre>\r\n * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n * </pre>\r\n *\r\n * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code\r\n *     null} or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of the type\r\n *     typeOfT\r\n * @see #fromJson(Reader, TypeToken)\r\n * @see #fromJson(String, Class)\r\n * @since 2.10\r\n */\r\npublic <T> T fromJson(String json, TypeToken<T> typeOfT) throws JsonSyntaxException {\r\n    if (json == null) {\r\n        return null;\r\n    }\r\n    StringReader reader = new StringReader(json);\r\n    return fromJson(reader, typeOfT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1195,
    "end_line": 1198,
    "code": "/**\r\n * This method deserializes the JSON read from the specified reader into an object of the\r\n * specified class. It is not suitable to use if the specified class is a generic type since it\r\n * will not have the generic type information because of the Type Erasure feature of Java.\r\n * Therefore, this method should not be used if the desired type is a generic type. Note that this\r\n * method works fine if any of the fields of the specified object are generics, just the object\r\n * itself should not be a generic type. For the cases when the object is of generic type, invoke\r\n * {@link #fromJson(Reader, TypeToken)}. If you have the JSON in a String form instead of a {@link\r\n * Reader}, use {@link #fromJson(String, Class)} instead.\r\n *\r\n * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n * trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the reader producing the JSON from which the object is to be deserialized.\r\n * @param classOfT the class of T\r\n * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n * @throws JsonIOException if there was a problem reading from the Reader\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @since 1.2\r\n * @see #fromJson(String, Class)\r\n * @see #fromJson(Reader, TypeToken)\r\n */\r\npublic <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {\r\n    return fromJson(json, TypeToken.get(classOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1225,
    "end_line": 1228,
    "code": "/**\r\n * This method deserializes the JSON read from the specified reader into an object of the\r\n * specified type. This method is useful if the specified object is a generic type. For\r\n * non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the JSON in a\r\n * String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\r\n *\r\n * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n * {@link #fromJson(Reader, TypeToken)} instead since its return type is based on the {@code\r\n * TypeToken} and is therefore more type-safe.\r\n *\r\n * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n * trailing data. Use {@link #fromJson(JsonReader, Type)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the reader producing JSON from which the object is to be deserialized\r\n * @param typeOfT The specific genericized type of src\r\n * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n * @throws JsonIOException if there was a problem reading from the Reader\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @since 1.2\r\n * @see #fromJson(String, Type)\r\n * @see #fromJson(Reader, Class)\r\n * @see #fromJson(Reader, TypeToken)\r\n */\r\n@SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\npublic <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\r\n    return (T) fromJson(json, TypeToken.get(typeOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1256,
    "end_line": 1262,
    "code": "/**\r\n * This method deserializes the JSON read from the specified reader into an object of the\r\n * specified type. This method is useful if the specified object is a generic type. For\r\n * non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the JSON in a\r\n * String form instead of a {@link Reader}, use {@link #fromJson(String, TypeToken)} instead.\r\n *\r\n * <p>An exception is thrown if the JSON data has multiple top-level JSON elements, or if there is\r\n * trailing data. Use {@link #fromJson(JsonReader, TypeToken)} if this behavior is not desired.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the reader producing JSON from which the object is to be deserialized\r\n * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n *     for {@code Collection<Foo>}, you should use:\r\n *     <pre>\r\n * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n * </pre>\r\n *\r\n * @return an object of type T from the Reader. Returns {@code null} if {@code json} is at EOF.\r\n * @throws JsonIOException if there was a problem reading from the Reader\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type of\r\n *     typeOfT\r\n * @see #fromJson(String, TypeToken)\r\n * @see #fromJson(Reader, Class)\r\n * @since 2.10\r\n */\r\npublic <T> T fromJson(Reader json, TypeToken<T> typeOfT) throws JsonIOException, JsonSyntaxException {\r\n    JsonReader jsonReader = newJsonReader(json);\r\n    T object = fromJson(jsonReader, typeOfT);\r\n    assertFullConsumption(object, jsonReader);\r\n    return object;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1300,
    "end_line": 1304,
    "code": "// fromJson(JsonReader, Class) is unfortunately missing and cannot be added now without breaking\r\n// source compatibility in certain cases, see\r\n// https://github.com/google/gson/pull/1700#discussion_r973764414\r\n/**\r\n * Reads the next JSON value from {@code reader} and converts it to an object of type {@code\r\n * typeOfT}. Returns {@code null}, if the {@code reader} is at EOF.\r\n *\r\n * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n * {@link #fromJson(JsonReader, TypeToken)} instead since its return type is based on the {@code\r\n * TypeToken} and is therefore more type-safe. If the provided type is a {@code Class} the {@code\r\n * TypeToken} can be created with {@link TypeToken#get(Class)}.\r\n *\r\n * <p>Unlike the other {@code fromJson} methods, no exception is thrown if the JSON data has\r\n * multiple top-level JSON elements, or if there is trailing data.\r\n *\r\n * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n * explicit strictness setting}, this setting will be used for reading the JSON regardless of the\r\n * {@linkplain JsonReader#getStrictness() strictness} of the provided {@link JsonReader}. For\r\n * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the reader\r\n * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n * Strictness#LENIENT} mode.<br>\r\n * Note that in all cases the old strictness setting of the reader will be restored when this\r\n * method returns.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param reader the reader whose next JSON value should be deserialized\r\n * @param typeOfT The specific genericized type of src\r\n * @return an object of type T from the JsonReader. Returns {@code null} if {@code reader} is at\r\n *     EOF.\r\n * @throws JsonIOException if there was a problem reading from the JsonReader\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @see #fromJson(Reader, Type)\r\n * @see #fromJson(JsonReader, TypeToken)\r\n */\r\n@SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\npublic <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {\r\n    return (T) fromJson(reader, TypeToken.get(typeOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1342,
    "end_line": 1391,
    "code": "/**\r\n * Reads the next JSON value from {@code reader} and converts it to an object of type {@code\r\n * typeOfT}. Returns {@code null}, if the {@code reader} is at EOF. This method is useful if the\r\n * specified object is a generic type. For non-generic objects, {@link #fromJson(JsonReader,\r\n * Type)} can be called, or {@link TypeToken#get(Class)} can be used to create the type token.\r\n *\r\n * <p>Unlike the other {@code fromJson} methods, no exception is thrown if the JSON data has\r\n * multiple top-level JSON elements, or if there is trailing data.\r\n *\r\n * <p>If the {@code Gson} instance has an {@linkplain GsonBuilder#setStrictness(Strictness)\r\n * explicit strictness setting}, this setting will be used for reading the JSON regardless of the\r\n * {@linkplain JsonReader#getStrictness() strictness} of the provided {@link JsonReader}. For\r\n * legacy reasons, if the {@code Gson} instance has no explicit strictness setting and the reader\r\n * does not have the strictness {@link Strictness#STRICT}, the JSON will be written in {@link\r\n * Strictness#LENIENT} mode.<br>\r\n * Note that in all cases the old strictness setting of the reader will be restored when this\r\n * method returns.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param reader the reader whose next JSON value should be deserialized\r\n * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n *     for {@code Collection<Foo>}, you should use:\r\n *     <pre>\r\n * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n * </pre>\r\n *\r\n * @return an object of type T from the JsonReader. Returns {@code null} if {@code reader} is at\r\n *     EOF.\r\n * @throws JsonIOException if there was a problem reading from the JsonReader\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of the type\r\n *     typeOfT\r\n * @see #fromJson(Reader, TypeToken)\r\n * @see #fromJson(JsonReader, Type)\r\n * @since 2.10\r\n */\r\npublic <T> T fromJson(JsonReader reader, TypeToken<T> typeOfT) throws JsonIOException, JsonSyntaxException {\r\n    boolean isEmpty = true;\r\n    Strictness oldStrictness = reader.getStrictness();\r\n    if (this.strictness != null) {\r\n        reader.setStrictness(this.strictness);\r\n    } else if (reader.getStrictness() == Strictness.LEGACY_STRICT) {\r\n        // For backward compatibility change to LENIENT if reader has default strictness LEGACY_STRICT\r\n        reader.setStrictness(Strictness.LENIENT);\r\n    }\r\n    try {\r\n        JsonToken unused = reader.peek();\r\n        isEmpty = false;\r\n        TypeAdapter<T> typeAdapter = getAdapter(typeOfT);\r\n        T object = typeAdapter.read(reader);\r\n        Class<?> expectedTypeWrapped = Primitives.wrap(typeOfT.getRawType());\r\n        if (object != null && !expectedTypeWrapped.isInstance(object)) {\r\n            throw new ClassCastException(\"Type adapter '\" + typeAdapter + \"' returned wrong type; requested \" + typeOfT.getRawType() + \" but got instance of \" + object.getClass() + \"\\nVerify that the adapter was registered for the correct type.\");\r\n        }\r\n        return object;\r\n    } catch (EOFException e) {\r\n        /*\r\n       * For compatibility with JSON 1.5 and earlier, we return null for empty\r\n       * documents instead of throwing.\r\n       */\r\n        if (isEmpty) {\r\n            return null;\r\n        }\r\n        throw new JsonSyntaxException(e);\r\n    } catch (IllegalStateException e) {\r\n        throw new JsonSyntaxException(e);\r\n    } catch (IOException e) {\r\n        // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\r\n        throw new JsonSyntaxException(e);\r\n    } catch (AssertionError e) {\r\n        throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\r\n    } finally {\r\n        reader.setStrictness(oldStrictness);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1414,
    "end_line": 1416,
    "code": "/**\r\n * This method deserializes the JSON read from the specified parse tree into an object of the\r\n * specified type. It is not suitable to use if the specified class is a generic type since it\r\n * will not have the generic type information because of the Type Erasure feature of Java.\r\n * Therefore, this method should not be used if the desired type is a generic type. Note that this\r\n * method works fine if any of the fields of the specified object are generics, just the object\r\n * itself should not be a generic type. For the cases when the object is of generic type, invoke\r\n * {@link #fromJson(JsonElement, TypeToken)}.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n *     deserialized\r\n * @param classOfT The class of T\r\n * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n *     or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type\r\n *     classOfT\r\n * @since 1.3\r\n * @see #fromJson(Reader, Class)\r\n * @see #fromJson(JsonElement, TypeToken)\r\n */\r\npublic <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException {\r\n    return fromJson(json, TypeToken.get(classOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1440,
    "end_line": 1443,
    "code": "/**\r\n * This method deserializes the JSON read from the specified parse tree into an object of the\r\n * specified type. This method is useful if the specified object is a generic type. For\r\n * non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.\r\n *\r\n * <p>Since {@code Type} is not parameterized by T, this method is not type-safe and should be\r\n * used carefully. If you are creating the {@code Type} from a {@link TypeToken}, prefer using\r\n * {@link #fromJson(JsonElement, TypeToken)} instead since its return type is based on the {@code\r\n * TypeToken} and is therefore more type-safe.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n *     deserialized\r\n * @param typeOfT The specific genericized type of src\r\n * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n *     or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @since 1.3\r\n * @see #fromJson(Reader, Type)\r\n * @see #fromJson(JsonElement, Class)\r\n * @see #fromJson(JsonElement, TypeToken)\r\n */\r\n@SuppressWarnings({ \"unchecked\", \"TypeParameterUnusedInFormals\" })\r\npublic <T> T fromJson(JsonElement json, Type typeOfT) throws JsonSyntaxException {\r\n    return (T) fromJson(json, TypeToken.get(typeOfT));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 1467,
    "end_line": 1472,
    "code": "/**\r\n * This method deserializes the JSON read from the specified parse tree into an object of the\r\n * specified type. This method is useful if the specified object is a generic type. For\r\n * non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.\r\n *\r\n * @param <T> the type of the desired object\r\n * @param json the root of the parse tree of {@link JsonElement}s from which the object is to be\r\n *     deserialized\r\n * @param typeOfT The specific genericized type of src. You should create an anonymous subclass of\r\n *     {@code TypeToken} with the specific generic type arguments. For example, to get the type\r\n *     for {@code Collection<Foo>}, you should use:\r\n *     <pre>\r\n * new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}\r\n * </pre>\r\n *\r\n * @return an object of type T from the JSON. Returns {@code null} if {@code json} is {@code null}\r\n *     or if {@code json} is empty.\r\n * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\r\n * @see #fromJson(Reader, TypeToken)\r\n * @see #fromJson(JsonElement, Class)\r\n * @since 2.10\r\n */\r\npublic <T> T fromJson(JsonElement json, TypeToken<T> typeOfT) throws JsonSyntaxException {\r\n    if (json == null) {\r\n        return null;\r\n    }\r\n    return fromJson(new JsonTreeReader(json), typeOfT);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "assertFullConsumption",
    "start_line": 1474,
    "end_line": 1484,
    "code": "private static void assertFullConsumption(Object obj, JsonReader reader) {\r\n    try {\r\n        if (obj != null && reader.peek() != JsonToken.END_DOCUMENT) {\r\n            throw new JsonSyntaxException(\"JSON document was not fully consumed.\");\r\n        }\r\n    } catch (MalformedJsonException e) {\r\n        throw new JsonSyntaxException(e);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  },
  {
    "type": "method",
    "name": "toString",
    "start_line": 1533,
    "end_line": 1542,
    "code": "@Override\r\npublic String toString() {\r\n    return \"{serializeNulls:\" + serializeNulls + \",factories:\" + factories + \",instanceCreators:\" + constructorConstructor + \"}\";\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\Gson.java"
  }
]