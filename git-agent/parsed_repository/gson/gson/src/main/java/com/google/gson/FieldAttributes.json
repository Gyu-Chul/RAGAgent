[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.lang.annotation.Annotation",
    "start_line": 19,
    "end_line": 19,
    "code": "import java.lang.annotation.Annotation;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 20,
    "end_line": 20,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 21,
    "end_line": 21,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 22,
    "end_line": 22,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 23,
    "end_line": 23,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "import",
    "name": "java.util.Objects",
    "start_line": 24,
    "end_line": 24,
    "code": "import java.util.Objects;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "class",
    "name": "FieldAttributes",
    "start_line": 35,
    "end_line": 149,
    "code": "/**\r\n * A data object that stores attributes of a field.\r\n *\r\n * <p>This class is immutable; therefore, it can be safely shared across threads.\r\n *\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n * @since 1.4\r\n */\r\npublic final class FieldAttributes {\r\n\r\n    private final Field field;\r\n\r\n    /**\r\n     * Constructs a Field Attributes object from the {@code f}.\r\n     *\r\n     * @param f the field to pull attributes from\r\n     */\r\n    public FieldAttributes(Field f) {\r\n        this.field = Objects.requireNonNull(f);\r\n    }\r\n\r\n    /**\r\n     * Gets the declaring Class that contains this field\r\n     *\r\n     * @return the declaring class that contains this field\r\n     */\r\n    public Class<?> getDeclaringClass() {\r\n        return field.getDeclaringClass();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the field\r\n     *\r\n     * @return the name of the field\r\n     */\r\n    public String getName() {\r\n        return field.getName();\r\n    }\r\n\r\n    /**\r\n     * Returns the declared generic type of the field.\r\n     *\r\n     * <p>For example, assume the following class definition:\r\n     *\r\n     * <pre class=\"code\">\r\n     * public class Foo {\r\n     *   private String bar;\r\n     *   private List&lt;String&gt; red;\r\n     * }\r\n     *\r\n     * Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\r\n     * </pre>\r\n     *\r\n     * <p>This method would return {@code String.class} for the {@code bar} field and {@code\r\n     * listParameterizedType} for the {@code red} field.\r\n     *\r\n     * @return the specific type declared for this field\r\n     */\r\n    public Type getDeclaredType() {\r\n        return field.getGenericType();\r\n    }\r\n\r\n    /**\r\n     * Returns the {@code Class} object that was declared for this field.\r\n     *\r\n     * <p>For example, assume the following class definition:\r\n     *\r\n     * <pre class=\"code\">\r\n     * public class Foo {\r\n     *   private String bar;\r\n     *   private List&lt;String&gt; red;\r\n     * }\r\n     * </pre>\r\n     *\r\n     * <p>This method would return {@code String.class} for the {@code bar} field and {@code\r\n     * List.class} for the {@code red} field.\r\n     *\r\n     * @return the specific class object that was declared for the field\r\n     */\r\n    public Class<?> getDeclaredClass() {\r\n        return field.getType();\r\n    }\r\n\r\n    /**\r\n     * Returns the {@code T} annotation object from this field if it exists; otherwise returns {@code\r\n     * null}.\r\n     *\r\n     * @param annotation the class of the annotation that will be retrieved\r\n     * @return the annotation instance if it is bound to the field; otherwise {@code null}\r\n     */\r\n    public <T extends Annotation> T getAnnotation(Class<T> annotation) {\r\n        return field.getAnnotation(annotation);\r\n    }\r\n\r\n    /**\r\n     * Returns the annotations that are present on this field.\r\n     *\r\n     * @return an array of all the annotations set on the field\r\n     * @since 1.4\r\n     */\r\n    public Collection<Annotation> getAnnotations() {\r\n        return Arrays.asList(field.getAnnotations());\r\n    }\r\n\r\n    /**\r\n     * Returns {@code true} if the field is defined with the {@code modifier}.\r\n     *\r\n     * <p>This method is meant to be called as:\r\n     *\r\n     * <pre class=\"code\">\r\n     * boolean hasPublicModifier = fieldAttribute.hasModifier(java.lang.reflect.Modifier.PUBLIC);\r\n     * </pre>\r\n     *\r\n     * @see java.lang.reflect.Modifier\r\n     */\r\n    public boolean hasModifier(int modifier) {\r\n        return (field.getModifiers() & modifier) != 0;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return field.toString();\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "field",
    "name": "field",
    "start_line": 36,
    "end_line": 36,
    "code": "private final Field field;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "constructor",
    "name": "FieldAttributes",
    "start_line": 43,
    "end_line": 45,
    "code": "/**\r\n * Constructs a Field Attributes object from the {@code f}.\r\n *\r\n * @param f the field to pull attributes from\r\n */\r\npublic FieldAttributes(Field f) {\r\n    this.field = Objects.requireNonNull(f);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getDeclaringClass",
    "start_line": 52,
    "end_line": 54,
    "code": "/**\r\n * Gets the declaring Class that contains this field\r\n *\r\n * @return the declaring class that contains this field\r\n */\r\npublic Class<?> getDeclaringClass() {\r\n    return field.getDeclaringClass();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getName",
    "start_line": 61,
    "end_line": 63,
    "code": "/**\r\n * Gets the name of the field\r\n *\r\n * @return the name of the field\r\n */\r\npublic String getName() {\r\n    return field.getName();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getDeclaredType",
    "start_line": 84,
    "end_line": 86,
    "code": "/**\r\n * Returns the declared generic type of the field.\r\n *\r\n * <p>For example, assume the following class definition:\r\n *\r\n * <pre class=\"code\">\r\n * public class Foo {\r\n *   private String bar;\r\n *   private List&lt;String&gt; red;\r\n * }\r\n *\r\n * Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\r\n * </pre>\r\n *\r\n * <p>This method would return {@code String.class} for the {@code bar} field and {@code\r\n * listParameterizedType} for the {@code red} field.\r\n *\r\n * @return the specific type declared for this field\r\n */\r\npublic Type getDeclaredType() {\r\n    return field.getGenericType();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getDeclaredClass",
    "start_line": 105,
    "end_line": 107,
    "code": "/**\r\n * Returns the {@code Class} object that was declared for this field.\r\n *\r\n * <p>For example, assume the following class definition:\r\n *\r\n * <pre class=\"code\">\r\n * public class Foo {\r\n *   private String bar;\r\n *   private List&lt;String&gt; red;\r\n * }\r\n * </pre>\r\n *\r\n * <p>This method would return {@code String.class} for the {@code bar} field and {@code\r\n * List.class} for the {@code red} field.\r\n *\r\n * @return the specific class object that was declared for the field\r\n */\r\npublic Class<?> getDeclaredClass() {\r\n    return field.getType();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getAnnotation",
    "start_line": 116,
    "end_line": 118,
    "code": "/**\r\n * Returns the {@code T} annotation object from this field if it exists; otherwise returns {@code\r\n * null}.\r\n *\r\n * @param annotation the class of the annotation that will be retrieved\r\n * @return the annotation instance if it is bound to the field; otherwise {@code null}\r\n */\r\npublic <T extends Annotation> T getAnnotation(Class<T> annotation) {\r\n    return field.getAnnotation(annotation);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "getAnnotations",
    "start_line": 126,
    "end_line": 128,
    "code": "/**\r\n * Returns the annotations that are present on this field.\r\n *\r\n * @return an array of all the annotations set on the field\r\n * @since 1.4\r\n */\r\npublic Collection<Annotation> getAnnotations() {\r\n    return Arrays.asList(field.getAnnotations());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "hasModifier",
    "start_line": 141,
    "end_line": 143,
    "code": "/**\r\n * Returns {@code true} if the field is defined with the {@code modifier}.\r\n *\r\n * <p>This method is meant to be called as:\r\n *\r\n * <pre class=\"code\">\r\n * boolean hasPublicModifier = fieldAttribute.hasModifier(java.lang.reflect.Modifier.PUBLIC);\r\n * </pre>\r\n *\r\n * @see java.lang.reflect.Modifier\r\n */\r\npublic boolean hasModifier(int modifier) {\r\n    return (field.getModifiers() & modifier) != 0;\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  },
  {
    "type": "method",
    "name": "toString",
    "start_line": 145,
    "end_line": 148,
    "code": "@Override\r\npublic String toString() {\r\n    return field.toString();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\FieldAttributes.java"
  }
]