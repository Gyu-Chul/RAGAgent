[
  {
    "type": "package",
    "name": "com.google.gson",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\InstanceCreator.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 19,
    "end_line": 19,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\InstanceCreator.java"
  },
  {
    "type": "interface",
    "name": "InstanceCreator",
    "start_line": 80,
    "end_line": 93,
    "code": "/**\r\n * This interface is implemented to create instances of a class that does not define a no-args\r\n * constructor. If you can modify the class, you should instead add a private, or public no-args\r\n * constructor. However, that is not possible for library classes, such as JDK classes, or a\r\n * third-party library that you do not have source-code of. In such cases, you should define an\r\n * instance creator for the class. Implementations of this interface should be registered with\r\n * {@link GsonBuilder#registerTypeAdapter(Type, Object)} method before Gson will be able to use\r\n * them.\r\n *\r\n * <p>Let us look at an example where defining an InstanceCreator might be useful. The {@code Id}\r\n * class defined below does not have a default no-args constructor.\r\n *\r\n * <pre>\r\n * public class Id&lt;T&gt; {\r\n *   private final Class&lt;T&gt; clazz;\r\n *   private final long value;\r\n *   public Id(Class&lt;T&gt; clazz, long value) {\r\n *     this.clazz = clazz;\r\n *     this.value = value;\r\n *   }\r\n * }\r\n * </pre>\r\n *\r\n * <p>If Gson encounters an object of type {@code Id} during deserialization, it will throw an\r\n * exception. The easiest way to solve this problem will be to add a (public or private) no-args\r\n * constructor as follows:\r\n *\r\n * <pre>\r\n * private Id() {\r\n *   this(Object.class, 0L);\r\n * }\r\n * </pre>\r\n *\r\n * <p>However, let us assume that the developer does not have access to the source-code of the\r\n * {@code Id} class, or does not want to define a no-args constructor for it. The developer can\r\n * solve this problem by defining an {@code InstanceCreator} for {@code Id}:\r\n *\r\n * <pre>\r\n * class IdInstanceCreator implements InstanceCreator&lt;Id&gt; {\r\n *   public Id createInstance(Type type) {\r\n *     return new Id(Object.class, 0L);\r\n *   }\r\n * }\r\n * </pre>\r\n *\r\n * <p>Note that it does not matter what the fields of the created instance contain since Gson will\r\n * overwrite them with the deserialized values specified in JSON. You should also ensure that a\r\n * <i>new</i> object is returned, not a common object since its fields will be overwritten. The\r\n * developer will need to register {@code IdInstanceCreator} with Gson as follows:\r\n *\r\n * <pre>\r\n * Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdInstanceCreator()).create();\r\n * </pre>\r\n *\r\n * @param <T> the type of object that will be created by this implementation.\r\n * @see GsonBuilder#registerTypeAdapter(Type, Object)\r\n * @author Inderjeet Singh\r\n * @author Joel Leitch\r\n */\r\npublic interface InstanceCreator<T> {\r\n\r\n    /**\r\n     * Gson invokes this call-back method during deserialization to create an instance of the\r\n     * specified type. The fields of the returned instance are overwritten with the data present in\r\n     * the JSON. Since the prior contents of the object are destroyed and overwritten, do not return\r\n     * an instance that is useful elsewhere. In particular, do not return a common instance, always\r\n     * use {@code new} to create a new instance.\r\n     *\r\n     * @param type the parameterized T represented as a {@link Type}.\r\n     * @return a default object instance of type T.\r\n     */\r\n    public T createInstance(Type type);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\InstanceCreator.java"
  },
  {
    "type": "method",
    "name": "createInstance",
    "start_line": 92,
    "end_line": 92,
    "code": "/**\r\n * Gson invokes this call-back method during deserialization to create an instance of the\r\n * specified type. The fields of the returned instance are overwritten with the data present in\r\n * the JSON. Since the prior contents of the object are destroyed and overwritten, do not return\r\n * an instance that is useful elsewhere. In particular, do not return a common instance, always\r\n * use {@code new} to create a new instance.\r\n *\r\n * @param type the parameterized T represented as a {@link Type}.\r\n * @return a default object instance of type T.\r\n */\r\npublic T createInstance(Type type);",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\gson\\src\\main\\java\\com\\google\\gson\\InstanceCreator.java"
  }
]