[
  {
    "type": "package",
    "name": "com.google.gson.it",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.it;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.fail",
    "start_line": 21,
    "end_line": 21,
    "code": "import static org.junit.Assert.fail;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assume.assumeFalse",
    "start_line": 22,
    "end_line": 22,
    "code": "import static org.junit.Assume.assumeFalse;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "com.example.UnusedClass",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.example.UnusedClass;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.InvocationTargetException",
    "start_line": 25,
    "end_line": 25,
    "code": "import java.lang.reflect.InvocationTargetException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Method",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.lang.reflect.Method;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.net.URL",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.net.URL;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.net.URLClassLoader",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.net.URLClassLoader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.nio.file.Files",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.nio.file.Files;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.nio.file.Path",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.nio.file.Path;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.nio.file.Paths",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.nio.file.Paths;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "java.util.function.BiConsumer",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.function.BiConsumer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 35,
    "end_line": 35,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 36,
    "end_line": 36,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.runner.RunWith",
    "start_line": 37,
    "end_line": 37,
    "code": "import org.junit.runner.RunWith;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.runners.Parameterized",
    "start_line": 38,
    "end_line": 38,
    "code": "import org.junit.runners.Parameterized;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.runners.Parameterized.Parameter",
    "start_line": 39,
    "end_line": 39,
    "code": "import org.junit.runners.Parameterized.Parameter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "import",
    "name": "org.junit.runners.Parameterized.Parameters",
    "start_line": 40,
    "end_line": 40,
    "code": "import org.junit.runners.Parameterized.Parameters;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "class",
    "name": "ShrinkingIT",
    "start_line": 43,
    "end_line": 327,
    "code": "/**\r\n * Integration test verifying behavior of shrunken and obfuscated JARs.\r\n */\r\n// class name must end with 'IT' for Maven Failsafe Plugin\r\n@SuppressWarnings(\"MemberName\")\r\n@RunWith(Parameterized.class)\r\npublic class ShrinkingIT {\r\n\r\n    // These JAR files are prepared by the Maven build\r\n    public static final Path PROGUARD_RESULT_PATH = Paths.get(\"target/proguard-output.jar\");\r\n\r\n    public static final Path R8_RESULT_PATH = Paths.get(\"target/r8-output.jar\");\r\n\r\n    @Parameters(name = \"{index}: {0}\")\r\n    public static List<Path> jarsToTest() {\r\n        return Arrays.asList(PROGUARD_RESULT_PATH, R8_RESULT_PATH);\r\n    }\r\n\r\n    @Parameter\r\n    public Path jarToTest;\r\n\r\n    @Before\r\n    public void verifyJarExists() {\r\n        if (!Files.isRegularFile(jarToTest)) {\r\n            fail(\"JAR file \" + jarToTest + \" does not exist; run this test with `mvn clean verify`\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the test is currently running for ProGuard, instead of R8\r\n     */\r\n    private boolean isTestingProGuard() {\r\n        return jarToTest.equals(PROGUARD_RESULT_PATH);\r\n    }\r\n\r\n    @FunctionalInterface\r\n    interface TestAction {\r\n\r\n        void run(Class<?> c) throws Exception;\r\n    }\r\n\r\n    private void runTest(String className, TestAction testAction) throws Exception {\r\n        // Use bootstrap class loader; load all custom classes from JAR and not\r\n        // from dependencies of this test\r\n        ClassLoader classLoader = null;\r\n        // Load the shrunken and obfuscated JARs with a separate class loader, then load\r\n        // the main test class from it and let the test action invoke its test methods\r\n        try (URLClassLoader loader = new URLClassLoader(new URL[] { jarToTest.toUri().toURL() }, classLoader)) {\r\n            Class<?> c = loader.loadClass(className);\r\n            testAction.run(c);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test() throws Exception {\r\n        StringBuilder output = new StringBuilder();\r\n        runTest(\"com.example.Main\", c -> {\r\n            Method m = c.getMethod(\"runTests\", BiConsumer.class);\r\n            m.invoke(null, (BiConsumer<String, String>) (name, content) -> output.append(name + \"\\n\" + content + \"\\n===\\n\"));\r\n        });\r\n        assertThat(output.toString()).isEqualTo(String.join(\"\\n\", \"Write: TypeToken anonymous\", \"[\", \"  {\", \"    \\\"custom\\\": 1\", \"  }\", \"]\", \"===\", \"Read: TypeToken anonymous\", \"[ClassWithAdapter[3]]\", \"===\", \"Write: TypeToken manual\", \"[\", \"  {\", \"    \\\"custom\\\": 1\", \"  }\", \"]\", \"===\", \"Read: TypeToken manual\", \"[ClassWithAdapter[3]]\", \"===\", \"Write: Named fields\", \"{\", \"  \\\"myField\\\": 2,\", \"  \\\"notAccessedField\\\": -1\", \"}\", \"===\", \"Read: Named fields\", \"3\", \"===\", \"Write: SerializedName\", \"{\", \"  \\\"myField\\\": 2,\", \"  \\\"notAccessed\\\": -1\", \"}\", \"===\", \"Read: SerializedName\", \"3\", \"===\", \"Write: No args constructor\", \"{\", \"  \\\"myField\\\": -3\", \"}\", \"===\", \"Read: No args constructor; initial constructor value\", \"-3\", \"===\", \"Read: No args constructor; custom value\", \"3\", \"===\", \"Write: Constructor with args\", \"{\", \"  \\\"myField\\\": 2\", \"}\", \"===\", \"Read: Constructor with args\", \"3\", \"===\", \"Read: Unreferenced no args constructor; initial constructor value\", \"-3\", \"===\", \"Read: Unreferenced no args constructor; custom value\", \"3\", \"===\", \"Read: Unreferenced constructor with args\", \"3\", \"===\", \"Read: No JDK Unsafe; initial constructor value\", \"-3\", \"===\", \"Read: No JDK Unsafe; custom value\", \"3\", \"===\", \"Write: Enum\", \"\\\"FIRST\\\"\", \"===\", \"Read: Enum\", \"SECOND\", \"===\", \"Write: Enum SerializedName\", \"\\\"one\\\"\", \"===\", \"Read: Enum SerializedName\", \"SECOND\", \"===\", \"Write: @Expose\", \"{\\\"i\\\":0}\", \"===\", \"Write: Version annotations\", \"{\\\"i1\\\":0,\\\"i4\\\":0}\", \"===\", \"Write: JsonAdapter on fields\", \"{\", \"  \\\"f\\\": \\\"adapter-null\\\",\", \"  \\\"f1\\\": \\\"adapter-1\\\",\", \"  \\\"f2\\\": \\\"factory-2\\\",\", \"  \\\"f3\\\": \\\"serializer-3\\\",\", // For f4 only a JsonDeserializer is registered, so serialization falls back to\r\n        // reflection\r\n        \"  \\\"f4\\\": {\", \"    \\\"s\\\": \\\"4\\\"\", \"  }\", \"}\", \"===\", \"Read: JsonAdapter on fields\", // For f3 only a JsonSerializer is registered, so for deserialization value is read\r\n        // as is using reflection\r\n        \"ClassWithJsonAdapterAnnotation[f1=adapter-1, f2=factory-2, f3=3,\" + \" f4=deserializer-4]\", \"===\", \"Read: Generic TypeToken\", \"{t=read-1}\", \"===\", \"Read: Using Generic\", \"{g={t=read-1}}\", \"===\", \"Read: Using Generic TypeToken\", \"{g={t=read-1}}\", \"===\", \"Read: Interface implementation\", // TODO: Currently only works for ProGuard but not R8\r\n        isTestingProGuard() ? \"value\" : \"ClassCastException\", \"===\", \"\"));\r\n    }\r\n\r\n    @Test\r\n    public void testNoSerializedName_NoArgsConstructor() throws Exception {\r\n        runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n            Method m = c.getMethod(\"runTestNoArgsConstructor\");\r\n            if (isTestingProGuard()) {\r\n                Object result = m.invoke(null);\r\n                assertThat(result).isEqualTo(\"value\");\r\n            } else {\r\n                // R8 performs more aggressive optimizations\r\n                Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n                assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Abstract classes can't be instantiated! Adjust the R8 configuration or\" + \" register an InstanceCreator or a TypeAdapter for this type. Class name:\" + \" com.example.NoSerializedNameMain$TestClassNoArgsConstructor\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#r8-abstract-class\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testNoSerializedName_NoArgsConstructorNoJdkUnsafe() throws Exception {\r\n        runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n            Method m = c.getMethod(\"runTestNoJdkUnsafe\");\r\n            if (isTestingProGuard()) {\r\n                Object result = m.invoke(null);\r\n                assertThat(result).isEqualTo(\"value\");\r\n            } else {\r\n                // R8 performs more aggressive optimizations\r\n                Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n                assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Unable to create instance of class\" + \" com.example.NoSerializedNameMain$TestClassNotAbstract; usage of JDK\" + \" Unsafe is disabled. Registering an InstanceCreator or a TypeAdapter for\" + \" this type, adding a no-args constructor, or enabling usage of JDK\" + \" Unsafe may fix this problem. Or adjust your R8 configuration to keep\" + \" the no-args constructor of the class.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testNoSerializedName_HasArgsConstructor() throws Exception {\r\n        runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n            Method m = c.getMethod(\"runTestHasArgsConstructor\");\r\n            if (isTestingProGuard()) {\r\n                Object result = m.invoke(null);\r\n                assertThat(result).isEqualTo(\"value\");\r\n            } else {\r\n                // R8 performs more aggressive optimizations\r\n                Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n                assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Abstract classes can't be instantiated! Adjust the R8 configuration or\" + \" register an InstanceCreator or a TypeAdapter for this type. Class name:\" + \" com.example.NoSerializedNameMain$TestClassHasArgsConstructor\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#r8-abstract-class\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testUnusedClassRemoved() throws Exception {\r\n        // For some reason this test only works for R8 but not for ProGuard; ProGuard keeps the unused\r\n        // class\r\n        assumeFalse(isTestingProGuard());\r\n        String className = UnusedClass.class.getName();\r\n        ClassNotFoundException e = assertThrows(ClassNotFoundException.class, () -> {\r\n            runTest(className, c -> {\r\n                fail(\"Class should have been removed during shrinking: \" + c);\r\n            });\r\n        });\r\n        assertThat(e).hasMessageThat().contains(className);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "field",
    "name": "PROGUARD_RESULT_PATH",
    "start_line": 47,
    "end_line": 47,
    "code": "// These JAR files are prepared by the Maven build\r\npublic static final Path PROGUARD_RESULT_PATH = Paths.get(\"target/proguard-output.jar\");",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "field",
    "name": "R8_RESULT_PATH",
    "start_line": 48,
    "end_line": 48,
    "code": "public static final Path R8_RESULT_PATH = Paths.get(\"target/r8-output.jar\");",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "field",
    "name": "jarToTest",
    "start_line": 55,
    "end_line": 55,
    "code": "@Parameter\r\npublic Path jarToTest;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "jarsToTest",
    "start_line": 50,
    "end_line": 53,
    "code": "@Parameters(name = \"{index}: {0}\")\r\npublic static List<Path> jarsToTest() {\r\n    return Arrays.asList(PROGUARD_RESULT_PATH, R8_RESULT_PATH);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "verifyJarExists",
    "start_line": 57,
    "end_line": 62,
    "code": "@Before\r\npublic void verifyJarExists() {\r\n    if (!Files.isRegularFile(jarToTest)) {\r\n        fail(\"JAR file \" + jarToTest + \" does not exist; run this test with `mvn clean verify`\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "isTestingProGuard",
    "start_line": 65,
    "end_line": 67,
    "code": "/**\r\n * Returns whether the test is currently running for ProGuard, instead of R8\r\n */\r\nprivate boolean isTestingProGuard() {\r\n    return jarToTest.equals(PROGUARD_RESULT_PATH);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "runTest",
    "start_line": 74,
    "end_line": 86,
    "code": "private void runTest(String className, TestAction testAction) throws Exception {\r\n    // Use bootstrap class loader; load all custom classes from JAR and not\r\n    // from dependencies of this test\r\n    ClassLoader classLoader = null;\r\n    // Load the shrunken and obfuscated JARs with a separate class loader, then load\r\n    // the main test class from it and let the test action invoke its test methods\r\n    try (URLClassLoader loader = new URLClassLoader(new URL[] { jarToTest.toUri().toURL() }, classLoader)) {\r\n        Class<?> c = loader.loadClass(className);\r\n        testAction.run(c);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "test",
    "start_line": 88,
    "end_line": 229,
    "code": "@Test\r\npublic void test() throws Exception {\r\n    StringBuilder output = new StringBuilder();\r\n    runTest(\"com.example.Main\", c -> {\r\n        Method m = c.getMethod(\"runTests\", BiConsumer.class);\r\n        m.invoke(null, (BiConsumer<String, String>) (name, content) -> output.append(name + \"\\n\" + content + \"\\n===\\n\"));\r\n    });\r\n    assertThat(output.toString()).isEqualTo(String.join(\"\\n\", \"Write: TypeToken anonymous\", \"[\", \"  {\", \"    \\\"custom\\\": 1\", \"  }\", \"]\", \"===\", \"Read: TypeToken anonymous\", \"[ClassWithAdapter[3]]\", \"===\", \"Write: TypeToken manual\", \"[\", \"  {\", \"    \\\"custom\\\": 1\", \"  }\", \"]\", \"===\", \"Read: TypeToken manual\", \"[ClassWithAdapter[3]]\", \"===\", \"Write: Named fields\", \"{\", \"  \\\"myField\\\": 2,\", \"  \\\"notAccessedField\\\": -1\", \"}\", \"===\", \"Read: Named fields\", \"3\", \"===\", \"Write: SerializedName\", \"{\", \"  \\\"myField\\\": 2,\", \"  \\\"notAccessed\\\": -1\", \"}\", \"===\", \"Read: SerializedName\", \"3\", \"===\", \"Write: No args constructor\", \"{\", \"  \\\"myField\\\": -3\", \"}\", \"===\", \"Read: No args constructor; initial constructor value\", \"-3\", \"===\", \"Read: No args constructor; custom value\", \"3\", \"===\", \"Write: Constructor with args\", \"{\", \"  \\\"myField\\\": 2\", \"}\", \"===\", \"Read: Constructor with args\", \"3\", \"===\", \"Read: Unreferenced no args constructor; initial constructor value\", \"-3\", \"===\", \"Read: Unreferenced no args constructor; custom value\", \"3\", \"===\", \"Read: Unreferenced constructor with args\", \"3\", \"===\", \"Read: No JDK Unsafe; initial constructor value\", \"-3\", \"===\", \"Read: No JDK Unsafe; custom value\", \"3\", \"===\", \"Write: Enum\", \"\\\"FIRST\\\"\", \"===\", \"Read: Enum\", \"SECOND\", \"===\", \"Write: Enum SerializedName\", \"\\\"one\\\"\", \"===\", \"Read: Enum SerializedName\", \"SECOND\", \"===\", \"Write: @Expose\", \"{\\\"i\\\":0}\", \"===\", \"Write: Version annotations\", \"{\\\"i1\\\":0,\\\"i4\\\":0}\", \"===\", \"Write: JsonAdapter on fields\", \"{\", \"  \\\"f\\\": \\\"adapter-null\\\",\", \"  \\\"f1\\\": \\\"adapter-1\\\",\", \"  \\\"f2\\\": \\\"factory-2\\\",\", \"  \\\"f3\\\": \\\"serializer-3\\\",\", // For f4 only a JsonDeserializer is registered, so serialization falls back to\r\n    // reflection\r\n    \"  \\\"f4\\\": {\", \"    \\\"s\\\": \\\"4\\\"\", \"  }\", \"}\", \"===\", \"Read: JsonAdapter on fields\", // For f3 only a JsonSerializer is registered, so for deserialization value is read\r\n    // as is using reflection\r\n    \"ClassWithJsonAdapterAnnotation[f1=adapter-1, f2=factory-2, f3=3,\" + \" f4=deserializer-4]\", \"===\", \"Read: Generic TypeToken\", \"{t=read-1}\", \"===\", \"Read: Using Generic\", \"{g={t=read-1}}\", \"===\", \"Read: Using Generic TypeToken\", \"{g={t=read-1}}\", \"===\", \"Read: Interface implementation\", // TODO: Currently only works for ProGuard but not R8\r\n    isTestingProGuard() ? \"value\" : \"ClassCastException\", \"===\", \"\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "testNoSerializedName_NoArgsConstructor",
    "start_line": 231,
    "end_line": 254,
    "code": "@Test\r\npublic void testNoSerializedName_NoArgsConstructor() throws Exception {\r\n    runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n        Method m = c.getMethod(\"runTestNoArgsConstructor\");\r\n        if (isTestingProGuard()) {\r\n            Object result = m.invoke(null);\r\n            assertThat(result).isEqualTo(\"value\");\r\n        } else {\r\n            // R8 performs more aggressive optimizations\r\n            Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n            assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Abstract classes can't be instantiated! Adjust the R8 configuration or\" + \" register an InstanceCreator or a TypeAdapter for this type. Class name:\" + \" com.example.NoSerializedNameMain$TestClassNoArgsConstructor\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#r8-abstract-class\");\r\n        }\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "testNoSerializedName_NoArgsConstructorNoJdkUnsafe",
    "start_line": 256,
    "end_line": 281,
    "code": "@Test\r\npublic void testNoSerializedName_NoArgsConstructorNoJdkUnsafe() throws Exception {\r\n    runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n        Method m = c.getMethod(\"runTestNoJdkUnsafe\");\r\n        if (isTestingProGuard()) {\r\n            Object result = m.invoke(null);\r\n            assertThat(result).isEqualTo(\"value\");\r\n        } else {\r\n            // R8 performs more aggressive optimizations\r\n            Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n            assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Unable to create instance of class\" + \" com.example.NoSerializedNameMain$TestClassNotAbstract; usage of JDK\" + \" Unsafe is disabled. Registering an InstanceCreator or a TypeAdapter for\" + \" this type, adding a no-args constructor, or enabling usage of JDK\" + \" Unsafe may fix this problem. Or adjust your R8 configuration to keep\" + \" the no-args constructor of the class.\");\r\n        }\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "testNoSerializedName_HasArgsConstructor",
    "start_line": 283,
    "end_line": 306,
    "code": "@Test\r\npublic void testNoSerializedName_HasArgsConstructor() throws Exception {\r\n    runTest(\"com.example.NoSerializedNameMain\", c -> {\r\n        Method m = c.getMethod(\"runTestHasArgsConstructor\");\r\n        if (isTestingProGuard()) {\r\n            Object result = m.invoke(null);\r\n            assertThat(result).isEqualTo(\"value\");\r\n        } else {\r\n            // R8 performs more aggressive optimizations\r\n            Exception e = assertThrows(InvocationTargetException.class, () -> m.invoke(null));\r\n            assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(\"Abstract classes can't be instantiated! Adjust the R8 configuration or\" + \" register an InstanceCreator or a TypeAdapter for this type. Class name:\" + \" com.example.NoSerializedNameMain$TestClassHasArgsConstructor\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#r8-abstract-class\");\r\n        }\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  },
  {
    "type": "method",
    "name": "testUnusedClassRemoved",
    "start_line": 308,
    "end_line": 326,
    "code": "@Test\r\npublic void testUnusedClassRemoved() throws Exception {\r\n    // For some reason this test only works for R8 but not for ProGuard; ProGuard keeps the unused\r\n    // class\r\n    assumeFalse(isTestingProGuard());\r\n    String className = UnusedClass.class.getName();\r\n    ClassNotFoundException e = assertThrows(ClassNotFoundException.class, () -> {\r\n        runTest(className, c -> {\r\n            fail(\"Class should have been removed during shrinking: \" + c);\r\n        });\r\n    });\r\n    assertThat(e).hasMessageThat().contains(className);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\test\\java\\com\\google\\gson\\it\\ShrinkingIT.java"
  }
]