[
  {
    "type": "package",
    "name": "com.example",
    "start_line": 1,
    "end_line": 1,
    "code": "package com.example;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 3,
    "end_line": 3,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializationContext",
    "start_line": 4,
    "end_line": 4,
    "code": "import com.google.gson.JsonDeserializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonDeserializer",
    "start_line": 5,
    "end_line": 5,
    "code": "import com.google.gson.JsonDeserializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonElement",
    "start_line": 6,
    "end_line": 6,
    "code": "import com.google.gson.JsonElement;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 7,
    "end_line": 7,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonPrimitive",
    "start_line": 8,
    "end_line": 8,
    "code": "import com.google.gson.JsonPrimitive;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializationContext",
    "start_line": 9,
    "end_line": 9,
    "code": "import com.google.gson.JsonSerializationContext;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSerializer",
    "start_line": 10,
    "end_line": 10,
    "code": "import com.google.gson.JsonSerializer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 11,
    "end_line": 11,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 12,
    "end_line": 12,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.JsonAdapter",
    "start_line": 13,
    "end_line": 13,
    "code": "import com.google.gson.annotations.JsonAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.SerializedName",
    "start_line": 14,
    "end_line": 14,
    "code": "import com.google.gson.annotations.SerializedName;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 15,
    "end_line": 15,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 16,
    "end_line": 16,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 17,
    "end_line": 17,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 18,
    "end_line": 18,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 19,
    "end_line": 19,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "class",
    "name": "ClassWithJsonAdapterAnnotation",
    "start_line": 22,
    "end_line": 137,
    "code": "/**\r\n * Uses {@link JsonAdapter} annotation on fields.\r\n */\r\npublic class ClassWithJsonAdapterAnnotation {\r\n\r\n    // For this field don't use @SerializedName and ignore it for deserialization\r\n    // Has custom ProGuard rule to keep the field name\r\n    @JsonAdapter(value = Adapter.class, nullSafe = false)\r\n    DummyClass f;\r\n\r\n    @SerializedName(\"f1\")\r\n    @JsonAdapter(Adapter.class)\r\n    DummyClass f1;\r\n\r\n    @SerializedName(\"f2\")\r\n    @JsonAdapter(Factory.class)\r\n    DummyClass f2;\r\n\r\n    @SerializedName(\"f3\")\r\n    @JsonAdapter(Serializer.class)\r\n    DummyClass f3;\r\n\r\n    @SerializedName(\"f4\")\r\n    @JsonAdapter(Deserializer.class)\r\n    DummyClass f4;\r\n\r\n    public ClassWithJsonAdapterAnnotation() {\r\n    }\r\n\r\n    // Note: R8 seems to make this constructor the no-args constructor and initialize fields\r\n    // by default; currently this is not visible in the deserialization test because the JSON data\r\n    // contains values for all fields; but it is noticeable once the JSON data is missing fields\r\n    public ClassWithJsonAdapterAnnotation(int i1, int i2, int i3, int i4) {\r\n        f1 = new DummyClass(Integer.toString(i1));\r\n        f2 = new DummyClass(Integer.toString(i2));\r\n        f3 = new DummyClass(Integer.toString(i3));\r\n        f4 = new DummyClass(Integer.toString(i4));\r\n        // Note: Deliberately don't initialize field `f` here to not refer to it anywhere in code\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ClassWithJsonAdapterAnnotation[f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3 + \", f4=\" + f4 + \"]\";\r\n    }\r\n\r\n    static class Adapter extends TypeAdapter<DummyClass> {\r\n\r\n        @Override\r\n        public DummyClass read(JsonReader in) throws IOException {\r\n            return new DummyClass(\"adapter-\" + in.nextInt());\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, DummyClass value) throws IOException {\r\n            out.value(\"adapter-\" + value);\r\n        }\r\n    }\r\n\r\n    static class Factory implements TypeAdapterFactory {\r\n\r\n        @Override\r\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n            // the code below is not type-safe, but does not matter for this test\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> r = (TypeAdapter<T>) new TypeAdapter<DummyClass>() {\r\n\r\n                @Override\r\n                public DummyClass read(JsonReader in) throws IOException {\r\n                    return new DummyClass(\"factory-\" + in.nextInt());\r\n                }\r\n\r\n                @Override\r\n                public void write(JsonWriter out, DummyClass value) throws IOException {\r\n                    out.value(\"factory-\" + value.s);\r\n                }\r\n            };\r\n            return r;\r\n        }\r\n    }\r\n\r\n    static class Serializer implements JsonSerializer<DummyClass> {\r\n\r\n        @Override\r\n        public JsonElement serialize(DummyClass src, Type typeOfSrc, JsonSerializationContext context) {\r\n            return new JsonPrimitive(\"serializer-\" + src.s);\r\n        }\r\n    }\r\n\r\n    static class Deserializer implements JsonDeserializer<DummyClass> {\r\n\r\n        @Override\r\n        public DummyClass deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            return new DummyClass(\"deserializer-\" + json.getAsInt());\r\n        }\r\n    }\r\n\r\n    // Use this separate class mainly to work around incorrect delegation behavior for JsonSerializer\r\n    // and JsonDeserializer used with @JsonAdapter, see https://github.com/google/gson/issues/1783\r\n    static class DummyClass {\r\n\r\n        @SerializedName(\"s\")\r\n        String s;\r\n\r\n        DummyClass(String s) {\r\n            this.s = s;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return s;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "field",
    "name": "f",
    "start_line": 25,
    "end_line": 26,
    "code": "// For this field don't use @SerializedName and ignore it for deserialization\r\n// Has custom ProGuard rule to keep the field name\r\n@JsonAdapter(value = Adapter.class, nullSafe = false)\r\nDummyClass f;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "field",
    "name": "f1",
    "start_line": 28,
    "end_line": 30,
    "code": "@SerializedName(\"f1\")\r\n@JsonAdapter(Adapter.class)\r\nDummyClass f1;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "field",
    "name": "f2",
    "start_line": 32,
    "end_line": 34,
    "code": "@SerializedName(\"f2\")\r\n@JsonAdapter(Factory.class)\r\nDummyClass f2;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "field",
    "name": "f3",
    "start_line": 36,
    "end_line": 38,
    "code": "@SerializedName(\"f3\")\r\n@JsonAdapter(Serializer.class)\r\nDummyClass f3;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "field",
    "name": "f4",
    "start_line": 40,
    "end_line": 42,
    "code": "@SerializedName(\"f4\")\r\n@JsonAdapter(Deserializer.class)\r\nDummyClass f4;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "constructor",
    "name": "ClassWithJsonAdapterAnnotation",
    "start_line": 44,
    "end_line": 44,
    "code": "public ClassWithJsonAdapterAnnotation() {\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "constructor",
    "name": "ClassWithJsonAdapterAnnotation",
    "start_line": 49,
    "end_line": 56,
    "code": "// Note: R8 seems to make this constructor the no-args constructor and initialize fields\r\n// by default; currently this is not visible in the deserialization test because the JSON data\r\n// contains values for all fields; but it is noticeable once the JSON data is missing fields\r\npublic ClassWithJsonAdapterAnnotation(int i1, int i2, int i3, int i4) {\r\n    f1 = new DummyClass(Integer.toString(i1));\r\n    f2 = new DummyClass(Integer.toString(i2));\r\n    f3 = new DummyClass(Integer.toString(i3));\r\n    f4 = new DummyClass(Integer.toString(i4));\r\n    // Note: Deliberately don't initialize field `f` here to not refer to it anywhere in code\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  },
  {
    "type": "method",
    "name": "toString",
    "start_line": 58,
    "end_line": 69,
    "code": "@Override\r\npublic String toString() {\r\n    return \"ClassWithJsonAdapterAnnotation[f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3 + \", f4=\" + f4 + \"]\";\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\ClassWithJsonAdapterAnnotation.java"
  }
]