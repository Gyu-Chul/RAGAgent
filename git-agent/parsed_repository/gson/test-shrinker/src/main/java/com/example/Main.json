[
  {
    "type": "package",
    "name": "com.example",
    "start_line": 1,
    "end_line": 1,
    "code": "package com.example;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.example.TestExecutor.same",
    "start_line": 3,
    "end_line": 3,
    "code": "import static com.example.TestExecutor.same;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.example.GenericClasses.DummyClass",
    "start_line": 5,
    "end_line": 5,
    "code": "import com.example.GenericClasses.DummyClass;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.example.GenericClasses.GenericClass",
    "start_line": 6,
    "end_line": 6,
    "code": "import com.example.GenericClasses.GenericClass;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.example.GenericClasses.GenericUsingGenericClass",
    "start_line": 7,
    "end_line": 7,
    "code": "import com.example.GenericClasses.GenericUsingGenericClass;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.example.GenericClasses.UsingGenericClass",
    "start_line": 8,
    "end_line": 8,
    "code": "import com.example.GenericClasses.UsingGenericClass;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 9,
    "end_line": 9,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 10,
    "end_line": 10,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 11,
    "end_line": 11,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 12,
    "end_line": 12,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 13,
    "end_line": 13,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "java.util.function.BiConsumer",
    "start_line": 14,
    "end_line": 14,
    "code": "import java.util.function.BiConsumer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "import",
    "name": "java.util.function.Supplier",
    "start_line": 15,
    "end_line": 15,
    "code": "import java.util.function.Supplier;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "class",
    "name": "Main",
    "start_line": 17,
    "end_line": 316,
    "code": "public class Main {\r\n\r\n    private Main() {\r\n    }\r\n\r\n    /**\r\n     * Main entrypoint, called by {@code ShrinkingIT.test()}.\r\n     *\r\n     * <p>To be safe let all tests put their output to the consumer and let integration test verify\r\n     * it; don't perform any relevant assertions in this code because code shrinkers could affect it.\r\n     *\r\n     * @param outputConsumer consumes the test output: {@code name, content} pairs\r\n     */\r\n    public static void runTests(BiConsumer<String, String> outputConsumer) {\r\n        // Create the TypeToken instances on demand because creation of them can fail when\r\n        // generic signatures were erased\r\n        testTypeTokenWriteRead(outputConsumer, \"anonymous\", () -> new TypeToken<List<ClassWithAdapter>>() {\r\n        });\r\n        testTypeTokenWriteRead(outputConsumer, \"manual\", () -> TypeToken.getParameterized(List.class, ClassWithAdapter.class));\r\n        testNamedFields(outputConsumer);\r\n        testSerializedName(outputConsumer);\r\n        testConstructorNoArgs(outputConsumer);\r\n        testConstructorHasArgs(outputConsumer);\r\n        testUnreferencedConstructorNoArgs(outputConsumer);\r\n        testUnreferencedConstructorHasArgs(outputConsumer);\r\n        testNoJdkUnsafe(outputConsumer);\r\n        testEnum(outputConsumer);\r\n        testEnumSerializedName(outputConsumer);\r\n        testExposeAnnotation(outputConsumer);\r\n        testVersionAnnotations(outputConsumer);\r\n        testJsonAdapterAnnotation(outputConsumer);\r\n        testGenericClasses(outputConsumer);\r\n        testDeserializingInterfaceImpl(outputConsumer);\r\n    }\r\n\r\n    private static void testTypeTokenWriteRead(BiConsumer<String, String> outputConsumer, String description, Supplier<TypeToken<?>> typeTokenSupplier) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: TypeToken \" + description, () -> gson.toJson(Arrays.asList(new ClassWithAdapter(1)), typeTokenSupplier.get().getType()));\r\n        TestExecutor.run(outputConsumer, \"Read: TypeToken \" + description, () -> {\r\n            Object deserialized = gson.fromJson(\"[{\\\"custom\\\": 3}]\", typeTokenSupplier.get());\r\n            return deserialized.toString();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calls {@link Gson#toJson}, but (hopefully) in a way which prevents code shrinkers from\r\n     * understanding that reflection is used for {@code obj}.\r\n     */\r\n    private static String toJson(Gson gson, Object obj) {\r\n        return gson.toJson(same(obj));\r\n    }\r\n\r\n    /**\r\n     * Calls {@link Gson#fromJson}, but (hopefully) in a way which prevents code shrinkers from\r\n     * understanding that reflection is used for {@code c}.\r\n     */\r\n    private static <T> T fromJson(Gson gson, String json, Class<T> c) {\r\n        return gson.fromJson(json, same(c));\r\n    }\r\n\r\n    private static void testNamedFields(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: Named fields\", () -> toJson(gson, new ClassWithNamedFields(2)));\r\n        TestExecutor.run(outputConsumer, \"Read: Named fields\", () -> {\r\n            ClassWithNamedFields deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNamedFields.class);\r\n            return Integer.toString(deserialized.myField);\r\n        });\r\n    }\r\n\r\n    private static void testSerializedName(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: SerializedName\", () -> toJson(gson, new ClassWithSerializedName(2)));\r\n        TestExecutor.run(outputConsumer, \"Read: SerializedName\", () -> {\r\n            ClassWithSerializedName deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithSerializedName.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testConstructorNoArgs(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: No args constructor\", () -> toJson(gson, new ClassWithNoArgsConstructor()));\r\n        TestExecutor.run(outputConsumer, \"Read: No args constructor; initial constructor value\", () -> {\r\n            ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n        TestExecutor.run(outputConsumer, \"Read: No args constructor; custom value\", () -> {\r\n            ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testConstructorHasArgs(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: Constructor with args\", () -> toJson(gson, new ClassWithHasArgsConstructor(2)));\r\n        // This most likely relies on JDK Unsafe (unless the shrinker rewrites the constructor in some\r\n        // way)\r\n        TestExecutor.run(outputConsumer, \"Read: Constructor with args\", () -> {\r\n            ClassWithHasArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithHasArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testUnreferencedConstructorNoArgs(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        // No write because we're not referencing this class's constructor.\r\n        // This runs the no-args constructor.\r\n        TestExecutor.run(outputConsumer, \"Read: Unreferenced no args constructor; initial constructor value\", () -> {\r\n            ClassWithUnreferencedNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithUnreferencedNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n        TestExecutor.run(outputConsumer, \"Read: Unreferenced no args constructor; custom value\", () -> {\r\n            ClassWithUnreferencedNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithUnreferencedNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testUnreferencedConstructorHasArgs(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        // No write because we're not referencing this class's constructor.\r\n        // This most likely relies on JDK Unsafe (unless the shrinker rewrites the constructor in some\r\n        // way)\r\n        TestExecutor.run(outputConsumer, \"Read: Unreferenced constructor with args\", () -> {\r\n            ClassWithUnreferencedHasArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithUnreferencedHasArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testNoJdkUnsafe(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().disableJdkUnsafe().create();\r\n        TestExecutor.run(outputConsumer, \"Read: No JDK Unsafe; initial constructor value\", () -> {\r\n            ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n        TestExecutor.run(outputConsumer, \"Read: No JDK Unsafe; custom value\", () -> {\r\n            ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNoArgsConstructor.class);\r\n            return Integer.toString(deserialized.i);\r\n        });\r\n    }\r\n\r\n    private static void testEnum(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: Enum\", () -> toJson(gson, EnumClass.FIRST));\r\n        TestExecutor.run(outputConsumer, \"Read: Enum\", () -> fromJson(gson, \"\\\"SECOND\\\"\", EnumClass.class).toString());\r\n    }\r\n\r\n    private static void testEnumSerializedName(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: Enum SerializedName\", () -> toJson(gson, EnumClassWithSerializedName.FIRST));\r\n        TestExecutor.run(outputConsumer, \"Read: Enum SerializedName\", () -> fromJson(gson, \"\\\"two\\\"\", EnumClassWithSerializedName.class).toString());\r\n    }\r\n\r\n    private static void testExposeAnnotation(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();\r\n        TestExecutor.run(outputConsumer, \"Write: @Expose\", () -> toJson(gson, new ClassWithExposeAnnotation()));\r\n    }\r\n\r\n    private static void testVersionAnnotations(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setVersion(1).create();\r\n        TestExecutor.run(outputConsumer, \"Write: Version annotations\", () -> toJson(gson, new ClassWithVersionAnnotations()));\r\n    }\r\n\r\n    private static void testJsonAdapterAnnotation(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        TestExecutor.run(outputConsumer, \"Write: JsonAdapter on fields\", () -> toJson(gson, new ClassWithJsonAdapterAnnotation(1, 2, 3, 4)));\r\n        String json = \"{\\\"f1\\\": 1, \\\"f2\\\": 2, \\\"f3\\\": {\\\"s\\\": \\\"3\\\"}, \\\"f4\\\": 4}\";\r\n        TestExecutor.run(outputConsumer, \"Read: JsonAdapter on fields\", () -> fromJson(gson, json, ClassWithJsonAdapterAnnotation.class).toString());\r\n    }\r\n\r\n    private static void testGenericClasses(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new Gson();\r\n        TestExecutor.run(outputConsumer, \"Read: Generic TypeToken\", () -> gson.fromJson(\"{\\\"t\\\": 1}\", new TypeToken<GenericClass<DummyClass>>() {\r\n        }).toString());\r\n        TestExecutor.run(outputConsumer, \"Read: Using Generic\", () -> fromJson(gson, \"{\\\"g\\\": {\\\"t\\\": 1}}\", UsingGenericClass.class).toString());\r\n        TestExecutor.run(outputConsumer, \"Read: Using Generic TypeToken\", () -> gson.fromJson(\"{\\\"g\\\": {\\\"t\\\": 1}}\", new TypeToken<GenericUsingGenericClass<DummyClass>>() {\r\n        }).toString());\r\n    }\r\n\r\n    private static void testDeserializingInterfaceImpl(BiConsumer<String, String> outputConsumer) {\r\n        Gson gson = new Gson();\r\n        TestExecutor.run(outputConsumer, \"Read: Interface implementation\", () -> {\r\n            try {\r\n                // Use the interface type here\r\n                List<? extends InterfaceWithImplementation> list = gson.fromJson(\"[{\\\"s\\\": \\\"value\\\"}]\", // This is the only place where the implementation class is referenced\r\n                new TypeToken<List<InterfaceWithImplementation.Implementation>>() {\r\n                });\r\n                return list.get(0).getValue();\r\n            } catch (ClassCastException e) {\r\n                // TODO: R8 causes exception, see https://github.com/google/gson/issues/2658\r\n                return \"ClassCastException\";\r\n            }\r\n        });\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "constructor",
    "name": "Main",
    "start_line": 18,
    "end_line": 18,
    "code": "private Main() {\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "runTests",
    "start_line": 28,
    "end_line": 58,
    "code": "/**\r\n * Main entrypoint, called by {@code ShrinkingIT.test()}.\r\n *\r\n * <p>To be safe let all tests put their output to the consumer and let integration test verify\r\n * it; don't perform any relevant assertions in this code because code shrinkers could affect it.\r\n *\r\n * @param outputConsumer consumes the test output: {@code name, content} pairs\r\n */\r\npublic static void runTests(BiConsumer<String, String> outputConsumer) {\r\n    // Create the TypeToken instances on demand because creation of them can fail when\r\n    // generic signatures were erased\r\n    testTypeTokenWriteRead(outputConsumer, \"anonymous\", () -> new TypeToken<List<ClassWithAdapter>>() {\r\n    });\r\n    testTypeTokenWriteRead(outputConsumer, \"manual\", () -> TypeToken.getParameterized(List.class, ClassWithAdapter.class));\r\n    testNamedFields(outputConsumer);\r\n    testSerializedName(outputConsumer);\r\n    testConstructorNoArgs(outputConsumer);\r\n    testConstructorHasArgs(outputConsumer);\r\n    testUnreferencedConstructorNoArgs(outputConsumer);\r\n    testUnreferencedConstructorHasArgs(outputConsumer);\r\n    testNoJdkUnsafe(outputConsumer);\r\n    testEnum(outputConsumer);\r\n    testEnumSerializedName(outputConsumer);\r\n    testExposeAnnotation(outputConsumer);\r\n    testVersionAnnotations(outputConsumer);\r\n    testJsonAdapterAnnotation(outputConsumer);\r\n    testGenericClasses(outputConsumer);\r\n    testDeserializingInterfaceImpl(outputConsumer);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testTypeTokenWriteRead",
    "start_line": 60,
    "end_line": 78,
    "code": "private static void testTypeTokenWriteRead(BiConsumer<String, String> outputConsumer, String description, Supplier<TypeToken<?>> typeTokenSupplier) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: TypeToken \" + description, () -> gson.toJson(Arrays.asList(new ClassWithAdapter(1)), typeTokenSupplier.get().getType()));\r\n    TestExecutor.run(outputConsumer, \"Read: TypeToken \" + description, () -> {\r\n        Object deserialized = gson.fromJson(\"[{\\\"custom\\\": 3}]\", typeTokenSupplier.get());\r\n        return deserialized.toString();\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "toJson",
    "start_line": 84,
    "end_line": 86,
    "code": "/**\r\n * Calls {@link Gson#toJson}, but (hopefully) in a way which prevents code shrinkers from\r\n * understanding that reflection is used for {@code obj}.\r\n */\r\nprivate static String toJson(Gson gson, Object obj) {\r\n    return gson.toJson(same(obj));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "fromJson",
    "start_line": 92,
    "end_line": 94,
    "code": "/**\r\n * Calls {@link Gson#fromJson}, but (hopefully) in a way which prevents code shrinkers from\r\n * understanding that reflection is used for {@code c}.\r\n */\r\nprivate static <T> T fromJson(Gson gson, String json, Class<T> c) {\r\n    return gson.fromJson(json, same(c));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testNamedFields",
    "start_line": 96,
    "end_line": 108,
    "code": "private static void testNamedFields(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: Named fields\", () -> toJson(gson, new ClassWithNamedFields(2)));\r\n    TestExecutor.run(outputConsumer, \"Read: Named fields\", () -> {\r\n        ClassWithNamedFields deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNamedFields.class);\r\n        return Integer.toString(deserialized.myField);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testSerializedName",
    "start_line": 110,
    "end_line": 124,
    "code": "private static void testSerializedName(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: SerializedName\", () -> toJson(gson, new ClassWithSerializedName(2)));\r\n    TestExecutor.run(outputConsumer, \"Read: SerializedName\", () -> {\r\n        ClassWithSerializedName deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithSerializedName.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testConstructorNoArgs",
    "start_line": 126,
    "end_line": 148,
    "code": "private static void testConstructorNoArgs(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: No args constructor\", () -> toJson(gson, new ClassWithNoArgsConstructor()));\r\n    TestExecutor.run(outputConsumer, \"Read: No args constructor; initial constructor value\", () -> {\r\n        ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n    TestExecutor.run(outputConsumer, \"Read: No args constructor; custom value\", () -> {\r\n        ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testConstructorHasArgs",
    "start_line": 150,
    "end_line": 166,
    "code": "private static void testConstructorHasArgs(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: Constructor with args\", () -> toJson(gson, new ClassWithHasArgsConstructor(2)));\r\n    // This most likely relies on JDK Unsafe (unless the shrinker rewrites the constructor in some\r\n    // way)\r\n    TestExecutor.run(outputConsumer, \"Read: Constructor with args\", () -> {\r\n        ClassWithHasArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithHasArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testUnreferencedConstructorNoArgs",
    "start_line": 168,
    "end_line": 189,
    "code": "private static void testUnreferencedConstructorNoArgs(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    // No write because we're not referencing this class's constructor.\r\n    // This runs the no-args constructor.\r\n    TestExecutor.run(outputConsumer, \"Read: Unreferenced no args constructor; initial constructor value\", () -> {\r\n        ClassWithUnreferencedNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithUnreferencedNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n    TestExecutor.run(outputConsumer, \"Read: Unreferenced no args constructor; custom value\", () -> {\r\n        ClassWithUnreferencedNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithUnreferencedNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testUnreferencedConstructorHasArgs",
    "start_line": 191,
    "end_line": 206,
    "code": "private static void testUnreferencedConstructorHasArgs(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    // No write because we're not referencing this class's constructor.\r\n    // This most likely relies on JDK Unsafe (unless the shrinker rewrites the constructor in some\r\n    // way)\r\n    TestExecutor.run(outputConsumer, \"Read: Unreferenced constructor with args\", () -> {\r\n        ClassWithUnreferencedHasArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithUnreferencedHasArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testNoJdkUnsafe",
    "start_line": 208,
    "end_line": 226,
    "code": "private static void testNoJdkUnsafe(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().disableJdkUnsafe().create();\r\n    TestExecutor.run(outputConsumer, \"Read: No JDK Unsafe; initial constructor value\", () -> {\r\n        ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{}\", ClassWithNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n    TestExecutor.run(outputConsumer, \"Read: No JDK Unsafe; custom value\", () -> {\r\n        ClassWithNoArgsConstructor deserialized = fromJson(gson, \"{\\\"myField\\\": 3}\", ClassWithNoArgsConstructor.class);\r\n        return Integer.toString(deserialized.i);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testEnum",
    "start_line": 228,
    "end_line": 235,
    "code": "private static void testEnum(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: Enum\", () -> toJson(gson, EnumClass.FIRST));\r\n    TestExecutor.run(outputConsumer, \"Read: Enum\", () -> fromJson(gson, \"\\\"SECOND\\\"\", EnumClass.class).toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testEnumSerializedName",
    "start_line": 237,
    "end_line": 247,
    "code": "private static void testEnumSerializedName(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: Enum SerializedName\", () -> toJson(gson, EnumClassWithSerializedName.FIRST));\r\n    TestExecutor.run(outputConsumer, \"Read: Enum SerializedName\", () -> fromJson(gson, \"\\\"two\\\"\", EnumClassWithSerializedName.class).toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testExposeAnnotation",
    "start_line": 249,
    "end_line": 253,
    "code": "private static void testExposeAnnotation(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();\r\n    TestExecutor.run(outputConsumer, \"Write: @Expose\", () -> toJson(gson, new ClassWithExposeAnnotation()));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testVersionAnnotations",
    "start_line": 255,
    "end_line": 261,
    "code": "private static void testVersionAnnotations(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setVersion(1).create();\r\n    TestExecutor.run(outputConsumer, \"Write: Version annotations\", () -> toJson(gson, new ClassWithVersionAnnotations()));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testJsonAdapterAnnotation",
    "start_line": 263,
    "end_line": 275,
    "code": "private static void testJsonAdapterAnnotation(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n    TestExecutor.run(outputConsumer, \"Write: JsonAdapter on fields\", () -> toJson(gson, new ClassWithJsonAdapterAnnotation(1, 2, 3, 4)));\r\n    String json = \"{\\\"f1\\\": 1, \\\"f2\\\": 2, \\\"f3\\\": {\\\"s\\\": \\\"3\\\"}, \\\"f4\\\": 4}\";\r\n    TestExecutor.run(outputConsumer, \"Read: JsonAdapter on fields\", () -> fromJson(gson, json, ClassWithJsonAdapterAnnotation.class).toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testGenericClasses",
    "start_line": 277,
    "end_line": 294,
    "code": "private static void testGenericClasses(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new Gson();\r\n    TestExecutor.run(outputConsumer, \"Read: Generic TypeToken\", () -> gson.fromJson(\"{\\\"t\\\": 1}\", new TypeToken<GenericClass<DummyClass>>() {\r\n    }).toString());\r\n    TestExecutor.run(outputConsumer, \"Read: Using Generic\", () -> fromJson(gson, \"{\\\"g\\\": {\\\"t\\\": 1}}\", UsingGenericClass.class).toString());\r\n    TestExecutor.run(outputConsumer, \"Read: Using Generic TypeToken\", () -> gson.fromJson(\"{\\\"g\\\": {\\\"t\\\": 1}}\", new TypeToken<GenericUsingGenericClass<DummyClass>>() {\r\n    }).toString());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  },
  {
    "type": "method",
    "name": "testDeserializingInterfaceImpl",
    "start_line": 296,
    "end_line": 315,
    "code": "private static void testDeserializingInterfaceImpl(BiConsumer<String, String> outputConsumer) {\r\n    Gson gson = new Gson();\r\n    TestExecutor.run(outputConsumer, \"Read: Interface implementation\", () -> {\r\n        try {\r\n            // Use the interface type here\r\n            List<? extends InterfaceWithImplementation> list = gson.fromJson(\"[{\\\"s\\\": \\\"value\\\"}]\", // This is the only place where the implementation class is referenced\r\n            new TypeToken<List<InterfaceWithImplementation.Implementation>>() {\r\n            });\r\n            return list.get(0).getValue();\r\n        } catch (ClassCastException e) {\r\n            // TODO: R8 causes exception, see https://github.com/google/gson/issues/2658\r\n            return \"ClassCastException\";\r\n        }\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\Main.java"
  }
]