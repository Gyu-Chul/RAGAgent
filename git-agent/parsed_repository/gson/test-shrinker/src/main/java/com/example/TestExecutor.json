[
  {
    "type": "package",
    "name": "com.example",
    "start_line": 1,
    "end_line": 1,
    "code": "package com.example;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "import",
    "name": "java.util.Optional",
    "start_line": 3,
    "end_line": 3,
    "code": "import java.util.Optional;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "import",
    "name": "java.util.function.BiConsumer",
    "start_line": 4,
    "end_line": 4,
    "code": "import java.util.function.BiConsumer;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "import",
    "name": "java.util.function.Supplier",
    "start_line": 5,
    "end_line": 5,
    "code": "import java.util.function.Supplier;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "class",
    "name": "TestExecutor",
    "start_line": 7,
    "end_line": 36,
    "code": "public class TestExecutor {\r\n\r\n    private TestExecutor() {\r\n    }\r\n\r\n    /**\r\n     * Helper method for running individual tests. In case of an exception wraps it and includes the\r\n     * {@code name} of the test to make debugging issues with the obfuscated JARs a bit easier.\r\n     */\r\n    public static void run(BiConsumer<String, String> outputConsumer, String name, Supplier<String> resultSupplier) {\r\n        String result;\r\n        try {\r\n            result = resultSupplier.get();\r\n        } catch (Throwable t) {\r\n            throw new RuntimeException(\"Test failed: \" + name, t);\r\n        }\r\n        outputConsumer.accept(name, result);\r\n    }\r\n\r\n    /**\r\n     * Returns {@code t}, but in a way which (hopefully) prevents code shrinkers from simplifying\r\n     * this.\r\n     */\r\n    public static <T> T same(T t) {\r\n        // This is essentially `return t`, but contains some redundant code to try\r\n        // prevent the code shrinkers from simplifying this\r\n        return Optional.of(t).map(v -> Optional.of(v).get()).orElseThrow(() -> new AssertionError(\"unreachable\"));\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "constructor",
    "name": "TestExecutor",
    "start_line": 8,
    "end_line": 8,
    "code": "private TestExecutor() {\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "method",
    "name": "run",
    "start_line": 14,
    "end_line": 23,
    "code": "/**\r\n * Helper method for running individual tests. In case of an exception wraps it and includes the\r\n * {@code name} of the test to make debugging issues with the obfuscated JARs a bit easier.\r\n */\r\npublic static void run(BiConsumer<String, String> outputConsumer, String name, Supplier<String> resultSupplier) {\r\n    String result;\r\n    try {\r\n        result = resultSupplier.get();\r\n    } catch (Throwable t) {\r\n        throw new RuntimeException(\"Test failed: \" + name, t);\r\n    }\r\n    outputConsumer.accept(name, result);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  },
  {
    "type": "method",
    "name": "same",
    "start_line": 29,
    "end_line": 35,
    "code": "/**\r\n * Returns {@code t}, but in a way which (hopefully) prevents code shrinkers from simplifying\r\n * this.\r\n */\r\npublic static <T> T same(T t) {\r\n    // This is essentially `return t`, but contains some redundant code to try\r\n    // prevent the code shrinkers from simplifying this\r\n    return Optional.of(t).map(v -> Optional.of(v).get()).orElseThrow(() -> new AssertionError(\"unreachable\"));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-shrinker\\src\\main\\java\\com\\example\\TestExecutor.java"
  }
]