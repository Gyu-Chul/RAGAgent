[
  {
    "type": "package",
    "name": "com.google.gson.jpms_test",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.jpms_test;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.annotations.SerializedName",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.annotations.SerializedName;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.io.StringReader",
    "start_line": 27,
    "end_line": 27,
    "code": "import java.io.StringReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Constructor",
    "start_line": 28,
    "end_line": 28,
    "code": "import java.lang.reflect.Constructor;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Field",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.lang.reflect.Field;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.InaccessibleObjectException",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.reflect.InaccessibleObjectException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Modifier",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.lang.reflect.Modifier;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Arrays",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.Arrays;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 33,
    "end_line": 33,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "class",
    "name": "ExportedPackagesTest",
    "start_line": 39,
    "end_line": 101,
    "code": "/**\r\n * Verifies that Gson's {@code module-info.class} properly 'exports' all its packages containing\r\n * public API.\r\n */\r\npublic class ExportedPackagesTest {\r\n\r\n    /**\r\n     * Tests package {@code com.google.gson}\r\n     */\r\n    @Test\r\n    public void testMainPackage() {\r\n        Gson gson = new Gson();\r\n        assertThat(gson.toJson(1)).isEqualTo(\"1\");\r\n    }\r\n\r\n    /**\r\n     * Tests package {@code com.google.gson.annotations}\r\n     */\r\n    @Test\r\n    public void testAnnotationsPackage() throws Exception {\r\n        class Annotated {\r\n\r\n            @SerializedName(\"custom-name\")\r\n            @SuppressWarnings(\"UnusedVariable\")\r\n            int i;\r\n        }\r\n        Field field = Annotated.class.getDeclaredField(\"i\");\r\n        SerializedName annotation = field.getAnnotation(SerializedName.class);\r\n        assertThat(annotation.value()).isEqualTo(\"custom-name\");\r\n    }\r\n\r\n    /**\r\n     * Tests package {@code com.google.gson.reflect}\r\n     */\r\n    @Test\r\n    public void testReflectPackage() {\r\n        var typeToken = TypeToken.get(String.class);\r\n        assertThat(typeToken.getRawType()).isEqualTo(String.class);\r\n    }\r\n\r\n    /**\r\n     * Tests package {@code com.google.gson.stream}\r\n     */\r\n    @Test\r\n    public void testStreamPackage() throws IOException {\r\n        JsonReader jsonReader = new JsonReader(new StringReader(\"2\"));\r\n        assertThat(jsonReader.nextInt()).isEqualTo(2);\r\n    }\r\n\r\n    /**\r\n     * Verifies that Gson packages are only 'exported' but not 'opened' for reflection.\r\n     */\r\n    @Test\r\n    public void testReflectionInternalField() throws Exception {\r\n        Gson gson = new Gson();\r\n        // Get an arbitrary non-public instance field\r\n        Field field = Arrays.stream(Gson.class.getDeclaredFields()).filter(f -> !Modifier.isStatic(f.getModifiers()) && !Modifier.isPublic(f.getModifiers())).findFirst().get();\r\n        assertThrows(InaccessibleObjectException.class, () -> field.setAccessible(true));\r\n        assertThrows(IllegalAccessException.class, () -> field.get(gson));\r\n    }\r\n\r\n    @Test\r\n    public void testInaccessiblePackage() throws Exception {\r\n        // Note: In case this class is renamed / removed, can change this to any other internal class\r\n        Class<?> internalClass = Class.forName(\"com.google.gson.internal.LinkedTreeMap\");\r\n        assertThat(Modifier.isPublic(internalClass.getModifiers())).isTrue();\r\n        // Get the public constructor\r\n        Constructor<?> constructor = internalClass.getConstructor();\r\n        assertThrows(InaccessibleObjectException.class, () -> constructor.setAccessible(true));\r\n        assertThrows(IllegalAccessException.class, () -> constructor.newInstance());\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testMainPackage",
    "start_line": 41,
    "end_line": 45,
    "code": "/**\r\n * Tests package {@code com.google.gson}\r\n */\r\n@Test\r\npublic void testMainPackage() {\r\n    Gson gson = new Gson();\r\n    assertThat(gson.toJson(1)).isEqualTo(\"1\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testAnnotationsPackage",
    "start_line": 48,
    "end_line": 59,
    "code": "/**\r\n * Tests package {@code com.google.gson.annotations}\r\n */\r\n@Test\r\npublic void testAnnotationsPackage() throws Exception {\r\n    class Annotated {\r\n\r\n        @SerializedName(\"custom-name\")\r\n        @SuppressWarnings(\"UnusedVariable\")\r\n        int i;\r\n    }\r\n    Field field = Annotated.class.getDeclaredField(\"i\");\r\n    SerializedName annotation = field.getAnnotation(SerializedName.class);\r\n    assertThat(annotation.value()).isEqualTo(\"custom-name\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testReflectPackage",
    "start_line": 62,
    "end_line": 66,
    "code": "/**\r\n * Tests package {@code com.google.gson.reflect}\r\n */\r\n@Test\r\npublic void testReflectPackage() {\r\n    var typeToken = TypeToken.get(String.class);\r\n    assertThat(typeToken.getRawType()).isEqualTo(String.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testStreamPackage",
    "start_line": 69,
    "end_line": 73,
    "code": "/**\r\n * Tests package {@code com.google.gson.stream}\r\n */\r\n@Test\r\npublic void testStreamPackage() throws IOException {\r\n    JsonReader jsonReader = new JsonReader(new StringReader(\"2\"));\r\n    assertThat(jsonReader.nextInt()).isEqualTo(2);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testReflectionInternalField",
    "start_line": 76,
    "end_line": 89,
    "code": "/**\r\n * Verifies that Gson packages are only 'exported' but not 'opened' for reflection.\r\n */\r\n@Test\r\npublic void testReflectionInternalField() throws Exception {\r\n    Gson gson = new Gson();\r\n    // Get an arbitrary non-public instance field\r\n    Field field = Arrays.stream(Gson.class.getDeclaredFields()).filter(f -> !Modifier.isStatic(f.getModifiers()) && !Modifier.isPublic(f.getModifiers())).findFirst().get();\r\n    assertThrows(InaccessibleObjectException.class, () -> field.setAccessible(true));\r\n    assertThrows(IllegalAccessException.class, () -> field.get(gson));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  },
  {
    "type": "method",
    "name": "testInaccessiblePackage",
    "start_line": 91,
    "end_line": 100,
    "code": "@Test\r\npublic void testInaccessiblePackage() throws Exception {\r\n    // Note: In case this class is renamed / removed, can change this to any other internal class\r\n    Class<?> internalClass = Class.forName(\"com.google.gson.internal.LinkedTreeMap\");\r\n    assertThat(Modifier.isPublic(internalClass.getModifiers())).isTrue();\r\n    // Get the public constructor\r\n    Constructor<?> constructor = internalClass.getConstructor();\r\n    assertThrows(InaccessibleObjectException.class, () -> constructor.setAccessible(true));\r\n    assertThrows(IllegalAccessException.class, () -> constructor.newInstance());\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ExportedPackagesTest.java"
  }
]