[
  {
    "type": "package",
    "name": "com.google.gson.jpms_test",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.jpms_test;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonIOException",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonIOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 24,
    "end_line": 24,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "class",
    "name": "ReflectionInaccessibleTest",
    "start_line": 30,
    "end_line": 66,
    "code": "/**\r\n * Verifies that Gson cannot use reflection for classes in a package if it has not been 'opened' to\r\n * the Gson module in the {@code module-info.java} of the project.\r\n */\r\npublic class ReflectionInaccessibleTest {\r\n\r\n    private static class MyClass {\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        int i;\r\n    }\r\n\r\n    @Test\r\n    public void testDeserialization() {\r\n        Gson gson = new Gson();\r\n        var e = assertThrows(JsonIOException.class, () -> gson.fromJson(\"{\\\"i\\\":1}\", MyClass.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Failed making field '\" + MyClass.class.getName() + \"#i' accessible; either increase its visibility or write a custom TypeAdapter for\" + \" its declaring type.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible-to-module-gson\");\r\n    }\r\n\r\n    @Test\r\n    public void testSerialization() {\r\n        Gson gson = new Gson();\r\n        MyClass obj = new MyClass();\r\n        obj.i = 1;\r\n        var e = assertThrows(JsonIOException.class, () -> gson.toJson(obj));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Failed making field '\" + MyClass.class.getName() + \"#i' accessible; either increase its visibility or write a custom TypeAdapter for\" + \" its declaring type.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible-to-module-gson\");\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "method",
    "name": "testDeserialization",
    "start_line": 36,
    "end_line": 48,
    "code": "@Test\r\npublic void testDeserialization() {\r\n    Gson gson = new Gson();\r\n    var e = assertThrows(JsonIOException.class, () -> gson.fromJson(\"{\\\"i\\\":1}\", MyClass.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Failed making field '\" + MyClass.class.getName() + \"#i' accessible; either increase its visibility or write a custom TypeAdapter for\" + \" its declaring type.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible-to-module-gson\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  },
  {
    "type": "method",
    "name": "testSerialization",
    "start_line": 50,
    "end_line": 65,
    "code": "@Test\r\npublic void testSerialization() {\r\n    Gson gson = new Gson();\r\n    MyClass obj = new MyClass();\r\n    obj.i = 1;\r\n    var e = assertThrows(JsonIOException.class, () -> gson.toJson(obj));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Failed making field '\" + MyClass.class.getName() + \"#i' accessible; either increase its visibility or write a custom TypeAdapter for\" + \" its declaring type.\\n\" + \"See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible-to-module-gson\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\test-jpms\\src\\test\\java\\com\\google\\gson\\jpms_test\\ReflectionInaccessibleTest.java"
  }
]