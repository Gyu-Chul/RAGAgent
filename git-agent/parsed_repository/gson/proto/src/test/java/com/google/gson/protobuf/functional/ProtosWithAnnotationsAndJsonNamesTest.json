[
  {
    "type": "package",
    "name": "com.google.gson.protobuf.functional",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.protobuf.functional;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 20,
    "end_line": 20,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.protobuf.ProtoTypeAdapter",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.protobuf.ProtoTypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.protobuf.generated.Annotations",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.protobuf.generated.Annotations;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.protobuf.generated.Bag.ProtoWithAnnotationsAndJsonNames",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotationsAndJsonNames;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "com.google.protobuf.GeneratedMessage",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.protobuf.GeneratedMessage;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 26,
    "end_line": 26,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 27,
    "end_line": 27,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "class",
    "name": "ProtosWithAnnotationsAndJsonNamesTest",
    "start_line": 35,
    "end_line": 202,
    "code": "/**\r\n * Functional tests for protocol buffers using annotations and custom json_name values for field\r\n * names.\r\n *\r\n * @author Andrew Szeto\r\n */\r\npublic class ProtosWithAnnotationsAndJsonNamesTest {\r\n\r\n    private static final Gson GSON_PLAIN = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().build()).create();\r\n\r\n    private static final Gson GSON_WITH_SERIALIZED_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().addSerializedNameExtension(Annotations.serializedName).setShouldUseJsonNameFieldOption(false).build()).create();\r\n\r\n    private static final Gson GSON_WITH_JSON_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().setShouldUseJsonNameFieldOption(true).build()).create();\r\n\r\n    private static final Gson GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().addSerializedNameExtension(Annotations.serializedName).setShouldUseJsonNameFieldOption(true).build()).create();\r\n\r\n    private static final Map<Gson, String> JSON_OUTPUTS = Map.of(GSON_PLAIN, \"{\\\"neither\\\":\\\"xxx\\\",\\\"jsonNameOnly\\\":\\\"yyy\\\",\\\"annotationOnly\\\":\\\"zzz\\\",\\\"both\\\":\\\"www\\\"}\", GSON_WITH_JSON_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"aaa\\\":\\\"yyy\\\",\\\"annotationOnly\\\":\\\"zzz\\\",\\\"ccc\\\":\\\"www\\\"}\", GSON_WITH_SERIALIZED_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"jsonNameOnly\\\":\\\"yyy\\\",\\\"bbb\\\":\\\"zzz\\\",\\\"ddd\\\":\\\"www\\\"}\", GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"aaa\\\":\\\"yyy\\\",\\\"bbb\\\":\\\"zzz\\\",\\\"ddd\\\":\\\"www\\\"}\");\r\n\r\n    private static final ProtoWithAnnotationsAndJsonNames PROTO = ProtoWithAnnotationsAndJsonNames.newBuilder().setNeither(\"xxx\").setJsonNameOnly(\"yyy\").setAnnotationOnly(\"zzz\").setBoth(\"www\").build();\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_basicConversions() {\r\n        JSON_OUTPUTS.forEach((gson, json) -> {\r\n            assertThat(gson.fromJson(json, ProtoWithAnnotationsAndJsonNames.class)).isEqualTo(PROTO);\r\n            assertThat(gson.toJson(PROTO)).isEqualTo(json);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_basicRoundTrips() {\r\n        JSON_OUTPUTS.forEach((gson, json) -> {\r\n            assertThat(roundTrip(gson, gson, json)).isEqualTo(json);\r\n            assertThat(roundTrip(gson, gson, PROTO)).isEqualTo(PROTO);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_unannotatedField() {\r\n        ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setNeither(\"zzz\").build();\r\n        String json = \"{\\\"neither\\\":\\\"zzz\\\"}\";\r\n        for (Gson gson1 : JSON_OUTPUTS.keySet()) {\r\n            for (Gson gson2 : JSON_OUTPUTS.keySet()) {\r\n                // all configs should match with each other in how they serialize this proto, and they\r\n                // should be able to deserialize any other config's serialization of the proto back to its\r\n                // original form\r\n                assertThat(gson1.toJson(proto)).isEqualTo(gson2.toJson(proto));\r\n                assertThat(roundTrip(gson1, gson2, proto)).isEqualTo(proto);\r\n                // the same, but in the other direction\r\n                assertThat(gson1.fromJson(json, ProtoWithAnnotationsAndJsonNames.class)).isEqualTo(gson2.fromJson(json, ProtoWithAnnotationsAndJsonNames.class));\r\n                assertThat(roundTrip(gson1, gson2, json)).isEqualTo(json);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_fieldWithJsonName() {\r\n        ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setJsonNameOnly(\"zzz\").build();\r\n        String jsonWithoutJsonName = \"{\\\"jsonNameOnly\\\":\\\"zzz\\\"}\";\r\n        String jsonWithJsonName = \"{\\\"aaa\\\":\\\"zzz\\\"}\";\r\n        // the ProtoTypeAdapter that checks for the custom annotation should default to the basic name\r\n        assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonWithoutJsonName);\r\n        assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(GSON_PLAIN.toJson(proto));\r\n        // the ProtoTypeAdapter that respects the `json_name` option should not have the same output as\r\n        // the base case\r\n        assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isNotEqualTo(GSON_PLAIN.toJson(proto));\r\n        // both ProtoTypeAdapters that set shouldUseJsonNameFieldOption to true should match in output\r\n        assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(jsonWithJsonName);\r\n        assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto));\r\n        // should fail to round-trip if we serialize via the `json_name` and deserialize without it or\r\n        // vice versa\r\n        assertThat(roundTrip(GSON_PLAIN, GSON_WITH_JSON_NAME, proto)).isNotEqualTo(proto);\r\n        assertThat(roundTrip(GSON_WITH_JSON_NAME, GSON_PLAIN, proto)).isNotEqualTo(proto);\r\n    }\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_fieldWithCustomSerializedName() {\r\n        ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setAnnotationOnly(\"zzz\").build();\r\n        String jsonWithoutCustomName = \"{\\\"annotationOnly\\\":\\\"zzz\\\"}\";\r\n        String jsonWithCustomName = \"{\\\"bbb\\\":\\\"zzz\\\"}\";\r\n        // the ProtoTypeAdapter that checks for the json name should default to the basic name\r\n        assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonWithoutCustomName);\r\n        assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(GSON_PLAIN.toJson(proto));\r\n        // the ProtoTypeAdapter that checks for the custom serialized name should not have the same\r\n        // output as the base case\r\n        assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isNotEqualTo(GSON_PLAIN.toJson(proto));\r\n        // both ProtoTypeAdapters that check for the custom serialized name should match in output\r\n        assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(jsonWithCustomName);\r\n        assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto));\r\n        // should fail to round-trip if we serialize via the custom name and deserialize without it or\r\n        // vice versa\r\n        assertThat(roundTrip(GSON_PLAIN, GSON_WITH_SERIALIZED_NAME, proto)).isNotEqualTo(proto);\r\n        assertThat(roundTrip(GSON_WITH_SERIALIZED_NAME, GSON_PLAIN, proto)).isNotEqualTo(proto);\r\n    }\r\n\r\n    @Test\r\n    public void testProtoWithAnnotationsAndJsonNames_fieldWithJsonNameAndCustomSerializedName() {\r\n        ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setBoth(\"zzz\").build();\r\n        String jsonPlain = \"{\\\"both\\\":\\\"zzz\\\"}\";\r\n        String jsonWithJsonName = \"{\\\"ccc\\\":\\\"zzz\\\"}\";\r\n        String jsonWithCustomName = \"{\\\"ddd\\\":\\\"zzz\\\"}\";\r\n        // the three different configs serialize to three different values\r\n        assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonPlain);\r\n        assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(jsonWithJsonName);\r\n        assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(jsonWithCustomName);\r\n        // the case where both configs are enabled will prefer the custom annotation\r\n        assertThat(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME.toJson(proto));\r\n    }\r\n\r\n    private static String roundTrip(Gson jsonToProto, Gson protoToJson, String json) {\r\n        return protoToJson.toJson(jsonToProto.fromJson(json, ProtoWithAnnotationsAndJsonNames.class));\r\n    }\r\n\r\n    private static ProtoWithAnnotationsAndJsonNames roundTrip(Gson protoToJson, Gson jsonToProto, ProtoWithAnnotationsAndJsonNames proto) {\r\n        return jsonToProto.fromJson(protoToJson.toJson(proto), ProtoWithAnnotationsAndJsonNames.class);\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "GSON_PLAIN",
    "start_line": 36,
    "end_line": 40,
    "code": "private static final Gson GSON_PLAIN = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().build()).create();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "GSON_WITH_SERIALIZED_NAME",
    "start_line": 41,
    "end_line": 49,
    "code": "private static final Gson GSON_WITH_SERIALIZED_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().addSerializedNameExtension(Annotations.serializedName).setShouldUseJsonNameFieldOption(false).build()).create();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "GSON_WITH_JSON_NAME",
    "start_line": 50,
    "end_line": 55,
    "code": "private static final Gson GSON_WITH_JSON_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().setShouldUseJsonNameFieldOption(true).build()).create();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME",
    "start_line": 56,
    "end_line": 64,
    "code": "private static final Gson GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME = new GsonBuilder().registerTypeHierarchyAdapter(GeneratedMessage.class, ProtoTypeAdapter.newBuilder().addSerializedNameExtension(Annotations.serializedName).setShouldUseJsonNameFieldOption(true).build()).create();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "JSON_OUTPUTS",
    "start_line": 66,
    "end_line": 75,
    "code": "private static final Map<Gson, String> JSON_OUTPUTS = Map.of(GSON_PLAIN, \"{\\\"neither\\\":\\\"xxx\\\",\\\"jsonNameOnly\\\":\\\"yyy\\\",\\\"annotationOnly\\\":\\\"zzz\\\",\\\"both\\\":\\\"www\\\"}\", GSON_WITH_JSON_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"aaa\\\":\\\"yyy\\\",\\\"annotationOnly\\\":\\\"zzz\\\",\\\"ccc\\\":\\\"www\\\"}\", GSON_WITH_SERIALIZED_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"jsonNameOnly\\\":\\\"yyy\\\",\\\"bbb\\\":\\\"zzz\\\",\\\"ddd\\\":\\\"www\\\"}\", GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME, \"{\\\"neither\\\":\\\"xxx\\\",\\\"aaa\\\":\\\"yyy\\\",\\\"bbb\\\":\\\"zzz\\\",\\\"ddd\\\":\\\"www\\\"}\");",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "field",
    "name": "PROTO",
    "start_line": 77,
    "end_line": 83,
    "code": "private static final ProtoWithAnnotationsAndJsonNames PROTO = ProtoWithAnnotationsAndJsonNames.newBuilder().setNeither(\"xxx\").setJsonNameOnly(\"yyy\").setAnnotationOnly(\"zzz\").setBoth(\"www\").build();",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_basicConversions",
    "start_line": 85,
    "end_line": 92,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_basicConversions() {\r\n    JSON_OUTPUTS.forEach((gson, json) -> {\r\n        assertThat(gson.fromJson(json, ProtoWithAnnotationsAndJsonNames.class)).isEqualTo(PROTO);\r\n        assertThat(gson.toJson(PROTO)).isEqualTo(json);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_basicRoundTrips",
    "start_line": 94,
    "end_line": 101,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_basicRoundTrips() {\r\n    JSON_OUTPUTS.forEach((gson, json) -> {\r\n        assertThat(roundTrip(gson, gson, json)).isEqualTo(json);\r\n        assertThat(roundTrip(gson, gson, PROTO)).isEqualTo(PROTO);\r\n    });\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_unannotatedField",
    "start_line": 103,
    "end_line": 122,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_unannotatedField() {\r\n    ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setNeither(\"zzz\").build();\r\n    String json = \"{\\\"neither\\\":\\\"zzz\\\"}\";\r\n    for (Gson gson1 : JSON_OUTPUTS.keySet()) {\r\n        for (Gson gson2 : JSON_OUTPUTS.keySet()) {\r\n            // all configs should match with each other in how they serialize this proto, and they\r\n            // should be able to deserialize any other config's serialization of the proto back to its\r\n            // original form\r\n            assertThat(gson1.toJson(proto)).isEqualTo(gson2.toJson(proto));\r\n            assertThat(roundTrip(gson1, gson2, proto)).isEqualTo(proto);\r\n            // the same, but in the other direction\r\n            assertThat(gson1.fromJson(json, ProtoWithAnnotationsAndJsonNames.class)).isEqualTo(gson2.fromJson(json, ProtoWithAnnotationsAndJsonNames.class));\r\n            assertThat(roundTrip(gson1, gson2, json)).isEqualTo(json);\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_fieldWithJsonName",
    "start_line": 124,
    "end_line": 148,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_fieldWithJsonName() {\r\n    ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setJsonNameOnly(\"zzz\").build();\r\n    String jsonWithoutJsonName = \"{\\\"jsonNameOnly\\\":\\\"zzz\\\"}\";\r\n    String jsonWithJsonName = \"{\\\"aaa\\\":\\\"zzz\\\"}\";\r\n    // the ProtoTypeAdapter that checks for the custom annotation should default to the basic name\r\n    assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonWithoutJsonName);\r\n    assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(GSON_PLAIN.toJson(proto));\r\n    // the ProtoTypeAdapter that respects the `json_name` option should not have the same output as\r\n    // the base case\r\n    assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isNotEqualTo(GSON_PLAIN.toJson(proto));\r\n    // both ProtoTypeAdapters that set shouldUseJsonNameFieldOption to true should match in output\r\n    assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(jsonWithJsonName);\r\n    assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto));\r\n    // should fail to round-trip if we serialize via the `json_name` and deserialize without it or\r\n    // vice versa\r\n    assertThat(roundTrip(GSON_PLAIN, GSON_WITH_JSON_NAME, proto)).isNotEqualTo(proto);\r\n    assertThat(roundTrip(GSON_WITH_JSON_NAME, GSON_PLAIN, proto)).isNotEqualTo(proto);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_fieldWithCustomSerializedName",
    "start_line": 150,
    "end_line": 174,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_fieldWithCustomSerializedName() {\r\n    ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setAnnotationOnly(\"zzz\").build();\r\n    String jsonWithoutCustomName = \"{\\\"annotationOnly\\\":\\\"zzz\\\"}\";\r\n    String jsonWithCustomName = \"{\\\"bbb\\\":\\\"zzz\\\"}\";\r\n    // the ProtoTypeAdapter that checks for the json name should default to the basic name\r\n    assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonWithoutCustomName);\r\n    assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(GSON_PLAIN.toJson(proto));\r\n    // the ProtoTypeAdapter that checks for the custom serialized name should not have the same\r\n    // output as the base case\r\n    assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isNotEqualTo(GSON_PLAIN.toJson(proto));\r\n    // both ProtoTypeAdapters that check for the custom serialized name should match in output\r\n    assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(jsonWithCustomName);\r\n    assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto));\r\n    // should fail to round-trip if we serialize via the custom name and deserialize without it or\r\n    // vice versa\r\n    assertThat(roundTrip(GSON_PLAIN, GSON_WITH_SERIALIZED_NAME, proto)).isNotEqualTo(proto);\r\n    assertThat(roundTrip(GSON_WITH_SERIALIZED_NAME, GSON_PLAIN, proto)).isNotEqualTo(proto);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "testProtoWithAnnotationsAndJsonNames_fieldWithJsonNameAndCustomSerializedName",
    "start_line": 176,
    "end_line": 192,
    "code": "@Test\r\npublic void testProtoWithAnnotationsAndJsonNames_fieldWithJsonNameAndCustomSerializedName() {\r\n    ProtoWithAnnotationsAndJsonNames proto = ProtoWithAnnotationsAndJsonNames.newBuilder().setBoth(\"zzz\").build();\r\n    String jsonPlain = \"{\\\"both\\\":\\\"zzz\\\"}\";\r\n    String jsonWithJsonName = \"{\\\"ccc\\\":\\\"zzz\\\"}\";\r\n    String jsonWithCustomName = \"{\\\"ddd\\\":\\\"zzz\\\"}\";\r\n    // the three different configs serialize to three different values\r\n    assertThat(GSON_PLAIN.toJson(proto)).isEqualTo(jsonPlain);\r\n    assertThat(GSON_WITH_JSON_NAME.toJson(proto)).isEqualTo(jsonWithJsonName);\r\n    assertThat(GSON_WITH_SERIALIZED_NAME.toJson(proto)).isEqualTo(jsonWithCustomName);\r\n    // the case where both configs are enabled will prefer the custom annotation\r\n    assertThat(GSON_WITH_SERIALIZED_NAME_AND_JSON_NAME.toJson(proto)).isEqualTo(GSON_WITH_SERIALIZED_NAME.toJson(proto));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "roundTrip",
    "start_line": 194,
    "end_line": 196,
    "code": "private static String roundTrip(Gson jsonToProto, Gson protoToJson, String json) {\r\n    return protoToJson.toJson(jsonToProto.fromJson(json, ProtoWithAnnotationsAndJsonNames.class));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  },
  {
    "type": "method",
    "name": "roundTrip",
    "start_line": 198,
    "end_line": 201,
    "code": "private static ProtoWithAnnotationsAndJsonNames roundTrip(Gson protoToJson, Gson jsonToProto, ProtoWithAnnotationsAndJsonNames proto) {\r\n    return jsonToProto.fromJson(protoToJson.toJson(proto), ProtoWithAnnotationsAndJsonNames.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\proto\\src\\test\\java\\com\\google\\gson\\protobuf\\functional\\ProtosWithAnnotationsAndJsonNamesTest.java"
  }
]