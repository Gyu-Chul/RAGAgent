[
  {
    "type": "package",
    "name": "com.google.gson.interceptors",
    "start_line": 16,
    "end_line": 16,
    "code": "package com.google.gson.interceptors;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 18,
    "end_line": 18,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 19,
    "end_line": 19,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 21,
    "end_line": 21,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonSyntaxException",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonSyntaxException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapter",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.TypeAdapter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.reflect.TypeToken",
    "start_line": 26,
    "end_line": 26,
    "code": "import com.google.gson.reflect.TypeToken;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonReader",
    "start_line": 27,
    "end_line": 27,
    "code": "import com.google.gson.stream.JsonReader;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.stream.JsonWriter",
    "start_line": 28,
    "end_line": 28,
    "code": "import com.google.gson.stream.JsonWriter;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.io.IOException",
    "start_line": 29,
    "end_line": 29,
    "code": "import java.io.IOException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.lang.reflect.Type",
    "start_line": 30,
    "end_line": 30,
    "code": "import java.lang.reflect.Type;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Collection",
    "start_line": 31,
    "end_line": 31,
    "code": "import java.util.Collection;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.util.List",
    "start_line": 32,
    "end_line": 32,
    "code": "import java.util.List;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map",
    "start_line": 33,
    "end_line": 33,
    "code": "import java.util.Map;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "java.util.Map.Entry",
    "start_line": 34,
    "end_line": 34,
    "code": "import java.util.Map.Entry;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Before",
    "start_line": 35,
    "end_line": 35,
    "code": "import org.junit.Before;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 36,
    "end_line": 36,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "class",
    "name": "InterceptorTest",
    "start_line": 43,
    "end_line": 200,
    "code": "/**\r\n * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.\r\n *\r\n * @author Inderjeet Singh\r\n */\r\npublic final class InterceptorTest {\r\n\r\n    private Gson gson;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        this.gson = new GsonBuilder().registerTypeAdapterFactory(new InterceptorFactory()).enableComplexMapKeySerialization().create();\r\n    }\r\n\r\n    @Test\r\n    public void testExceptionsPropagated() {\r\n        var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{}\", User.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"name and password are required fields.\");\r\n    }\r\n\r\n    @Test\r\n    public void testTopLevelClass() {\r\n        User user = gson.fromJson(\"{name:'bob',password:'pwd'}\", User.class);\r\n        assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @Test\r\n    public void testList() {\r\n        List<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<List<User>>() {\r\n        }.getType());\r\n        User user = list.get(0);\r\n        assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @Test\r\n    public void testCollection() {\r\n        Collection<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<Collection<User>>() {\r\n        }.getType());\r\n        User user = list.iterator().next();\r\n        assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @Test\r\n    public void testMapKeyAndValues() {\r\n        Type mapType = new TypeToken<Map<User, Address>>() {\r\n        }.getType();\r\n        var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[[{name:'bob',password:'pwd'},{}]]\", mapType));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"Address city, state and zip are required fields.\");\r\n        Map<User, Address> map = gson.fromJson(\"[[{name:'bob',password:'pwd'},{city:'Mountain View',state:'CA',zip:'94043'}]]\", mapType);\r\n        Entry<User, Address> entry = map.entrySet().iterator().next();\r\n        assertThat(entry.getKey().email).isEqualTo(User.DEFAULT_EMAIL);\r\n        assertThat(entry.getValue().firstLine).isEqualTo(Address.DEFAULT_FIRST_LINE);\r\n    }\r\n\r\n    @Test\r\n    public void testField() {\r\n        UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\r\n        assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @Test\r\n    public void testCustomTypeAdapter() {\r\n        Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new TypeAdapter<User>() {\r\n\r\n            @Override\r\n            public void write(JsonWriter out, User value) throws IOException {\r\n                throw new UnsupportedOperationException();\r\n            }\r\n\r\n            @Override\r\n            public User read(JsonReader in) throws IOException {\r\n                in.beginObject();\r\n                assertThat(in.nextName()).isEqualTo(\"name\");\r\n                String name = in.nextString();\r\n                assertThat(in.nextName()).isEqualTo(\"password\");\r\n                String password = in.nextString();\r\n                in.endObject();\r\n                return new User(name, password);\r\n            }\r\n        }).registerTypeAdapterFactory(new InterceptorFactory()).create();\r\n        UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\r\n        assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @Test\r\n    public void testDirectInvocationOfTypeAdapter() throws Exception {\r\n        TypeAdapter<UserGroup> adapter = gson.getAdapter(UserGroup.class);\r\n        UserGroup userGroup = adapter.fromJson(\"{\\\"user\\\":{\\\"name\\\":\\\"bob\\\",\\\"password\\\":\\\"pwd\\\"}}\");\r\n        assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class UserGroup {\r\n\r\n        User user;\r\n\r\n        String city;\r\n    }\r\n\r\n    @Intercept(postDeserialize = UserValidator.class)\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class User {\r\n\r\n        static final String DEFAULT_EMAIL = \"invalid@invalid.com\";\r\n\r\n        String name;\r\n\r\n        String password;\r\n\r\n        String email;\r\n\r\n        Address address;\r\n\r\n        public User(String name, String password) {\r\n            this.name = name;\r\n            this.password = password;\r\n        }\r\n    }\r\n\r\n    public static final class UserValidator implements JsonPostDeserializer<User> {\r\n\r\n        @Override\r\n        public void postDeserialize(User user) {\r\n            if (user.name == null || user.password == null) {\r\n                throw new JsonSyntaxException(\"name and password are required fields.\");\r\n            }\r\n            if (user.email == null) {\r\n                user.email = User.DEFAULT_EMAIL;\r\n            }\r\n        }\r\n    }\r\n\r\n    @Intercept(postDeserialize = AddressValidator.class)\r\n    @SuppressWarnings(\"unused\")\r\n    private static final class Address {\r\n\r\n        static final String DEFAULT_FIRST_LINE = \"unknown\";\r\n\r\n        String firstLine;\r\n\r\n        String secondLine;\r\n\r\n        String city;\r\n\r\n        String state;\r\n\r\n        String zip;\r\n    }\r\n\r\n    public static final class AddressValidator implements JsonPostDeserializer<Address> {\r\n\r\n        @Override\r\n        public void postDeserialize(Address address) {\r\n            if (address.city == null || address.state == null || address.zip == null) {\r\n                throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n            }\r\n            if (address.firstLine == null) {\r\n                address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n            }\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "field",
    "name": "gson",
    "start_line": 45,
    "end_line": 45,
    "code": "private Gson gson;",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "setUp",
    "start_line": 47,
    "end_line": 54,
    "code": "@Before\r\npublic void setUp() throws Exception {\r\n    this.gson = new GsonBuilder().registerTypeAdapterFactory(new InterceptorFactory()).enableComplexMapKeySerialization().create();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testExceptionsPropagated",
    "start_line": 56,
    "end_line": 60,
    "code": "@Test\r\npublic void testExceptionsPropagated() {\r\n    var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{}\", User.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"name and password are required fields.\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testTopLevelClass",
    "start_line": 62,
    "end_line": 66,
    "code": "@Test\r\npublic void testTopLevelClass() {\r\n    User user = gson.fromJson(\"{name:'bob',password:'pwd'}\", User.class);\r\n    assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testList",
    "start_line": 68,
    "end_line": 74,
    "code": "@Test\r\npublic void testList() {\r\n    List<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<List<User>>() {\r\n    }.getType());\r\n    User user = list.get(0);\r\n    assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testCollection",
    "start_line": 76,
    "end_line": 83,
    "code": "@Test\r\npublic void testCollection() {\r\n    Collection<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<Collection<User>>() {\r\n    }.getType());\r\n    User user = list.iterator().next();\r\n    assertThat(user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testMapKeyAndValues",
    "start_line": 85,
    "end_line": 101,
    "code": "@Test\r\npublic void testMapKeyAndValues() {\r\n    Type mapType = new TypeToken<Map<User, Address>>() {\r\n    }.getType();\r\n    var e = assertThrows(JsonSyntaxException.class, () -> gson.fromJson(\"[[{name:'bob',password:'pwd'},{}]]\", mapType));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"Address city, state and zip are required fields.\");\r\n    Map<User, Address> map = gson.fromJson(\"[[{name:'bob',password:'pwd'},{city:'Mountain View',state:'CA',zip:'94043'}]]\", mapType);\r\n    Entry<User, Address> entry = map.entrySet().iterator().next();\r\n    assertThat(entry.getKey().email).isEqualTo(User.DEFAULT_EMAIL);\r\n    assertThat(entry.getValue().firstLine).isEqualTo(Address.DEFAULT_FIRST_LINE);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testField",
    "start_line": 103,
    "end_line": 107,
    "code": "@Test\r\npublic void testField() {\r\n    UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\r\n    assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testCustomTypeAdapter",
    "start_line": 109,
    "end_line": 136,
    "code": "@Test\r\npublic void testCustomTypeAdapter() {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(User.class, new TypeAdapter<User>() {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, User value) throws IOException {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public User read(JsonReader in) throws IOException {\r\n            in.beginObject();\r\n            assertThat(in.nextName()).isEqualTo(\"name\");\r\n            String name = in.nextString();\r\n            assertThat(in.nextName()).isEqualTo(\"password\");\r\n            String password = in.nextString();\r\n            in.endObject();\r\n            return new User(name, password);\r\n        }\r\n    }).registerTypeAdapterFactory(new InterceptorFactory()).create();\r\n    UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\r\n    assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  },
  {
    "type": "method",
    "name": "testDirectInvocationOfTypeAdapter",
    "start_line": 138,
    "end_line": 143,
    "code": "@Test\r\npublic void testDirectInvocationOfTypeAdapter() throws Exception {\r\n    TypeAdapter<UserGroup> adapter = gson.getAdapter(UserGroup.class);\r\n    UserGroup userGroup = adapter.fromJson(\"{\\\"user\\\":{\\\"name\\\":\\\"bob\\\",\\\"password\\\":\\\"pwd\\\"}}\");\r\n    assertThat(userGroup.user.email).isEqualTo(User.DEFAULT_EMAIL);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\interceptors\\InterceptorTest.java"
  }
]