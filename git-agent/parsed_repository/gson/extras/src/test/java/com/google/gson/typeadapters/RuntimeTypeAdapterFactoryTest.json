[
  {
    "type": "package",
    "name": "com.google.gson.typeadapters",
    "start_line": 17,
    "end_line": 17,
    "code": "package com.google.gson.typeadapters;\r\n\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "com.google.common.truth.Truth.assertThat",
    "start_line": 19,
    "end_line": 19,
    "code": "import static com.google.common.truth.Truth.assertThat;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Assert.assertThrows",
    "start_line": 20,
    "end_line": 20,
    "code": "import static org.junit.Assert.assertThrows;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.Gson",
    "start_line": 22,
    "end_line": 22,
    "code": "import com.google.gson.Gson;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.GsonBuilder",
    "start_line": 23,
    "end_line": 23,
    "code": "import com.google.gson.GsonBuilder;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.JsonParseException",
    "start_line": 24,
    "end_line": 24,
    "code": "import com.google.gson.JsonParseException;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "com.google.gson.TypeAdapterFactory",
    "start_line": 25,
    "end_line": 25,
    "code": "import com.google.gson.TypeAdapterFactory;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "import",
    "name": "org.junit.Test",
    "start_line": 26,
    "end_line": 26,
    "code": "import org.junit.Test;\r\n",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "class",
    "name": "RuntimeTypeAdapterFactoryTest",
    "start_line": 28,
    "end_line": 244,
    "code": "public final class RuntimeTypeAdapterFactoryTest {\r\n\r\n    @Test\r\n    public void testRuntimeTypeAdapter() {\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n        CreditCard original = new CreditCard(\"Jesse\", 234);\r\n        assertThat(gson.toJson(original, BillingInstrument.class)).isEqualTo(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n        BillingInstrument deserialized = gson.fromJson(\"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\r\n        assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n        assertThat(deserialized).isInstanceOf(CreditCard.class);\r\n    }\r\n\r\n    @Test\r\n    public void testRuntimeTypeAdapterRecognizeSubtypes() {\r\n        // We don't have an explicit factory for CreditCard.class, but we do have one for\r\n        // BillingInstrument.class that has recognizeSubtypes(). So it should recognize CreditCard, and\r\n        // when we call gson.toJson(original) below, without an explicit type, it should be invoked.\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).recognizeSubtypes().registerSubtype(CreditCard.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n        CreditCard original = new CreditCard(\"Jesse\", 234);\r\n        assertThat(gson.toJson(original)).isEqualTo(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n        BillingInstrument deserialized = gson.fromJson(\"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\r\n        assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n        assertThat(deserialized).isInstanceOf(CreditCard.class);\r\n    }\r\n\r\n    @Test\r\n    public void testRuntimeTypeIsBaseType() {\r\n        TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BillingInstrument.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n        BillingInstrument original = new BillingInstrument(\"Jesse\");\r\n        assertThat(gson.toJson(original, BillingInstrument.class)).isEqualTo(\"{\\\"type\\\":\\\"BillingInstrument\\\",\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n        BillingInstrument deserialized = gson.fromJson(\"{type:'BillingInstrument',ownerName:'Jesse'}\", BillingInstrument.class);\r\n        assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n    }\r\n\r\n    @Test\r\n    public void testNullBaseType() {\r\n        assertThrows(NullPointerException.class, () -> RuntimeTypeAdapterFactory.of(null));\r\n    }\r\n\r\n    @Test\r\n    public void testNullTypeFieldName() {\r\n        assertThrows(NullPointerException.class, () -> RuntimeTypeAdapterFactory.of(BillingInstrument.class, null));\r\n    }\r\n\r\n    @Test\r\n    public void testNullSubtype() {\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n        assertThrows(NullPointerException.class, () -> rta.registerSubtype(null));\r\n    }\r\n\r\n    @Test\r\n    public void testNullLabel() {\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n        assertThrows(NullPointerException.class, () -> rta.registerSubtype(CreditCard.class, null));\r\n    }\r\n\r\n    @Test\r\n    public void testDuplicateSubtype() {\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n        rta.registerSubtype(CreditCard.class, \"CC\");\r\n        var e = assertThrows(IllegalArgumentException.class, () -> rta.registerSubtype(CreditCard.class, \"Visa\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"types and labels must be unique\");\r\n    }\r\n\r\n    @Test\r\n    public void testDuplicateLabel() {\r\n        RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n        rta.registerSubtype(CreditCard.class, \"CC\");\r\n        var e = assertThrows(IllegalArgumentException.class, () -> rta.registerSubtype(BankTransfer.class, \"CC\"));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"types and labels must be unique\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeMissingTypeField() {\r\n        TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n        var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{ownerName:'Jesse'}\", BillingInstrument.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"cannot deserialize \" + BillingInstrument.class + \" because it does not define a field named type\");\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeMissingSubtype() {\r\n        TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BankTransfer.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n        var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{type:'CreditCard',ownerName:'Jesse'}\", BillingInstrument.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"cannot deserialize \" + BillingInstrument.class + \" subtype named CreditCard; did you forget to register a subtype?\");\r\n    }\r\n\r\n    @Test\r\n    public void testSerializeMissingSubtype() {\r\n        TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BankTransfer.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n        var e = assertThrows(JsonParseException.class, () -> gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"cannot serialize \" + CreditCard.class.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n\r\n    @Test\r\n    public void testSerializeCollidingTypeFieldName() {\r\n        TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\").registerSubtype(CreditCard.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n        var e = assertThrows(JsonParseException.class, () -> gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class));\r\n        assertThat(e).hasMessageThat().isEqualTo(\"cannot serialize \" + CreditCard.class.getName() + \" because it already defines a field named cvv\");\r\n    }\r\n\r\n    @Test\r\n    public void testSerializeWrappedNullValue() {\r\n        TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n        Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n        String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n        BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n        assertThat(deserialized.instrument).isNull();\r\n    }\r\n\r\n    static class BillingInstrumentWrapper {\r\n\r\n        BillingInstrument instrument;\r\n\r\n        BillingInstrumentWrapper(BillingInstrument instrument) {\r\n            this.instrument = instrument;\r\n        }\r\n    }\r\n\r\n    static class BillingInstrument {\r\n\r\n        private final String ownerName;\r\n\r\n        BillingInstrument(String ownerName) {\r\n            this.ownerName = ownerName;\r\n        }\r\n    }\r\n\r\n    static class CreditCard extends BillingInstrument {\r\n\r\n        int cvv;\r\n\r\n        CreditCard(String ownerName, int cvv) {\r\n            super(ownerName);\r\n            this.cvv = cvv;\r\n        }\r\n    }\r\n\r\n    static class BankTransfer extends BillingInstrument {\r\n\r\n        int bankAccount;\r\n\r\n        BankTransfer(String ownerName, int bankAccount) {\r\n            super(ownerName);\r\n            this.bankAccount = bankAccount;\r\n        }\r\n    }\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testRuntimeTypeAdapter",
    "start_line": 30,
    "end_line": 43,
    "code": "@Test\r\npublic void testRuntimeTypeAdapter() {\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n    CreditCard original = new CreditCard(\"Jesse\", 234);\r\n    assertThat(gson.toJson(original, BillingInstrument.class)).isEqualTo(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n    BillingInstrument deserialized = gson.fromJson(\"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\r\n    assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n    assertThat(deserialized).isInstanceOf(CreditCard.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testRuntimeTypeAdapterRecognizeSubtypes",
    "start_line": 45,
    "end_line": 63,
    "code": "@Test\r\npublic void testRuntimeTypeAdapterRecognizeSubtypes() {\r\n    // We don't have an explicit factory for CreditCard.class, but we do have one for\r\n    // BillingInstrument.class that has recognizeSubtypes(). So it should recognize CreditCard, and\r\n    // when we call gson.toJson(original) below, without an explicit type, it should be invoked.\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).recognizeSubtypes().registerSubtype(CreditCard.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n    CreditCard original = new CreditCard(\"Jesse\", 234);\r\n    assertThat(gson.toJson(original)).isEqualTo(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n    BillingInstrument deserialized = gson.fromJson(\"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\r\n    assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n    assertThat(deserialized).isInstanceOf(CreditCard.class);\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testRuntimeTypeIsBaseType",
    "start_line": 65,
    "end_line": 78,
    "code": "@Test\r\npublic void testRuntimeTypeIsBaseType() {\r\n    TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BillingInstrument.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(rta).create();\r\n    BillingInstrument original = new BillingInstrument(\"Jesse\");\r\n    assertThat(gson.toJson(original, BillingInstrument.class)).isEqualTo(\"{\\\"type\\\":\\\"BillingInstrument\\\",\\\"ownerName\\\":\\\"Jesse\\\"}\");\r\n    BillingInstrument deserialized = gson.fromJson(\"{type:'BillingInstrument',ownerName:'Jesse'}\", BillingInstrument.class);\r\n    assertThat(deserialized.ownerName).isEqualTo(\"Jesse\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testNullBaseType",
    "start_line": 80,
    "end_line": 83,
    "code": "@Test\r\npublic void testNullBaseType() {\r\n    assertThrows(NullPointerException.class, () -> RuntimeTypeAdapterFactory.of(null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testNullTypeFieldName",
    "start_line": 85,
    "end_line": 90,
    "code": "@Test\r\npublic void testNullTypeFieldName() {\r\n    assertThrows(NullPointerException.class, () -> RuntimeTypeAdapterFactory.of(BillingInstrument.class, null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testNullSubtype",
    "start_line": 92,
    "end_line": 97,
    "code": "@Test\r\npublic void testNullSubtype() {\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n    assertThrows(NullPointerException.class, () -> rta.registerSubtype(null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testNullLabel",
    "start_line": 99,
    "end_line": 104,
    "code": "@Test\r\npublic void testNullLabel() {\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n    assertThrows(NullPointerException.class, () -> rta.registerSubtype(CreditCard.class, null));\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testDuplicateSubtype",
    "start_line": 106,
    "end_line": 115,
    "code": "@Test\r\npublic void testDuplicateSubtype() {\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n    rta.registerSubtype(CreditCard.class, \"CC\");\r\n    var e = assertThrows(IllegalArgumentException.class, () -> rta.registerSubtype(CreditCard.class, \"Visa\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"types and labels must be unique\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testDuplicateLabel",
    "start_line": 117,
    "end_line": 126,
    "code": "@Test\r\npublic void testDuplicateLabel() {\r\n    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(BillingInstrument.class);\r\n    rta.registerSubtype(CreditCard.class, \"CC\");\r\n    var e = assertThrows(IllegalArgumentException.class, () -> rta.registerSubtype(BankTransfer.class, \"CC\"));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"types and labels must be unique\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeMissingTypeField",
    "start_line": 128,
    "end_line": 143,
    "code": "@Test\r\npublic void testDeserializeMissingTypeField() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{ownerName:'Jesse'}\", BillingInstrument.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"cannot deserialize \" + BillingInstrument.class + \" because it does not define a field named type\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testDeserializeMissingSubtype",
    "start_line": 145,
    "end_line": 160,
    "code": "@Test\r\npublic void testDeserializeMissingSubtype() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    var e = assertThrows(JsonParseException.class, () -> gson.fromJson(\"{type:'CreditCard',ownerName:'Jesse'}\", BillingInstrument.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"cannot deserialize \" + BillingInstrument.class + \" subtype named CreditCard; did you forget to register a subtype?\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeMissingSubtype",
    "start_line": 162,
    "end_line": 177,
    "code": "@Test\r\npublic void testSerializeMissingSubtype() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    var e = assertThrows(JsonParseException.class, () -> gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"cannot serialize \" + CreditCard.class.getName() + \"; did you forget to register a subtype?\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeCollidingTypeFieldName",
    "start_line": 179,
    "end_line": 195,
    "code": "@Test\r\npublic void testSerializeCollidingTypeFieldName() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\").registerSubtype(CreditCard.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    var e = assertThrows(JsonParseException.class, () -> gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class));\r\n    assertThat(e).hasMessageThat().isEqualTo(\"cannot serialize \" + CreditCard.class.getName() + \" because it already defines a field named cvv\");\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  },
  {
    "type": "method",
    "name": "testSerializeWrappedNullValue",
    "start_line": 197,
    "end_line": 209,
    "code": "@Test\r\npublic void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertThat(deserialized.instrument).isNull();\r\n}",
    "file_path": "C:\\Users\\su9ki\\Desktop\\git-ai\\git-agent\\repository\\gson\\extras\\src\\test\\java\\com\\google\\gson\\typeadapters\\RuntimeTypeAdapterFactoryTest.java"
  }
]