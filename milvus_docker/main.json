[
  {
    "type": "module",
    "name": "",
    "start_line": 1,
    "end_line": 5,
    "code": "import setting\nimport Tetris_Option\nimport pygame\nimport random\nimport numpy as np",
    "file_path": "..\\..\\Tetris_AI\\main.py"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 7,
    "end_line": 10,
    "code": "board = np.zeros([20,10])\nboard[19,:] = 1\nsetting.set_window(\"test\",320,640)\ntest = 0",
    "file_path": "..\\..\\Tetris_AI\\main.py"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 12,
    "end_line": 12,
    "code": "t = 0",
    "file_path": "..\\..\\Tetris_AI\\main.py"
  },
  {
    "type": "script",
    "name": "",
    "start_line": 14,
    "end_line": 69,
    "code": "while setting.program_run:\n\n    if t >= 80000: #TO CONTROL THE RUNNING SPEED\n\n        block_idx = random.randint(1,7) #블럭의 형태 설정\n        rot_range = Tetris_Option.rot_range(block_idx) #블럭의 돌릴수 있는 경우의 수 설정\n\n        efficiency = -50 #현재 블럭 위치의 점수\n\n\n        for i in range(rot_range):\n            rot = i + 1\n\n            board_temp = np.copy(board) #비교 분석을 위한 보드\n            board_goal = np.copy(board) #비교 분석후 잠시 가장 효율적인 블럭을 저장을 해둘 보드\n\n            block_set_count = 0 # 블럭을 놓은 횟수\n\n\n            block = Tetris_Option.get_block(block_idx, rot)  # GETTING BLOCK\n            block_height, block_width = block.shape\n            max_col_case = Tetris_Option.get_col_case(block_idx, rot, block)  # HOW MUCH CAN TO SET COL BY\n                                                                              # YOUR BLOCK\n\n            for row in range(20 - block_height, 0, -1):\n\n                if block_set_count < max_col_case:\n\n                    for col in range(max_col_case):\n\n                        part = board[row: row + block_height , col: col + block_width] #보드에 블럭을 놓을 행렬 부분을 가져오기\n\n                        cel_mut = np.multiply(part,block)\n\n                        if cel_mut.sum() == 0 and block_set_count < max_col_case:# 블럭을 놓을 자리가 있다면\n\n                            board_temp[row: row + block_height , col: col + block_width] += block\n                            block_set_count += 1\n\n\n                            if efficiency < Tetris_Option.check_set_point(board_temp[row : row + block_height + 1,col: col + block_width + 1]):\n                            #전 블럭의 위치가 현재 블럭 위치 점수보다 낮다면\n                                efficiency = Tetris_Option.check_set_point(board_temp[row : row + block_height + 1,col: col + block_width + 1])\n                                board_goal = np.copy(board_temp)\n                                board_temp = np.copy(board)\n\n                            else:\n                                board_temp = np.copy(board)\n\n        board = np.copy(board_goal) #가장 효율적이었던 블럭을 최종 보드로 가져오기\n\n        setting.get_event(pygame.event.get())\n        setting.draw_screen(Tetris_Option.line_delete(board))\n        t = 0\n\n    t += 0.05",
    "file_path": "..\\..\\Tetris_AI\\main.py"
  }
]