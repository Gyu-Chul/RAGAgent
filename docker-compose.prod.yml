# 프로덕션용 Docker Compose - 마이크로서비스 분리
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ragit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragit-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragit-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ragit
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ragit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    env_file:
      - .env.docker
    environment:
      BACKEND_URL: http://backend:8001
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ragit-network

  # Frontend Web UI
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    env_file:
      - .env.docker
    environment:
      GATEWAY_URL: http://gateway:8080
      BACKEND_URL: http://backend:8001
    ports:
      - "8000:8000"
    depends_on:
      - gateway
      - backend
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - ragit-network

  # RAG Worker (Celery)
  rag-worker:
    build:
      context: .
      dockerfile: rag_worker/Dockerfile
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ragit
      REDIS_URL: redis://redis:6379/0
      BACKEND_URL: http://backend:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - ragit-network

volumes:
  postgres_data:

networks:
  ragit-network:
    driver: bridge